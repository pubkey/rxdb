"use strict";(self.webpackChunkrxdb=self.webpackChunkrxdb||[]).push([[3305],{7239:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var o=s(5893),t=s(1151);const r={title:"Key Compression",slug:"key-compression.html"},i="Key Compression",a={id:"key-compression",title:"Key Compression",description:"With the key compression plugin, documents will be stored in a compressed format which saves up to 40% disc space.",source:"@site/docs/key-compression.md",sourceDirName:".",slug:"/key-compression.html",permalink:"/key-compression.html",draft:!1,unlisted:!1,editUrl:"https://github.com/pubkey/rxdb/tree/master/docs-src/docs/key-compression.md",tags:[],version:"current",frontMatter:{title:"Key Compression",slug:"key-compression.html"},sidebar:"tutorialSidebar",previous:{title:"Encryption",permalink:"/encryption.html"},next:{title:"Local Documents",permalink:"/rx-local-document.html"}},c={},p=[{value:"Enable key compression",id:"enable-key-compression",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"key-compression",children:"Key Compression"}),"\n",(0,o.jsxs)(n.p,{children:["With the key compression plugin, documents will be stored in a compressed format which saves up to 40% disc space.\nFor compression the npm module ",(0,o.jsx)(n.a,{href:"https://github.com/pubkey/jsonschema-key-compression",children:"jsonschema-key-compression"})," is used.\nIt compresses json-data based on its json-schema while still having valid json. It works by compressing long attribute-names into smaller ones and backwards."]}),"\n",(0,o.jsxs)(n.p,{children:["The compression and decompression happens internally, so when you work with a ",(0,o.jsx)(n.code,{children:"RxDocument"}),", you can access any property like normal."]}),"\n",(0,o.jsx)(n.h2,{id:"enable-key-compression",children:"Enable key compression"}),"\n",(0,o.jsxs)(n.p,{children:["The key compression plugin is a wrapper around any other ",(0,o.jsx)(n.a,{href:"/rx-storage.html",children:"RxStorage"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"You first have to wrap your RxStorage with the key compression plugin"}),"\n",(0,o.jsxs)(n.li,{children:["Then use that as ",(0,o.jsx)(n.code,{children:"RxStorage"})," when calling ",(0,o.jsx)(n.code,{children:"createRxDatabase()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Then you have to enable the key compression by adding ",(0,o.jsx)(n.code,{children:"keyCompression: true"})," to your collection schema."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { wrappedKeyCompressionStorage } from 'rxdb/plugins/key-compression';\nimport { getRxStorageDexie } from 'rxdb/plugins/storage-dexie';\n\nconst storageWithKeyCompression = wrappedKeyCompressionStorage({\n    storage: getRxStorageDexie()\n});\n\nconst db = await createRxDatabase<RxStylechaseCollections>({\n    name: 'mydatabase',\n    storage: storageWithKeyCompression\n});\n\nconst mySchema = {\n  keyCompression: true, // set this to true, to enable the keyCompression\n  version: 0,\n  primaryKey: 'id',\n  type: 'object',\n  properties: {\n      id: {\n          type: 'string',\n          maxLength: 100 // <- the primary key must have set maxLength\n      }\n      /* ... */\n  }\n};\n\n/* ... */\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>i});var o=s(7294);const t={},r=o.createContext(t);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);