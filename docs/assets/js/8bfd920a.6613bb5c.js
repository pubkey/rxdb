"use strict";(globalThis.webpackChunkrxdb=globalThis.webpackChunkrxdb||[]).push([[2631],{3124:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"articles/ionic-storage","title":"RxDB - Local Ionic Storage with Encryption, Compression & Sync","description":"The best Ionic storage solution? RxDB empowers your hybrid apps with offline-first capabilities, secure encryption, data compression, and seamless data syncing to any backend.","source":"@site/docs/articles/ionic-storage.md","sourceDirName":"articles","slug":"/articles/ionic-storage.html","permalink":"/articles/ionic-storage.html","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"RxDB - Local Ionic Storage with Encryption, Compression & Sync","slug":"ionic-storage.html","description":"The best Ionic storage solution? RxDB empowers your hybrid apps with offline-first capabilities, secure encryption, data compression, and seamless data syncing to any backend."},"sidebar":"tutorialSidebar","previous":{"title":"RxDB - The Perfect Ionic Database","permalink":"/articles/ionic-database.html"},"next":{"title":"RxDB - The JSON Database Built for JavaScript","permalink":"/articles/json-database.html"}}');var t=i(4848),s=i(8453);const o={title:"RxDB - Local Ionic Storage with Encryption, Compression & Sync",slug:"ionic-storage.html",description:"The best Ionic storage solution? RxDB empowers your hybrid apps with offline-first capabilities, secure encryption, data compression, and seamless data syncing to any backend."},a="RxDB - Local Ionic Storage with Encryption, Compression & Sync",l={},c=[{value:"Why RxDB for Ionic Storage?",id:"why-rxdb-for-ionic-storage",level:2},{value:"1. Offline-Ready NoSQL Storage",id:"1-offline-ready-nosql-storage",level:3},{value:"2. Powerful Encryption",id:"2-powerful-encryption",level:3},{value:"3. Built-In Data Compression",id:"3-built-in-data-compression",level:3},{value:"4. Real-Time Sync &amp; Conflict Handling",id:"4-real-time-sync--conflict-handling",level:3},{value:"5. Easy to Adopt and Extend",id:"5-easy-to-adopt-and-extend",level:3},{value:"Quick Start: Implementing RxDB with LocalSTorage Storage",id:"quick-start-implementing-rxdb-with-localstorage-storage",level:2},{value:"Encryption Example",id:"encryption-example",level:2},{value:"Compression Example",id:"compression-example",level:2},{value:"RxDB vs. Other Ionic Storage Options",id:"rxdb-vs-other-ionic-storage-options",level:2},{value:"Follow Up",id:"follow-up",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"rxdb---local-ionic-storage-with-encryption-compression--sync",children:"RxDB - Local Ionic Storage with Encryption, Compression & Sync"})}),"\n",(0,t.jsxs)(n.p,{children:["When building ",(0,t.jsx)(n.strong,{children:"Ionic"})," apps, developers face the challenge of choosing a robust ",(0,t.jsx)(n.strong,{children:"Ionic storage"})," mechanism that supports:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Offline-First"})," usage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Encryption"})," to protect sensitive content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compression"})," to reduce storage usage and improve performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Seamless Sync"})," with any backend for real-time updates"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://rxdb.info/",children:"RxDB"})," (Reactive Database) offers all these features in a single, ",(0,t.jsx)(n.a,{href:"/articles/local-first-future.html",children:"local-first"})," database solution tailored to ",(0,t.jsx)(n.strong,{children:"Ionic"})," and other hybrid frameworks. Keep reading to learn how RxDB solves the most common storage pitfalls in hybrid app development while providing unmatched flexibility."]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("center",{children:(0,t.jsx)("a",{href:"https://rxdb.info/",children:(0,t.jsx)("img",{src:"../files/icons/ionic.svg",alt:"Ionic Database Storage",width:"120"})})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"why-rxdb-for-ionic-storage",children:"Why RxDB for Ionic Storage?"}),"\n",(0,t.jsx)(n.h3,{id:"1-offline-ready-nosql-storage",children:"1. Offline-Ready NoSQL Storage"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/offline-first.html",children:"Offline functionality"})," is crucial for modern mobile applications, particularly when devices encounter unreliable or slow networks. RxDB stores all data ",(0,t.jsx)(n.strong,{children:"locally"})," so your Ionic app can run seamlessly without needing a continuous internet connection. When a network is available again, RxDB automatically synchronizes changes with your backend - no extra code required."]}),"\n",(0,t.jsx)(n.h3,{id:"2-powerful-encryption",children:"2. Powerful Encryption"}),"\n",(0,t.jsxs)(n.p,{children:["Securing on-device data is paramount when handling sensitive information. RxDB includes ",(0,t.jsx)(n.a,{href:"../encryption.html",children:"encryption plugins"})," that let you:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Encrypt"})," data fields at rest with AES"]}),"\n",(0,t.jsx)(n.li,{children:"Invalidate data access by simply withholding the password"}),"\n",(0,t.jsx)(n.li,{children:"Keep your users' data confidential, even if the device is stolen"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This built-in encryption sets RxDB apart from many other Ionic storage options that lack integrated security."}),"\n",(0,t.jsx)(n.h3,{id:"3-built-in-data-compression",children:"3. Built-In Data Compression"}),"\n",(0,t.jsxs)(n.p,{children:["Large or repetitive data can significantly slow down devices with minimal memory. RxDB's ",(0,t.jsx)(n.a,{href:"/key-compression.html",children:"key-compression"})," feature decreases document size stored on the device, improving overall performance by:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reducing disk usage"}),"\n",(0,t.jsx)(n.li,{children:"Accelerating queries"}),"\n",(0,t.jsx)(n.li,{children:"Minimizing network overhead when syncing"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-real-time-sync--conflict-handling",children:"4. Real-Time Sync & Conflict Handling"}),"\n",(0,t.jsxs)(n.p,{children:["In addition to functioning fully offline, RxDB supports advanced ",(0,t.jsx)(n.a,{href:"/replication.html",children:"replication"})," options. Your Ionic app can instantly sync updates with any backend (",(0,t.jsx)(n.a,{href:"/replication-couchdb.html",children:"CouchDB"}),", ",(0,t.jsx)(n.a,{href:"/replication-firestore.html",children:"Firestore"}),", ",(0,t.jsx)(n.a,{href:"/replication-graphql.html",children:"GraphQL"}),", or ",(0,t.jsx)(n.a,{href:"/replication-http.html",children:"custom REST"}),"), maintaining a ",(0,t.jsx)(n.a,{href:"/articles/realtime-database.html",children:"real-time"})," user experience. Plus, RxDB handles ",(0,t.jsx)(n.a,{href:"/transactions-conflicts-revisions.html",children:"conflicts"})," gracefully - meaning less worry about clashing user edits."]}),"\n",(0,t.jsx)("p",{align:"center",children:(0,t.jsx)("img",{src:"../files/database-replication.png",alt:"database replication",width:"200"})}),"\n",(0,t.jsx)(n.h3,{id:"5-easy-to-adopt-and-extend",children:"5. Easy to Adopt and Extend"}),"\n",(0,t.jsxs)(n.p,{children:["RxDB runs with a ",(0,t.jsx)(n.strong,{children:"NoSQL"})," approach and integrates seamlessly into ",(0,t.jsx)(n.a,{href:"https://ionicframework.com/docs/angular/overview",children:"Ionic Angular"})," or other frameworks you might use with Ionic. You can extend or replace storage backends, add encryption, or build advanced offline-first features with minimal overhead."]}),"\n",(0,t.jsx)("center",{children:(0,t.jsx)("a",{href:"https://rxdb.info/",children:(0,t.jsx)("img",{src:"../files/logo/rxdb_javascript_database.svg",alt:"Ionic Storage Database",width:"220"})})}),"\n",(0,t.jsx)(n.h2,{id:"quick-start-implementing-rxdb-with-localstorage-storage",children:"Quick Start: Implementing RxDB with LocalSTorage Storage"}),"\n",(0,t.jsxs)(n.p,{children:["For a simple proof-of-concept or testing environment in ",(0,t.jsx)(n.a,{href:"/articles/ionic-database.html",children:"Ionic"}),", you can use ",(0,t.jsx)(n.a,{href:"/rx-storage-localstorage.html",children:"localstorage"})," as your underlying storage. Later, if you need better native performance, you can ",(0,t.jsx)(n.strong,{children:"switch to the SQLite storage"})," offered by the ",(0,t.jsx)(n.a,{href:"https://rxdb.info/premium/",children:"RxDB Premium plugins"}),"."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Install RxDB"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install rxdb rxjs\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Initialize the Database"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { createRxDatabase } from 'rxdb/plugins/core';\nimport { getRxStorageLocalstorage } from 'rxdb/plugins/storage-localstorage';\n\nasync function initDB() {\n  const db = await createRxDatabase({\n    name: 'myionicdb',\n    storage: getRxStorageLocalstorage(),\n    multiInstance: false // or true if you plan multi-tab usage\n    // Note: If you need encryption, set `password` here\n  });\n\n  await db.addCollections({\n    notes: {\n      schema: {\n        title: 'notes schema',\n        version: 0,\n        type: 'object',\n        primaryKey: 'id',\n        properties: {\n          id: { type: 'string' },\n          content: { type: 'string' },\n          timestamp: { type: 'number' }\n        },\n        required: ['id']\n      }\n    }\n  });\n\n  return db;\n}\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Ready to Upgrade Later?"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["When you need the best performance on mobile devices, purchase the RxDB ",(0,t.jsx)(n.a,{href:"/premium/",children:"Premium"})," ",(0,t.jsx)(n.a,{href:"/rx-storage-sqlite.html",children:"SQLite Storage"})," and replace ",(0,t.jsx)(n.code,{children:"getRxStorageLocalstorage()"})," with ",(0,t.jsx)(n.code,{children:"getRxStorageSQLite()"})," - your app logic remains largely the same. You only have to change the configuration."]}),"\n",(0,t.jsx)(n.h2,{id:"encryption-example",children:"Encryption Example"}),"\n",(0,t.jsxs)(n.p,{children:["To secure local data, add the crypto-js ",(0,t.jsx)(n.a,{href:"/encryption.html",children:"encryption plugin"})," (free version) or the ",(0,t.jsx)(n.a,{href:"/premium/",children:"premium"})," web-crypto plugin. Below is an example using the free crypto-js plugin:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { wrappedKeyEncryptionCryptoJsStorage } from 'rxdb/plugins/encryption-crypto-js';\nimport { getRxStorageLocalstorage } from 'rxdb/plugins/storage-localstorage';\nimport { createRxDatabase } from 'rxdb/plugins/core';\n\nasync function initEncryptedDB() {\n  const encryptedStorage = wrappedKeyEncryptionCryptoJsStorage({\n    storage: getRxStorageLocalstorage()\n  });\n\n  const db = await createRxDatabase({\n    name: 'secureIonicDB',\n    storage: encryptedStorage,\n    password: 'myS3cretP4ssw0rd'\n  });\n\n  await db.addCollections({\n    secrets: {\n      schema: {\n        title: 'secret schema',\n        version: 0,\n        type: 'object',\n        primaryKey: 'id',\n        properties: {\n          id: { type: 'string' },\n          text: { type: 'string' }\n        },\n        required: ['id'],\n        // all fields in this array will be stored encrypted:\n        encrypted: ['text']\n      }\n    }\n  });\n\n  return db;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"With encryption enabled:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"text"})," is automatically encrypted at rest."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/rx-query.html",children:"Queries"})," on encrypted fields are not directly possible (since data is encrypted), but once a document is loaded, RxDB decrypts it for normal usage."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"compression-example",children:"Compression Example"}),"\n",(0,t.jsxs)(n.p,{children:["To minimize the storage footprint, RxDB offers a ",(0,t.jsx)(n.a,{href:"/key-compression.html",children:"key-compression"})," feature. You can enable it in your schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await db.addCollections({\n  logs: {\n    schema: {\n      title: 'logs schema',\n      version: 0,\n      keyCompression: true, // enable compression\n      type: 'object',\n      primaryKey: 'id',\n      properties: {\n        id: { type: 'string' },\n        message: { type: 'string' },\n        createdAt: { type: 'string', format: 'date-time' }\n      }\n    }\n  }\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["With ",(0,t.jsx)(n.code,{children:"keyCompression: true"}),", RxDB shortens field names internally, significantly reducing document size. This helps both stored data and network transport during replication."]}),"\n",(0,t.jsx)(n.h2,{id:"rxdb-vs-other-ionic-storage-options",children:"RxDB vs. Other Ionic Storage Options"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Ionic Native Storage"})," or ",(0,t.jsx)(n.strong,{children:"Capacitor-based"})," key-value stores may handle small amounts of data but lack advanced features like:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Complex queries"}),"\n",(0,t.jsx)(n.li,{children:"Full NoSQL document model"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/offline-first.html",children:"Offline-first"})," ",(0,t.jsx)(n.a,{href:"/replication.html",children:"sync"})]}),"\n",(0,t.jsx)(n.li,{children:"Encryption & key compression out of the box"}),"\n",(0,t.jsx)(n.li,{children:"RxDB stands out by delivering all these capabilities in a unified library."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"follow-up",children:"Follow Up"}),"\n",(0,t.jsxs)(n.p,{children:["For Ionic storage that supports offline-first operations, built-in encryption, optional data compression, and live syncing with any backend, RxDB provides a powerful solution. Start quickly with ",(0,t.jsx)(n.a,{href:"/rx-storage-localstorage.html",children:"localstorage"})," for local development and testing - then scale up to the premium SQLite storage for optimal performance on production mobile devices."]}),"\n",(0,t.jsx)(n.p,{children:"Ready to learn more?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Explore the ",(0,t.jsx)(n.a,{href:"/quickstart.html",children:"RxDB Quickstart Guide"})]}),"\n",(0,t.jsxs)(n.li,{children:["Check out ",(0,t.jsx)(n.a,{href:"/encryption.html",children:"RxDB Encryption"})," to protect user data"]}),"\n",(0,t.jsxs)(n.li,{children:["Learn about ",(0,t.jsx)(n.a,{href:"/rx-storage-sqlite.html",children:"SQLite Storage"})," in ",(0,t.jsx)(n.a,{href:"/premium/",children:"RxDB Premium"})," for top ",(0,t.jsx)(n.a,{href:"/rx-storage-performance.html",children:"performance"})," on mobile."]}),"\n",(0,t.jsxs)(n.li,{children:["Join our community on the ",(0,t.jsx)(n.a,{href:"/chat/",children:"RxDB Chat"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"RxDB"})," - The ultimate toolkit for Ionic developers seeking offline-first, secure, and compressed local data, with real-time sync to any server."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);