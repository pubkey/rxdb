"use strict";(globalThis.webpackChunkrxdb=globalThis.webpackChunkrxdb||[]).push([[4812],{2454:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"rx-storage-shared-worker","title":"Boost Performance with SharedWorker RxStorage","description":"Tap into single-instance storage with RxDB\'s SharedWorker. Improve efficiency, cut duplication, and keep your app lightning-fast across tabs.","source":"@site/docs/rx-storage-shared-worker.md","sourceDirName":".","slug":"/rx-storage-shared-worker.html","permalink":"/rx-storage-shared-worker.html","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Boost Performance with SharedWorker RxStorage","slug":"rx-storage-shared-worker.html","description":"Tap into single-instance storage with RxDB\'s SharedWorker. Improve efficiency, cut duplication, and keep your app lightning-fast across tabs."},"sidebar":"tutorialSidebar","previous":{"title":"Worker RxStorage \ud83d\udc51","permalink":"/rx-storage-worker.html"},"next":{"title":"Memory Mapped RxStorage \ud83d\udc51","permalink":"/rx-storage-memory-mapped.html"}}');var t=n(4848),o=n(8453);const s={title:"Boost Performance with SharedWorker RxStorage",slug:"rx-storage-shared-worker.html",description:"Tap into single-instance storage with RxDB's SharedWorker. Improve efficiency, cut duplication, and keep your app lightning-fast across tabs."},i="SharedWorker RxStorage",d={},h=[{value:"Usage",id:"usage",level:2},{value:"On the SharedWorker process",id:"on-the-sharedworker-process",level:3},{value:"On the main process",id:"on-the-main-process",level:3},{value:"Pre-build workers",id:"pre-build-workers",level:2},{value:"Building a custom worker",id:"building-a-custom-worker",level:2},{value:"Passing in a SharedWorker instance",id:"passing-in-a-sharedworker-instance",level:2},{value:"Set multiInstance: false",id:"set-multiinstance-false",level:2},{value:"Replication with SharedWorker",id:"replication-with-sharedworker",level:2},{value:"Limitations",id:"limitations",level:3},{value:"FAQ",id:"faq",level:3}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"sharedworker-rxstorage",children:"SharedWorker RxStorage"})}),"\n",(0,t.jsxs)(r.p,{children:["The SharedWorker ",(0,t.jsx)(r.a,{href:"/rx-storage.html",children:"RxStorage"})," uses the ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker",children:"SharedWorker API"})," to run the storage inside of a separate JavaScript process ",(0,t.jsx)(r.strong,{children:"in browsers"}),". Compared to a normal ",(0,t.jsx)(r.a,{href:"/rx-storage-worker.html",children:"WebWorker"}),", the SharedWorker is created exactly once, even when there are multiple browser tabs opened. Because of having exactly one worker, multiple performance optimizations can be done because the storage itself does not have to handle multiple opened database connections."]}),"\n",(0,t.jsx)(r.admonition,{title:"Premium",type:"note",children:(0,t.jsxs)(r.p,{children:["This plugin is part of ",(0,t.jsx)(r.a,{href:"/premium/",children:"RxDB Premium \ud83d\udc51"}),". It is not part of the default RxDB module."]})}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.h3,{id:"on-the-sharedworker-process",children:"On the SharedWorker process"}),"\n",(0,t.jsxs)(r.p,{children:["In the worker process JavaScript file, you have wrap the original RxStorage with ",(0,t.jsx)(r.code,{children:"getRxStorageIndexedDB()"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"// shared-worker.ts\n\nimport { exposeWorkerRxStorage } from 'rxdb-premium/plugins/storage-worker';\nimport { \n    getRxStorageIndexedDB\n} from 'rxdb-premium/plugins/indexeddb';\n\nexposeWorkerRxStorage({\n    /**\n     * You can wrap any implementation of the RxStorage interface\n     * into a worker.\n     * Here we use the IndexedDB RxStorage.\n     */\n    storage: getRxStorageIndexedDB()\n});\n"})}),"\n",(0,t.jsx)(r.h3,{id:"on-the-main-process",children:"On the main process"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import {\n    createRxDatabase\n} from 'rxdb';\nimport { getRxStorageSharedWorker } from 'rxdb-premium/plugins/storage-worker';\nimport { getRxStorageIndexedDB } from 'rxdb/plugins/storage-indexeddb';\n\n\nconst database = await createRxDatabase({\n    name: 'mydatabase',\n    storage: getRxStorageSharedWorker(\n        {\n            /**\n             * Contains any value that can be used as parameter\n             * to the SharedWorker constructor of thread.js\n             * Most likely you want to put the path to the shared-worker.js file in here.\n             * \n             * @link https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker?retiredLocale=de\n             */\n            workerInput: 'path/to/shared-worker.js',\n            /**\n             * (Optional) options\n             * for the worker.\n             */\n            workerOptions: {\n                type: 'module',\n                credentials: 'omit'\n            }\n        }\n    )\n});\n"})}),"\n",(0,t.jsx)(r.h2,{id:"pre-build-workers",children:"Pre-build workers"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"shared-worker.js"})," must be a self containing JavaScript file that contains all dependencies in a bundle.\nTo make it easier for you, RxDB ships with pre-bundles worker files that are ready to use.\nYou can find them in the folder ",(0,t.jsx)(r.code,{children:"node_modules/rxdb-premium/dist/workers"})," after you have installed the ",(0,t.jsx)(r.a,{href:"/premium/",children:"RxDB Premium \ud83d\udc51 Plugin"}),". From there you can copy them to a location where it can be served from the webserver and then use their path to create the ",(0,t.jsx)(r.code,{children:"RxDatabase"})]}),"\n",(0,t.jsxs)(r.p,{children:["Any valid ",(0,t.jsx)(r.code,{children:"worker.js"})," JavaScript file can be used both, for normal Workers and SharedWorkers."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import {\n    createRxDatabase\n} from 'rxdb';\nimport { getRxStorageSharedWorker } from 'rxdb-premium/plugins/storage-worker';\nconst database = await createRxDatabase({\n    name: 'mydatabase',\n    storage: getRxStorageSharedWorker(\n        {\n            /**\n             * Path to where the copied file from node_modules/rxdb-premium/dist/workers\n             * is reachable from the webserver.\n             */\n            workerInput: '/indexeddb.shared-worker.js'\n        }\n    )\n});\n"})}),"\n",(0,t.jsx)(r.h2,{id:"building-a-custom-worker",children:"Building a custom worker"}),"\n",(0,t.jsxs)(r.p,{children:["To build a custom ",(0,t.jsx)(r.code,{children:"worker.js"})," file, check out the webpack config at the ",(0,t.jsx)(r.a,{href:"/rx-storage-worker.html#building-a-custom-worker",children:"worker"})," documentation. Any worker file form the worker storage can also be used in a shared worker because ",(0,t.jsx)(r.code,{children:"exposeWorkerRxStorage"})," detects where it runs and exposes the correct messaging endpoints."]}),"\n",(0,t.jsx)(r.h2,{id:"passing-in-a-sharedworker-instance",children:"Passing in a SharedWorker instance"}),"\n",(0,t.jsxs)(r.p,{children:["Instead of setting an url as ",(0,t.jsx)(r.code,{children:"workerInput"}),", you can also specify a function that returns a new ",(0,t.jsx)(r.code,{children:"SharedWorker"})," instance when called. This is mostly used when you have a custom worker file and dynamically import it.\nThis works equal to the ",(0,t.jsx)(r.a,{href:"/rx-storage-worker.html#passing-in-a-worker-instance",children:"workerInput of the Worker Storage"})]}),"\n",(0,t.jsx)(r.h2,{id:"set-multiinstance-false",children:"Set multiInstance: false"}),"\n",(0,t.jsxs)(r.p,{children:["When you know that you only ever create your RxDatabase inside of the shared worker, you might want to set ",(0,t.jsx)(r.code,{children:"multiInstance: false"})," to prevent sending change events across JavaScript realms and to improve performance. Do not set this when you also create the same storage on another realm, like when you have the same RxDatabase once inside the shared worker and once on the main thread."]}),"\n",(0,t.jsx)(r.h2,{id:"replication-with-sharedworker",children:"Replication with SharedWorker"}),"\n",(0,t.jsxs)(r.p,{children:["When a SharedWorker RxStorage is used, it is recommended to run the replication ",(0,t.jsx)(r.strong,{children:"inside"})," of the worker. This is the best option for performance. You can do that by opening another ",(0,t.jsx)(r.a,{href:"/rx-database.html",children:"RxDatabase"})," inside of it and starting the replication there. If you are not concerned about performance, you can still start replication on the main thread instead. But you should never run replication on both the main thread ",(0,t.jsx)(r.strong,{children:"and"})," the worker."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"// shared-worker.ts\n\nimport { exposeWorkerRxStorage } from 'rxdb-premium/plugins/storage-worker';\nimport { \n    getRxStorageIndexedDB\n} from 'rxdb-premium/plugins/storage-indexeddb';\nimport {\n    createRxDatabase,\n    addRxPlugin\n} from 'rxdb';\nimport {\n    RxDBReplicationGraphQLPlugin\n} from 'rxdb/plugins/replication-graphql';\naddRxPlugin(RxDBReplicationGraphQLPlugin);\n\nconst baseStorage = getRxStorageIndexedDB();\n\n// first expose the RxStorage to the outside\nexposeWorkerRxStorage({\n    storage: baseStorage\n});\n\n/**\n * Then create a normal RxDatabase and RxCollections\n * and start the replication.\n */\nconst database = await createRxDatabase({\n    name: 'mydatabase',\n    storage: baseStorage\n});\nawait db.addCollections({\n    humans: {/* ... */}\n});\nconst replicationState = db.humans.syncGraphQL({/* ... */});\n"})}),"\n",(0,t.jsx)(r.h3,{id:"limitations",children:"Limitations"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["The SharedWorker API is ",(0,t.jsx)(r.a,{href:"https://caniuse.com/sharedworkers",children:"not available in some mobile browser"})]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"faq",children:"FAQ"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Can I use this plugin with a Service Worker?"}),(0,t.jsx)("div",{children:(0,t.jsxs)(r.p,{children:["No. A Service Worker ",(0,t.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API",children:"is not the same"})," as a Shared Worker. While you can use RxDB inside of a ServiceWorker, you cannot use the ServiceWorker as a RxStorage that gets accessed by an outside RxDatabase instance."]})})]})]})}function c(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var a=n(6540);const t={},o=a.createContext(t);function s(e){const r=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(o.Provider,{value:r},e.children)}}}]);