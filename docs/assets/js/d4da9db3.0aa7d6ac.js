"use strict";(globalThis.webpackChunkrxdb=globalThis.webpackChunkrxdb||[]).push([[1400],{340:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rx-storage-memory","title":"Lightning-Fast Memory Storage for RxDB","description":"Use Memory RxStorage for a high-performance, JavaScript in-memory database. Built for speed, making it perfect for unit tests and rapid prototyping.","source":"@site/docs/rx-storage-memory.md","sourceDirName":".","slug":"/rx-storage-memory.html","permalink":"/rx-storage-memory.html","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Lightning-Fast Memory Storage for RxDB","slug":"rx-storage-memory.html","description":"Use Memory RxStorage for a high-performance, JavaScript in-memory database. Built for speed, making it perfect for unit tests and rapid prototyping."},"sidebar":"tutorialSidebar","previous":{"title":"OPFS \ud83d\udc51 (Browser)","permalink":"/rx-storage-opfs.html"},"next":{"title":"Filesystem Node \ud83d\udc51 (Node.js)","permalink":"/rx-storage-filesystem-node.html"}}');var o=t(4848),s=t(8453);const a={title:"Lightning-Fast Memory Storage for RxDB",slug:"rx-storage-memory.html",description:"Use Memory RxStorage for a high-performance, JavaScript in-memory database. Built for speed, making it perfect for unit tests and rapid prototyping."},i="Memory RxStorage",l={},d=[{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3}];function m(e){const r={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"memory-rxstorage",children:"Memory RxStorage"})}),"\n",(0,o.jsxs)(r.p,{children:["The Memory ",(0,o.jsx)(r.code,{children:"RxStorage"})," is based on plain in memory arrays and objects. It can be used in all environments and is made for performance.\nUse this storage when you need a really fast database like in your unit tests or when you use RxDB with server side rendering."]}),"\n",(0,o.jsx)(r.h3,{id:"pros",children:"Pros"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Really fast. Uses binary search on all operations."}),"\n",(0,o.jsx)(r.li,{children:"Small build size"}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"cons",children:"Cons"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"No persistence"}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"import {\n    createRxDatabase\n} from 'rxdb';\nimport {\n    getRxStorageMemory\n} from 'rxdb/plugins/storage-memory';\n\nconst db = await createRxDatabase({\n    name: 'exampledb',\n    storage: getRxStorageMemory()\n});\n"})})]})}function c(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>i});var n=t(6540);const o={},s=n.createContext(o);function a(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);