"use strict";(globalThis.webpackChunkrxdb=globalThis.webpackChunkrxdb||[]).push([[6115],{658:(e,n,t)=>{t.d(n,{a:()=>s});var r=t(6540),i=t(3028),o=t(46),a=t(4848);const s=(0,r.forwardRef)(function({centered:e=!0,maskClosable:n=!1,footer:t=null,styles:r,className:s,title:l="\u200e",children:d,...c},h){return(0,a.jsxs)(i.A,{ref:h,centered:e,maskClosable:n,footer:t,rootClassName:["my-modal",s].filter(Boolean).join(" "),styles:{content:{borderRadius:0,backgroundColor:"var(--bg-color)",color:"white",fontWeight:700,padding:16,paddingTop:12,width:"90vw",maxWidth:"100%"},header:{margin:0,padding:"16px 20px",borderBottom:"1px solid #f0f0f0"},body:{padding:0},footer:{padding:16},...r},closeIcon:(0,a.jsx)("span",{className:"my-modal__close",style:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:28,height:28,borderRadius:8},children:(0,a.jsx)(o.g,{clickable:!0})}),...c,children:[(0,a.jsx)("h3",{children:l}),d]})})},2607:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>h,default:()=>x,frontMatter:()=>c,metadata:()=>r,toc:()=>g});const r=JSON.parse('{"id":"replication-mongodb","title":"MongoDB Realtime Sync Engine for Local-First Apps","description":"Build real-time, offline-capable apps with RxDB + MongoDB replication. Push/pull changes, use change streams, and keep data in sync across devices.","source":"@site/docs/replication-mongodb.md","sourceDirName":".","slug":"/replication-mongodb.html","permalink":"/replication-mongodb.html","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"MongoDB Realtime Sync Engine for Local-First Apps","slug":"replication-mongodb.html","description":"Build real-time, offline-capable apps with RxDB + MongoDB replication. Push/pull changes, use change streams, and keep data in sync across devices."},"sidebar":"tutorialSidebar","previous":{"title":"Contribute & Innovate with RxDB","permalink":"/contribution.html"},"next":{"title":"Supabase Replication","permalink":"/replication-supabase.html"}}');var i=t(4848),o=t(8453),a=t(3894),s=t(7580),l=t(3319),d=t(7891);const c={title:"MongoDB Realtime Sync Engine for Local-First Apps",slug:"replication-mongodb.html",description:"Build real-time, offline-capable apps with RxDB + MongoDB replication. Push/pull changes, use change streams, and keep data in sync across devices."},h="MongoDB Replication Plugin for RxDB \u2014 Real-Time, Offline-First Sync",p={},g=[{value:"Key Features",id:"key-features",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Setting up the Client-RxServer-MongoDB Sync",id:"setting-up-the-client-rxserver-mongodb-sync",level:2},{value:"Install the Client Dependencies",id:"install-the-client-dependencies",level:3},{value:"Set up a MongoDB Server",id:"set-up-a-mongodb-server",level:3},{value:"Shell",id:"shell",level:3},{value:"Docker",id:"docker",level:3},{value:"MongoDB Atlas",id:"mongodb-atlas",level:3},{value:"Create a MongoDB Database and Collection",id:"create-a-mongodb-database-and-collection",level:3},{value:"Create a RxDB Database and Collection",id:"create-a-rxdb-database-and-collection",level:3},{value:"Sync the Collection with the MongoDB Server",id:"sync-the-collection-with-the-mongodb-server",level:3},{value:"Start a RxServer",id:"start-a-rxserver",level:3},{value:"Sync a Client with the RxServer",id:"sync-a-client-with-the-rxserver",level:3},{value:"Follow Up",id:"follow-up",level:2}];function m(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mongodb-replication-plugin-for-rxdb--real-time-offline-first-sync",children:"MongoDB Replication Plugin for RxDB \u2014 Real-Time, Offline-First Sync"})}),"\n",(0,i.jsx)("p",{align:"center",children:(0,i.jsx)("img",{src:"./files/icons/mongodb.svg",alt:"MongoDB Sync",height:"60",class:"img-padding img-in-text-right"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://www.mongodb.com/",children:"MongoDB"})," Replication Plugin for RxDB delivers seamless, two-way synchronization between MongoDB and RxDB, enabling ",(0,i.jsx)(n.a,{href:"/articles/realtime-database.html",children:"real-time"})," updates and ",(0,i.jsx)(n.a,{href:"/offline-first.html",children:"offline-first"})," functionality for your applications. Built on ",(0,i.jsx)(n.strong,{children:"MongoDB Change Streams"}),", it supports both Atlas and self-hosted deployments, ensuring your data stays consistent across every device and service."]}),"\n",(0,i.jsxs)(n.p,{children:["Behind the scenes, the plugin is powered by the RxDB ",(0,i.jsx)(n.a,{href:"/replication.html",children:"Sync Engine"}),", which manages the complexities of real-world data replication for you. It automatically handles ",(0,i.jsx)(n.a,{href:"/transactions-conflicts-revisions.html",children:"conflict detection and resolution"}),", maintains precise checkpoints for incremental updates, and gracefully manages transitions between offline and online states. This means you don't need to manually implement retry logic, reconcile divergent changes, or worry about data loss during connectivity drops, the Sync Engine ensures consistency and reliability in every sync cycle."]}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Two-way replication"})," between MongoDB and RxDB collections"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Offline-first support"})," with automatic incremental re-sync"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incremental updates"})," via MongoDB Change Streams"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conflict resolution"})," handled by the RxDB Sync Engine"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Atlas and self-hosted support"})," for replica sets and sharded clusters"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The plugin operates in a three-tier architecture: Clients connect to ",(0,i.jsx)(n.a,{href:"/rx-server.html",children:"RxServer"}),", which in turn connects to MongoDB. RxServer streams changes from MongoDB to connected clients and pushes client-side updates back to MongoDB."]}),"\n",(0,i.jsxs)(n.p,{children:["For the client side, RxServer exposes a ",(0,i.jsx)(n.a,{href:"/rx-server.html#replication-endpoint",children:"replication endpoint"})," over WebSocket or HTTP, which your RxDB-powered applications can consume."]}),"\n",(0,i.jsx)(n.p,{children:"The following diagram illustrates the flow of updates between clients, RxServer, and MongoDB in a live synchronization setup:"}),"\n",(0,i.jsx)(d.u,{dbIcon:"/files/icons/mongodb-icon.svg",dbLabel:"MongoDB"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The MongoDB Replication Plugin is optimized for Node.js environments (e.g., when RxDB runs within RxServer or other backend services). Direct connections from browsers or mobile apps to MongoDB are not supported because MongoDB does not use HTTP as its wire protocol and requires a driver-level connection to a replica set or sharded cluster."})}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-the-client-rxserver-mongodb-sync",children:"Setting up the Client-RxServer-MongoDB Sync"}),"\n",(0,i.jsxs)(s.g,{children:[(0,i.jsx)(n.h3,{id:"install-the-client-dependencies",children:"Install the Client Dependencies"}),(0,i.jsx)(n.p,{children:"In your JavaScript project, install the RxDB libraries and the MongoDB node.js driver:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"npm install rxdb rxdb-server mongodb --save"})}),(0,i.jsx)(n.h3,{id:"set-up-a-mongodb-server",children:"Set up a MongoDB Server"}),(0,i.jsxs)(n.p,{children:["As first step, you need access to a running MongoDB Server. This can be done by either running a server locally or using the Atlas Cloud. Notice that we need to have a ",(0,i.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/tutorial/deploy-replica-set/",children:"replica set"})," because only on these, the MongoDB changestream can be used."]}),(0,i.jsxs)(a.t,{children:[(0,i.jsx)(n.h3,{id:"shell",children:"Shell"}),(0,i.jsx)(n.p,{children:"If you have installed MongoDB locally, you can start the server with this command:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"mongod --replSet rs0 --bind_ip_all"})}),(0,i.jsx)(n.h3,{id:"docker",children:"Docker"}),(0,i.jsx)(n.p,{children:"If you have docker installed, you can start a container that runs the MongoDB server:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"docker run -p 27017:27017 -p 27018:27018 -p 27019:27019 --rm --name rxdb-mongodb mongo:8.0.4 mongod --replSet rs0 --bind_ip_all"})}),(0,i.jsx)(n.h3,{id:"mongodb-atlas",children:"MongoDB Atlas"}),(0,i.jsx)(n.p,{children:"Learn here how to create a MongoDB atlas account and how to start a MongoDB cluster that runs in the cloud:"}),(0,i.jsx)("br",{}),(0,i.jsx)("center",{children:(0,i.jsx)(l.N,{videoId:"bBA9rUdqmgY",title:"Create MongoDB Atlas Server",duration:"19:55"})})]}),(0,i.jsx)("br",{}),(0,i.jsxs)(n.p,{children:["After this step you should have a valid connection string that points to a running MongoDB Server like ",(0,i.jsx)(n.code,{children:"mongodb://localhost:27017/"}),"."]}),(0,i.jsx)(n.h3,{id:"create-a-mongodb-database-and-collection",children:"Create a MongoDB Database and Collection"}),(0,i.jsx)(n.p,{children:"On your MongoDB server, make sure to create a database and a collection."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"//> server.ts\n\nimport { MongoClient } from 'mongodb';\nconst mongoClient = new MongoClient('mongodb://localhost:27017/?directConnection=true');\nconst mongoDatabase = mongoClient.db('my-database');\nawait mongoDatabase.createCollection('my-collection', {\n  changeStreamPreAndPostImages: { enabled: true }\n});\n"})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["To observe document deletions on the changestream, ",(0,i.jsx)(n.code,{children:"changeStreamPreAndPostImages"})," must be enabled. This is not required if you have an insert/update-only collection where no documents are deleted ever."]})}),(0,i.jsx)(n.h3,{id:"create-a-rxdb-database-and-collection",children:"Create a RxDB Database and Collection"}),(0,i.jsxs)(n.p,{children:["Now we create an RxDB ",(0,i.jsx)(n.a,{href:"/rx-database.html",children:"database"})," and a ",(0,i.jsx)(n.a,{href:"/rx-collection.html",children:"collection"}),". In this example the ",(0,i.jsx)(n.a,{href:"/rx-storage-memory.html",children:"memory storage"}),", in production you would use a ",(0,i.jsx)(n.a,{href:"/rx-storage.html",children:"persistent storage"})," instead."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"//> server.ts\n\nimport { createRxDatabase, addRxPlugin } from 'rxdb';\nimport { getRxStorageMemory } from 'rxdb/plugins/storage-memory';\n\n// Create server-side RxDB instance\nconst db = await createRxDatabase({\n  name: 'serverdb',\n  storage: getRxStorageMemory()\n});\n\n// Add your collection schema\nawait db.addCollections({\n  humans: {\n    schema: {\n      version: 0,\n      primaryKey: 'passportId',\n      type: 'object',\n      properties: {\n        passportId: { type: 'string', maxLength: 100 },\n        firstName: { type: 'string' },\n        lastName: { type: 'string' }\n      },\n      required: ['passportId', 'firstName', 'lastName']\n    }\n  }\n});\n"})}),(0,i.jsx)(n.h3,{id:"sync-the-collection-with-the-mongodb-server",children:"Sync the Collection with the MongoDB Server"}),(0,i.jsxs)(n.p,{children:["Now we can start a ",(0,i.jsx)(n.a,{href:"/replication.html",children:"replication"})," that does a two-way replication between the RxDB Collection and the MongoDB Collection."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"//> server.ts\n\nimport { replicateMongoDB } from 'rxdb/plugins/replication-mongodb';\n\nconst replicationState = replicateMongoDB({\n  mongodb: {\n    collectionName: 'my-collection',\n    connection: 'mongodb://localhost:27017',\n    databaseName: 'my-database'\n  },\n  collection: db.humans,\n  replicationIdentifier: 'humans-mongodb-sync',\n  pull: { batchSize: 50 },\n  push: { batchSize: 50 },\n  live: true\n});\n\n"})}),(0,i.jsx)(n.admonition,{title:"You can do many things with the replication state",type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"RxMongoDBReplicationState"})," which is returned from ",(0,i.jsx)(n.code,{children:"replicateMongoDB()"})," allows you to run all functionality of the normal ",(0,i.jsx)(n.a,{href:"/replication.html",children:"RxReplicationState"})," like observing errors or doing start/stop operations."]})}),(0,i.jsx)(n.h3,{id:"start-a-rxserver",children:"Start a RxServer"}),(0,i.jsxs)(n.p,{children:["Now that we have a RxDatabase and Collection that is replicated with MongoDB, we can spawn a ",(0,i.jsx)(n.a,{href:"/rx-server.html",children:"RxServer"})," on top of it. This server can then be used by client devices to connect."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"//> server.ts\n\nimport { createRxServer } from 'rxdb-server/plugins/server';\nimport { RxServerAdapterExpress } from 'rxdb-server/plugins/adapter-express';\n\nconst server = await createRxServer({\n  database: db,\n  adapter: RxServerAdapterExpress,\n  port: 8080,\n  cors: '*'\n});\n\nconst endpoint = server.addReplicationEndpoint({\n    name: 'humans',\n    collection: db.humans\n});\nconsole.log('Replication endpoint:', `http://localhost:8080/${endpoint.urlPath}`);\n\n// do not forget to start the server!\nawait server.start();\n"})}),(0,i.jsx)(n.h3,{id:"sync-a-client-with-the-rxserver",children:"Sync a Client with the RxServer"}),(0,i.jsx)(n.p,{children:"On the client-side we create the exact same RxDatabase and collection and then replicate it with the replication endpoint of the RxServer."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"//> client.ts\n\nimport { createRxDatabase } from 'rxdb';\nimport { getRxStorageDexie } from 'rxdb/plugins/storage-dexie';\nimport { replicateServer } from 'rxdb-server/plugins/replication-server';\n\nconst db = await createRxDatabase({\n  name: 'mydb-client',\n  storage: getRxStorageDexie()\n});\n\nawait db.addCollections({\n  humans: {\n    schema: {\n      version: 0,  \n      primaryKey: 'passportId',\n      type: 'object',\n      properties: {\n        passportId: { type: 'string', maxLength: 100 },\n        firstName: { type: 'string' },\n        lastName: { type: 'string' }\n      },\n      required: ['passportId', 'firstName', 'lastName']\n    }\n  }\n});\n\n// Start replication to the RxServer endpoint printed by the server:\n// e.g. http://localhost:8080/humans/0\nconst replicationState = replicateServer({\n  replicationIdentifier: 'humans-rxserver',\n  collection: db.humans,\n  url: 'http://localhost:8080/humans/0',\n  live: true,\n  pull: { batchSize: 50 },\n  push: { batchSize: 50 }\n});\n\n"})})]}),"\n",(0,i.jsx)(n.admonition,{title:"Beta",type:"note",children:(0,i.jsxs)(n.p,{children:["The MongoDB Replication Plugin for RxDB is currently in ",(0,i.jsx)(n.strong,{children:"beta"}),".",(0,i.jsx)(n.br,{}),"\n","While it is production-capable, the API and internal behavior may change before the stable release. We recommend thoroughly testing your integration and reviewing the changelog when upgrading to newer versions."]})}),"\n",(0,i.jsx)(n.h2,{id:"follow-up",children:"Follow Up"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Try it out with the ",(0,i.jsx)(n.a,{href:"https://github.com/pubkey/rxdb-mongodb-sync-example",children:"RxDB-MongoDB example repository"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/replication.html",children:"Replication API Reference"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/rx-server.html",children:"RxServer Documentation"})}),"\n",(0,i.jsxs)(n.li,{children:["Join our ",(0,i.jsx)(n.a,{href:"./chat",children:"Discord Forum"})," for questions and feedback"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},3319:(e,n,t)=>{t.d(n,{N:()=>d});var r=t(6540),i=t(106),o=t(4848);function a({size:e=50,onClick:n}){const t={container:{width:e,height:e,borderRadius:"50%",display:"flex",alignItems:"center",justifyContent:"center",cursor:"pointer",userSelect:"none",border:"2px solid var(--White, #FFF)",background:"linear-gradient(90deg, #ED168F 0%, #B2218B 100%)"},icon:{width:15,display:"block"}};return(0,o.jsx)("div",{style:t.container,onClick:n,children:(0,o.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"15",height:"25",viewBox:"0 0 15 25",fill:"none",style:{marginLeft:3,height:"100%"},children:(0,o.jsx)("path",{d:"M10 10V5H5V0H0V5V20V25H5V20H10V15H15V10H10Z",fill:"white"})})})}var s=t(658);const l={container:{display:"flex",flexDirection:"column",padding:"12px 12px 6px 12px",width:"275px",cursor:"pointer",boxSizing:"content-box"},thumbnailWrapper:{position:"relative",width:"100%",height:"155px",overflow:"hidden",backgroundColor:"#000"},thumbnail:{width:"100%",height:"100%",objectFit:"cover",objectPosition:"center",display:"block",userDrag:"none",userSelect:"none",WebkitUserDrag:"none"},playButton:{position:"absolute",top:"50%",left:"50%",width:"50px",height:"50px",borderRadius:"50%",backgroundColor:"#ED168F",display:"flex",alignItems:"center",justifyContent:"center",transform:"translate(-50%, -50%)"},duration:{position:"absolute",bottom:"0px",right:0,fontSize:"0.875rem",fontWeight:"bold",paddingLeft:8,paddingRight:2},title:{marginTop:5,fontSize:16,fontWeight:700,whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis"}};function d({videoId:e,title:n,duration:t,startAt:d,dark:c}){const[h,p]=(0,r.useState)(!1),[g,m]=(0,r.useState)(!1);return(0,o.jsxs)("div",{style:{...l.container,backgroundColor:c?"var(--bg-color)":"var(--bg-color-dark)"},onMouseEnter:()=>p(!0),onMouseLeave:()=>p(!1),onClick:()=>{m(!0),(0,i.c)("open_video",.1),(0,i.c)("open_video_"+e,.05,1)},children:[(0,o.jsxs)("div",{style:{textDecoration:"none",color:"inherit"},children:[(0,o.jsxs)("div",{style:{...l.thumbnailWrapper},children:[(0,o.jsx)("img",{src:`https://i3.ytimg.com/vi/${e}/mqdefault.jpg`,alt:n,style:l.thumbnail,loading:"lazy",decoding:"async",referrerPolicy:"no-referrer",crossOrigin:"anonymous",fetchpriority:"low"}),(0,o.jsx)("div",{style:{...l.playButton,transform:`translate(-50%, -50%) scale(${h?1.2:1})`,transition:"transform 0.1s ease-in-out"},children:(0,o.jsx)(a,{})}),(0,o.jsx)("div",{style:{...l.duration,backgroundColor:c?"var(--bg-color)":"var(--bg-color-dark)"},children:t})]}),(0,o.jsx)("div",{style:l.title,children:n})]}),g?(0,o.jsx)(s.a,{open:g,onCancel:e=>{e.stopPropagation(),m(!1)},onClose:e=>{e.stopPropagation(),m(!1)},onOk:e=>{e.stopPropagation(),m(!1)},footer:null,width:"auto",style:{maxWidth:800},title:n,children:(0,o.jsx)("center",{children:(0,o.jsx)("iframe",{style:{borderRadius:"0px",width:"90vw",maxWidth:"100%"},height:"515",src:"https://www.youtube.com/embed/"+e+"?autoplay=1&start="+(d||0),title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerPolicy:"strict-origin-when-cross-origin",allowFullScreen:!0})})}):null]})}},3894:(e,n,t)=>{t.d(n,{t:()=>a});var r=t(6540),i=t(9293),o=t(4848);function a(e){const n=[];let t=null;r.Children.toArray(e.children).forEach(e=>{const r=e,i=r?.props?.id;i?(t&&n.push(t),t={label:r.props.children,key:r.props.id,content:[]}):t&&t.content.push(e)}),t&&n.push(t);const a=n.map(e=>({key:e.key,label:e.label,children:(0,o.jsx)("div",{style:{color:"white"},children:e.content})}));return(0,o.jsx)(i.A,{type:"line",items:a,color:"red"})}},7580:(e,n,t)=>{t.d(n,{g:()=>i});var r=t(4848);function i(e){const n=[];let t=null;return e.children.forEach(e=>{e.props.id?(t&&n.push(t),t={headline:e,paragraphs:[]}):t&&t.paragraphs.push(e)}),t&&n.push(t),(0,r.jsx)("div",{style:o.stepsContainer,children:n.map((e,n)=>(0,r.jsxs)("div",{style:o.stepWrapper,children:[(0,r.jsxs)("div",{style:o.stepIndicator,children:[(0,r.jsx)("div",{style:o.stepNumber,children:n+1}),(0,r.jsx)("div",{style:o.verticalLine})]}),(0,r.jsxs)("div",{style:o.stepContent,children:[(0,r.jsx)("div",{children:e.headline}),e.paragraphs.map((e,n)=>(0,r.jsx)("div",{style:o.item,children:e},n))]})]},n))})}const o={stepsContainer:{display:"flex",flexDirection:"column"},stepWrapper:{display:"flex",alignItems:"stretch",marginBottom:"1rem",position:"relative",minWidth:0},stepIndicator:{position:"relative",display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",width:"33px",marginRight:"1rem",minWidth:0},stepNumber:{width:"33px",height:"33px",borderRadius:"50%",backgroundColor:"var(--color-middle)",border:"3px solid #391a3b",color:"#fff",display:"flex",alignItems:"center",justifyContent:"center",fontWeight:"bold"},verticalLine:{position:"absolute",top:"33px",bottom:"0",left:"50%",width:"1px",background:"linear-gradient(to bottom, var(--color-middle) 0%, var(--color-middle) 80%, rgba(0,0,0,0) 100%)",transform:"translateX(-50%)"},stepContent:{flex:1,minWidth:0,overflowWrap:"break-word"},item:{marginTop:"0.5rem"}}},7891:(e,n,t)=>{t.d(n,{u:()=>i});t(6540);var r=t(4848);function i({className:e="",style:n,clientLabels:t=["Client A","Client B","Client C"],serverLabel:i="RxServer",dbLabel:o="Backend",dbIcon:a="",showServer:s=!0}){const l="/files/logo/logo.svg",d=s?{}:{gridColumn:"2 / 5",width:"90%",marginLeft:"5%",marginRight:0};return(0,r.jsxs)("div",{className:`rxdb-diagram ${e}`,style:n,children:[(0,r.jsx)("style",{children:'\n    .rxdb-diagram {\n      color: inherit;\n      width: 100%;\n      max-width: 100%;\n      overflow: hidden;\n      margin: 0 auto;\n      font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI",\n                   Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";\n    }\n\n    /* Stage keeps fixed aspect ratio and scales */\n    .rxdb-diagram .stage {\n      width: 100%;\n      aspect-ratio: 816 / 336;\n      position: relative;\n    }\n\n    /* Grid fills the stage completely */\n    .rxdb-diagram .grid {\n      position: absolute;\n      inset: 0;\n      display: grid;\n      grid-template-columns:\n        26.960784% 5.882353% 31.862745% 5.882353% 29.411765%;\n      grid-template-rows:\n        23.809524% 14.285714% 23.809524% 14.285714% 23.809524%;\n      align-items: center;\n      justify-items: stretch;\n    }\n\n    .rxdb-diagram {\n      --stroke: clamp(1px, 0.35vmin, 2px);\n      --radius: clamp(8px, 1.2vmin, 14px);\n      --pad: clamp(8px, 1.2vmin, 18px);\n      --line: currentColor;\n    }\n\n    .rxdb-diagram .logo {\n      height: 1.2em;\n      width: auto;\n      display: inline-block;\n      object-fit: contain;\n      margin-right: 10px;\n    }\n\n    .rxdb-diagram .box {\n      border: var(--stroke) dashed var(--line);\n      border-radius: var(--radius);\n      background: transparent;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      font-weight: 600;\n      padding: var(--pad);\n      line-height: 1.2;\n      user-select: none;\n    }\n\n    /* Server and DB take full height of stage */\n    .rxdb-diagram .server,\n    .rxdb-diagram .db {\n      grid-row: 1 / -1;\n      height: 100%;\n    }\n\n    /* Horizontal arrows */\n    .rxdb-diagram .arrow {\n      position: relative;\n      height: 0;\n      border-top: var(--stroke) solid var(--line);\n      width: calc(100% - 20%);\n      margin-left: 10%;\n      margin-right: -1.5%;\n    }\n\n    .rxdb-diagram .arrow::before,\n    .rxdb-diagram .arrow::after {\n      content: "";\n      position: absolute;\n      top: 50%;\n      width: clamp(6px, 1.2vmin, 10px);\n      height: clamp(6px, 1.2vmin, 10px);\n      border-top: var(--stroke) solid var(--line);\n      border-right: var(--stroke) solid var(--line);\n      transform-origin: center;\n    }\n    .rxdb-diagram .arrow::before {\n      left: 0;\n      transform: translate(-0%, -60%) rotate(-135deg);\n    }\n    .rxdb-diagram .arrow::after {\n      right: 0;\n      transform: translate(0%, -60%) rotate(45deg);\n    }\n  '}),(0,r.jsx)("div",{className:"stage","aria-label":s?"Clients to RxServer to MongoDB diagram":"Clients to MongoDB diagram",children:(0,r.jsxs)("div",{className:"grid",children:[(0,r.jsxs)("div",{className:"box",style:{gridColumn:1,gridRow:1},children:[(0,r.jsx)("img",{src:l,alt:"",className:"logo","aria-hidden":!0}),t[0]||"Client A"]}),(0,r.jsx)("div",{className:"arrow",style:{gridColumn:s?2:d.gridColumn,gridRow:1,...s?{}:{width:"90%",marginLeft:"5%",marginRight:0}},"aria-hidden":!0}),s&&(0,r.jsxs)("div",{className:"box server",style:{gridColumn:3},children:[(0,r.jsx)("img",{src:l,alt:"",className:"logo","aria-hidden":!0}),i]}),s&&(0,r.jsx)("div",{className:"arrow",style:{gridColumn:4,gridRow:3},"aria-hidden":!0}),(0,r.jsxs)("div",{className:"box db",style:{gridColumn:5},children:[(0,r.jsx)("img",{src:a,alt:"",className:"logo","aria-hidden":!0}),o]}),(0,r.jsxs)("div",{className:"box",style:{gridColumn:1,gridRow:3},children:[(0,r.jsx)("img",{src:l,alt:"",className:"logo","aria-hidden":!0}),t[1]||"Client B"]}),(0,r.jsx)("div",{className:"arrow",style:{gridColumn:s?2:d.gridColumn,gridRow:3,...s?{}:{width:"90%",marginLeft:"5%",marginRight:0}},"aria-hidden":!0}),(0,r.jsxs)("div",{className:"box",style:{gridColumn:1,gridRow:5},children:[(0,r.jsx)("img",{src:l,alt:"",className:"logo","aria-hidden":!0}),t[2]||"Client C"]}),(0,r.jsx)("div",{className:"arrow",style:{gridColumn:s?2:d.gridColumn,gridRow:5,...s?{}:{width:"90%",marginLeft:"5%",marginRight:0}},"aria-hidden":!0})]})})]})}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);