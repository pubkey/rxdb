"use strict";(globalThis.webpackChunkrxdb=globalThis.webpackChunkrxdb||[]).push([[4475],{6621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"encryption","title":"Encryption","description":"Explore RxDB\'s \ud83d\udd12 encryption plugin for enhanced data security in web and native apps, featuring password-based encryption and secure storage.","source":"@site/docs/encryption.md","sourceDirName":".","slug":"/encryption.html","permalink":"/encryption.html","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Encryption","slug":"encryption.html","description":"Explore RxDB\'s \ud83d\udd12 encryption plugin for enhanced data security in web and native apps, featuring password-based encryption and secure storage."},"sidebar":"tutorialSidebar","previous":{"title":"Schema Validation","permalink":"/schema-validation.html"},"next":{"title":"Key Compression","permalink":"/key-compression.html"}}');var a=n(4848),s=n(8453),i=n(7580);const o={title:"Encryption",slug:"encryption.html",description:"Explore RxDB's \ud83d\udd12 encryption plugin for enhanced data security in web and native apps, featuring password-based encryption and secure storage."},d="\ud83d\udd12 Encrypted Local Storage with RxDB",c={},l=[{value:"Querying encrypted data",id:"querying-encrypted-data",level:2},{value:"Password handling",id:"password-handling",level:2},{value:"Asymmetric encryption",id:"asymmetric-encryption",level:2},{value:"Using the RxDB Encryption Plugins",id:"using-the-rxdb-encryption-plugins",level:2},{value:"Wrap your RxStorage with the encryption",id:"wrap-your-rxstorage-with-the-encryption",level:3},{value:"Create a RxDatabase with the wrapped storage",id:"create-a-rxdatabase-with-the-wrapped-storage",level:3},{value:"Create an RxCollection with an encrypted property",id:"create-an-rxcollection-with-an-encrypted-property",level:3},{value:"Using Web-Crypto API",id:"using-web-crypto-api",level:2},{value:"Changing the password",id:"changing-the-password",level:2},{value:"Encrypted attachments",id:"encrypted-attachments",level:2},{value:"Encryption and workers",id:"encryption-and-workers",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"-encrypted-local-storage-with-rxdb",children:"\ud83d\udd12 Encrypted Local Storage with RxDB"})}),"\n",(0,a.jsxs)(t.p,{children:["The RxDB encryption plugin empowers developers to fortify their applications' data security. It seamlessly integrates with ",(0,a.jsx)(t.a,{href:"https://rxdb.info/",children:"RxDB"}),", allowing for the secure storage and retrieval of documents by ",(0,a.jsx)(t.strong,{children:"encrypting them with a password"}),". With encryption and decryption processes handled internally, it ensures that sensitive data remains confidential, making it a valuable tool for building robust, privacy-conscious applications. The encryption works on all RxDB supported devices types like the ",(0,a.jsx)(t.strong,{children:"browser"}),", ",(0,a.jsx)(t.strong,{children:"ReactNative"})," or ",(0,a.jsx)(t.strong,{children:"Node.js"}),"."]}),"\n",(0,a.jsx)("p",{align:"center",children:(0,a.jsx)("img",{src:"./files/icons/with-gradient/storage-layer.svg",alt:"Encryption Storage Layer",height:"60"})}),"\n",(0,a.jsx)(t.p,{children:"Encrypting client-side stored data in RxDB offers numerous advantages:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Enhanced Security"}),": In the unfortunate event of a user's device being stolen, the encrypted data remains safeguarded on the hard drive, inaccessible without the correct password."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Access Control"}),": You can retain control over stored data by revoking access at any time simply by withholding the password."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Tamper proof"})," Other applications on the device cannot read out the stored data when the password is only kept in the process-specific memory"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"querying-encrypted-data",children:"Querying encrypted data"}),"\n",(0,a.jsxs)(t.p,{children:["RxDB handles the encryption and decryption of data internally. This means that when you work with a RxDocument, you can access the properties of the document just like you would with normal, unencrypted data. RxDB automatically decrypts the data for you when you retrieve it, making it transparent to your application code.\nThis means the encryption works with all ",(0,a.jsx)(t.a,{href:"/rx-storage.html",children:"RxStorage"})," like ",(0,a.jsx)(t.strong,{children:"SQLite"}),", ",(0,a.jsx)(t.strong,{children:"IndexedDB"}),", ",(0,a.jsx)(t.strong,{children:"OPFS"})," and so on."]}),"\n",(0,a.jsxs)(t.p,{children:["However, there's a limitation when it comes to querying encrypted fields. ",(0,a.jsx)(t.strong,{children:"Encrypted fields cannot be used as operators in queries"}),'. This means you cannot perform queries like "find all documents where the encrypted field equals a certain value." RxDB does not expose the encrypted data in a way that allows direct querying based on the encrypted content. To filter or search for documents based on the contents of encrypted fields, you would need to first decrypt the data and then perform the query, which might not be efficient or practical in some cases.\nYou could however use the ',(0,a.jsx)(t.a,{href:"/rx-storage-memory-mapped.html",children:"memory mapped"})," RxStorage to replicate the encrypted documents into a non-encrypted in-memory storage and then query them like normal."]}),"\n",(0,a.jsx)(t.h2,{id:"password-handling",children:"Password handling"}),"\n",(0,a.jsx)(t.p,{children:"RxDB does not define how you should store or retrieve the encryption password. It only requires you to provide the password on database creation which grants you flexibility in how you manage encryption passwords.\nYou could ask the user on app-start to insert the password, or you can retrieve the password from your backend on app start (or revoke access by no longer providing the password)."}),"\n",(0,a.jsx)(t.h2,{id:"asymmetric-encryption",children:"Asymmetric encryption"}),"\n",(0,a.jsxs)(t.p,{children:["The encryption plugin itself uses ",(0,a.jsx)(t.strong,{children:"symmetric encryption"})," with a password to guarantee best performance when reading and storing data.\nIt is not able to do ",(0,a.jsx)(t.strong,{children:"Asymmetric encryption"})," by itself. If you need Asymmetric encryption with a private/publicKey, it is recommended to encrypted the password itself with the asymmetric keys and store the encrypted password beside the other data. On app-start you can decrypt the password with the private key and use the decrypted password in the RxDB encryption plugin"]}),"\n",(0,a.jsx)(t.h2,{id:"using-the-rxdb-encryption-plugins",children:"Using the RxDB Encryption Plugins"}),"\n",(0,a.jsx)(t.p,{children:"RxDB currently has two plugins for encryption:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["The free ",(0,a.jsx)(t.code,{children:"encryption-crypto-js"})," plugin that is based on the ",(0,a.jsx)(t.code,{children:"AES"})," algorithm of the ",(0,a.jsx)(t.a,{href:"https://www.npmjs.com/package/crypto-js",children:"crypto-js"})," library"]}),"\n",(0,a.jsxs)(t.li,{children:["The ",(0,a.jsx)(t.a,{href:"/premium/",children:"\ud83d\udc51 premium"})," ",(0,a.jsx)(t.code,{children:"encryption-web-crypto"})," plugin that is based on the native ",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API",children:"Web Crypto API"})," which makes it faster and more secure to use. Document inserts are about 10x faster compared to ",(0,a.jsx)(t.code,{children:"crypto-js"})," and it has a smaller build size because it uses the browsers API instead of bundling an npm module."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["An RxDB encryption plugin is a wrapper around any other ",(0,a.jsx)(t.a,{href:"/rx-storage.html",children:"RxStorage"}),"."]}),"\n",(0,a.jsxs)(i.g,{children:[(0,a.jsx)(t.h3,{id:"wrap-your-rxstorage-with-the-encryption",children:"Wrap your RxStorage with the encryption"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import {\n    wrappedKeyEncryptionCryptoJsStorage\n} from 'rxdb/plugins/encryption-crypto-js';\nimport { getRxStorageLocalstorage } from 'rxdb/plugins/storage-localstorage';\n\n// wrap the normal storage with the encryption plugin\nconst encryptedStorage = wrappedKeyEncryptionCryptoJsStorage({\n    storage: getRxStorageLocalstorage()\n});\n"})}),(0,a.jsx)(t.h3,{id:"create-a-rxdatabase-with-the-wrapped-storage",children:"Create a RxDatabase with the wrapped storage"}),(0,a.jsxs)(t.p,{children:["Also you have to set a ",(0,a.jsx)(t.strong,{children:"password"})," when creating the database. The format of the password depends on which encryption plugin is used."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { createRxDatabase } from 'rxdb/plugins/core';\n// create an encrypted database\nconst db = await createRxDatabase({\n    name: 'mydatabase',\n    storage: encryptedStorage,\n    password: 'sudoLetMeIn'\n});\n"})}),(0,a.jsx)(t.h3,{id:"create-an-rxcollection-with-an-encrypted-property",children:"Create an RxCollection with an encrypted property"}),(0,a.jsxs)(t.p,{children:["To define a field as being encrypted, you have to add it to the ",(0,a.jsx)(t.code,{children:"encrypted"})," fields list in the schema."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const schema = {\n    version: 0,\n  primaryKey: 'id',\n  type: 'object',\n  properties: {\n      id: {\n          type: 'string',\n          maxLength: 100\n      },\n      secret: {\n          type: 'string'\n      },\n  },\n  required: ['id']\n  encrypted: ['secret']\n};\n\nawait db.addCollections({\n    myDocuments: {\n        schema\n    }\n})\n"})})]}),"\n",(0,a.jsx)(t.h2,{id:"using-web-crypto-api",children:"Using Web-Crypto API"}),"\n",(0,a.jsxs)(t.p,{children:["For professionals, we have the ",(0,a.jsx)(t.code,{children:"web-crypto"})," ",(0,a.jsx)(t.a,{href:"/premium/",children:"\ud83d\udc51 premium"})," plugin which is faster and more secure:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import {\n    wrappedKeyEncryptionWebCryptoStorage,\n    createPassword\n} from 'rxdb-premium/plugins/encryption-web-crypto';\nimport { getRxStorageIndexedDB } from 'rxdb-premium/plugins/storage-indexeddb';\n\n// wrap the normal storage with the encryption plugin\nconst encryptedIndexedDbStorage = wrappedKeyEncryptionWebCryptoStorage({\n    storage: getRxStorageIndexedDB()\n});\n\nconst myPasswordObject = {\n    // Algorithm can be oneOf: 'AES-CTR' | 'AES-CBC' | 'AES-GCM'\n    algorithm: 'AES-CTR',\n    password: 'myRandomPasswordWithMin8Length'\n};\n\n// create an encrypted database\nconst db = await createRxDatabase({\n    name: 'mydatabase',\n    storage: encryptedIndexedDbStorage,\n    password: myPasswordObject\n});\n\n/* ... */\n"})}),"\n",(0,a.jsx)(t.h2,{id:"changing-the-password",children:"Changing the password"}),"\n",(0,a.jsx)(t.p,{children:"The password is set database specific and it is not possible to change the password of a database. Opening an existing database with a different password will throw an error. To change the password you can either:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Use the ",(0,a.jsx)(t.a,{href:"/migration-storage.html",children:"storage migration plugin"})," to migrate the database state into a new database."]}),"\n",(0,a.jsxs)(t.li,{children:["Store a randomly created meta-password in a different RxDatabase as a value of a ",(0,a.jsx)(t.a,{href:"/rx-local-document.html",children:"local document"}),". Encrypt the meta password with the actual user password and read it out before creating the actual database."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"encrypted-attachments",children:"Encrypted attachments"}),"\n",(0,a.jsxs)(t.p,{children:["To store the ",(0,a.jsx)(t.a,{href:"/rx-attachment.html",children:"attachments"})," data encrypted, you have to set ",(0,a.jsx)(t.code,{children:"encrypted: true"})," in the ",(0,a.jsx)(t.code,{children:"attachments"})," property of the schema."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const mySchema = {\n    version: 0,\n    type: 'object',\n    properties: {\n        /* ... */\n    },\n    attachments: {\n        encrypted: true // if true, the attachment-data will be encrypted with the db-password\n    }\n};\n"})}),"\n",(0,a.jsx)(t.h2,{id:"encryption-and-workers",children:"Encryption and workers"}),"\n",(0,a.jsxs)(t.p,{children:["If you are using ",(0,a.jsx)(t.a,{href:"/rx-storage-worker.html",children:"Worker RxStorage"})," or ",(0,a.jsx)(t.a,{href:"/rx-storage-shared-worker.html",children:"SharedWorker RxStorage"})," with encryption, it's recommended to run encryption inside of the worker. Encryption can be very cpu intensive and would take away CPU-power from the main thread which is the main reason to use workers."]}),"\n",(0,a.jsx)(t.p,{children:"You do not need to worry about setting the password inside of the worker. The password will be set when calling createRxDatabase from the main thread, and will be passed internally to the storage in the worker automatically."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},7580:(e,t,n)=>{n.d(t,{g:()=>a});var r=n(4848);function a(e){const t=[];let n=null;return e.children.forEach(e=>{e.props.id?(n&&t.push(n),n={headline:e,paragraphs:[]}):n&&n.paragraphs.push(e)}),n&&t.push(n),(0,r.jsx)("div",{style:s.stepsContainer,children:t.map((e,t)=>(0,r.jsxs)("div",{style:s.stepWrapper,children:[(0,r.jsxs)("div",{style:s.stepIndicator,children:[(0,r.jsx)("div",{style:s.stepNumber,children:t+1}),(0,r.jsx)("div",{style:s.verticalLine})]}),(0,r.jsxs)("div",{style:s.stepContent,children:[(0,r.jsx)("div",{children:e.headline}),e.paragraphs.map((e,t)=>(0,r.jsx)("div",{style:s.item,children:e},t))]})]},t))})}const s={stepsContainer:{display:"flex",flexDirection:"column"},stepWrapper:{display:"flex",alignItems:"stretch",marginBottom:"1rem",position:"relative",minWidth:0},stepIndicator:{position:"relative",display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",width:"33px",marginRight:"1rem",minWidth:0},stepNumber:{width:"33px",height:"33px",borderRadius:"50%",backgroundColor:"var(--color-middle)",border:"3px solid #391a3b",color:"#fff",display:"flex",alignItems:"center",justifyContent:"center",fontWeight:"bold"},verticalLine:{position:"absolute",top:"33px",bottom:"0",left:"50%",width:"1px",background:"linear-gradient(to bottom, var(--color-middle) 0%, var(--color-middle) 80%, rgba(0,0,0,0) 100%)",transform:"translateX(-50%)"},stepContent:{flex:1,minWidth:0,overflowWrap:"break-word"},item:{marginTop:"0.5rem"}}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(6540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);