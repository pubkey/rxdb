"use strict";(globalThis.webpackChunkrxdb=globalThis.webpackChunkrxdb||[]).push([[5320],{2574:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"replication","title":"\u2699\ufe0f RxDB realtime Sync Engine for Local-First Apps","description":"Replicate data in real-time with RxDB\'s offline-first Sync Engine. Learn about efficient syncing, conflict resolution, and advanced multi-tab support.","source":"@site/docs/replication.md","sourceDirName":".","slug":"/replication.html","permalink":"/replication.html","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"\u2699\ufe0f RxDB realtime Sync Engine for Local-First Apps","slug":"replication.html","description":"Replicate data in real-time with RxDB\'s offline-first Sync Engine. Learn about efficient syncing, conflict resolution, and advanced multi-tab support."},"sidebar":"tutorialSidebar","previous":{"title":"Electron","permalink":"/electron.html"},"next":{"title":"HTTP Replication","permalink":"/replication-http.html"}}');var a=t(4848),s=t(8453);const l={title:"\u2699\ufe0f RxDB realtime Sync Engine for Local-First Apps",slug:"replication.html",description:"Replicate data in real-time with RxDB's offline-first Sync Engine. Learn about efficient syncing, conflict resolution, and advanced multi-tab support."},o="RxDB's realtime Sync Engine for Local-First Apps",r={},c=[{value:"Design Decisions of the Sync Engine",id:"design-decisions-of-the-sync-engine",level:2},{value:"The Sync Engine on the document level",id:"the-sync-engine-on-the-document-level",level:2},{value:"The Sync Engine on the transfer level",id:"the-sync-engine-on-the-transfer-level",level:2},{value:"Checkpoint iteration",id:"checkpoint-iteration",level:3},{value:"Event observation",id:"event-observation",level:3},{value:"Data layout on the server",id:"data-layout-on-the-server",level:2},{value:"Conflict handling",id:"conflict-handling",level:2},{value:"replicateRxCollection()",id:"replicaterxcollection",level:2},{value:"Multi Tab support",id:"multi-tab-support",level:2},{value:"Error handling",id:"error-handling",level:2},{value:"Security",id:"security",level:2},{value:"RxReplicationState",id:"rxreplicationstate",level:2},{value:"Observable",id:"observable",level:3},{value:"awaitInitialReplication()",id:"awaitinitialreplication",level:3},{value:"awaitInSync()",id:"awaitinsync",level:3},{value:"<code>awaitInitialReplication()</code> and <code>awaitInSync()</code> should not be used to block the application",id:"awaitinitialreplication-and-awaitinsync-should-not-be-used-to-block-the-application",level:4},{value:"reSync()",id:"resync",level:3},{value:"cancel()",id:"cancel",level:3},{value:"pause()",id:"pause",level:3},{value:"remove()",id:"remove",level:3},{value:"isStopped()",id:"isstopped",level:3},{value:"isPaused()",id:"ispaused",level:3},{value:"Setting a custom initialCheckpoint",id:"setting-a-custom-initialcheckpoint",level:3},{value:"toggleOnDocumentVisible",id:"toggleondocumentvisible",level:3},{value:"Attachment replication (beta)",id:"attachment-replication-beta",level:2},{value:"Partial Sync with RxDB",id:"partial-sync-with-rxdb",level:2},{value:"Idea: One Collection, Multiple Replications",id:"idea-one-collection-multiple-replications",level:3},{value:"Diffy-Sync when Revisiting a Chunk",id:"diffy-sync-when-revisiting-a-chunk",level:3},{value:"Partial Sync in a Local-First Business Application",id:"partial-sync-in-a-local-first-business-application",level:3},{value:"FAQ",id:"faq",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"rxdbs-realtime-sync-engine-for-local-first-apps",children:"RxDB's realtime Sync Engine for Local-First Apps"})}),"\n",(0,a.jsxs)(n.p,{children:["The RxDB Sync Engine provides the ability to sync the database state in ",(0,a.jsx)(n.strong,{children:"realtime"})," between the clients and the server."]}),"\n",(0,a.jsxs)(n.p,{children:["The backend server does not have to be a RxDB instance; you can build a replication with ",(0,a.jsx)(n.strong,{children:"any infrastructure"}),".\nFor example you can replicate with a ",(0,a.jsx)(n.a,{href:"/replication-graphql.html",children:"custom GraphQL endpoint"})," or a ",(0,a.jsx)(n.a,{href:"/replication-http.html",children:"HTTP server"})," on top of a PostgreSQL or MongoDB database."]}),"\n",(0,a.jsxs)(n.p,{children:["The replication is made to support the ",(0,a.jsx)(n.a,{href:"/articles/local-first-future.html",children:"Local-First"})," paradigm, so that when the client goes ",(0,a.jsx)(n.a,{href:"/offline-first.html",children:"offline"}),", the RxDB ",(0,a.jsx)(n.a,{href:"/rx-database.html",children:"database"})," can still read and write ",(0,a.jsx)(n.a,{href:"/articles/local-database.html",children:"locally"})," and will continue the replication when the client goes online again."]}),"\n",(0,a.jsx)(n.h2,{id:"design-decisions-of-the-sync-engine",children:"Design Decisions of the Sync Engine"}),"\n",(0,a.jsx)(n.p,{children:"In contrast to other (server-side) database replication protocols, the RxDB Sync Engine was designed with these goals in mind:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Easy to Understand"}),': The sync engine works in a simple "git-like" way that is easy to understand for an average developer. You only have to understand how three simple endpoints work.']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Complex Parts are in RxDB, not in the Backend"}),": The complex parts of the Sync Engine, like ",(0,a.jsx)(n.a,{href:"/transactions-conflicts-revisions.html",children:"conflict handling"})," or offline-online switches, are implemented inside of RxDB itself. This makes creating a compatible backend very easy."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Compatible with any Backend"}),': Because the complex parts are in RxDB, the backend can be "dump" which makes the protocol compatible to almost every backend. No matter if you use PostgreSQL, MongoDB or anything else.']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance is optimized for Client Devices and Browsers"}),": By grouping updates and fetches into batches, it is faster to transfer and easier to compress. Client devices and browsers can also process this data faster, for example running ",(0,a.jsx)(n.code,{children:"JSON.parse()"})," on a chunk of data is faster than calling it once per row. Same goes for how client side storage like ",(0,a.jsx)(n.a,{href:"/rx-storage-indexeddb.html",children:"IndexedDB"})," or ",(0,a.jsx)(n.a,{href:"/rx-storage-opfs.html",children:"OPFS"})," works where writing data in bulks is faster."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Offline-First Support"}),": By incorporating conflict handling at the client side, the protocol fully supports ",(0,a.jsx)(n.a,{href:"/offline-first.html",children:"offline-first apps"}),". Users can continue making changes while offline, and those updates will sync seamlessly once a connection is reestablished - all without risking data loss or having undefined behavior."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multi-Tab Support"}),": When RxDB is used in a browser and multiple tabs of the same application are opened, only exactly one runs the replication at any given time. This reduces client- and backend resources."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"the-sync-engine-on-the-document-level",children:"The Sync Engine on the document level"}),"\n",(0,a.jsx)(n.p,{children:"On the RxDocument level, the replication works like git, where the fork/client contains all new writes and must be merged with the master/server before it can push its new state to the master/server."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"A---B-----------D   master/server state\n     \\         /\n      B---C---D     fork/client state\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The client pulls the latest state ",(0,a.jsx)(n.code,{children:"B"})," from the master."]}),"\n",(0,a.jsxs)(n.li,{children:["The client does some changes ",(0,a.jsx)(n.code,{children:"C+D"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["The client pushes these changes to the master by sending the latest known master state ",(0,a.jsx)(n.code,{children:"B"})," and the new client state ",(0,a.jsx)(n.code,{children:"D"})," of the document."]}),"\n",(0,a.jsxs)(n.li,{children:["If the master state is equal to the latest master ",(0,a.jsx)(n.code,{children:"B"})," state of the client, the new client state ",(0,a.jsx)(n.code,{children:"D"})," is set as the latest master state."]}),"\n",(0,a.jsx)(n.li,{children:"If the master also had changes and so the latest master change is different then the one that the client assumes, we have a conflict that has to be resolved on the client."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"the-sync-engine-on-the-transfer-level",children:"The Sync Engine on the transfer level"}),"\n",(0,a.jsxs)(n.p,{children:["When document states are transferred, all handlers use batches of documents for better performance.\nThe server ",(0,a.jsx)(n.strong,{children:"must"})," implement the following methods to be compatible with the replication:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pullHandler"})," Get the last checkpoint (or null) as input. Returns all documents that have been written ",(0,a.jsx)(n.strong,{children:"after"})," the given checkpoint. Also returns the checkpoint of the latest written returned document."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pushHandler"})," a method that can be called by the client to send client side writes to the master. It gets an array with the ",(0,a.jsx)(n.code,{children:"assumedMasterState"})," and the ",(0,a.jsx)(n.code,{children:"newForkState"})," of each document write as input. It must return an array that contains the master document states of all conflicts. If there are no conflicts, it must return an empty array."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"pullStream"})," an observable that emits batches of all master writes and the latest checkpoint of the write batches."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"        +--------+                             +--------+ \n        |        | pullHandler()               |        |\n        |        |---------------------\x3e       |        | \n        |        |                             |        | \n        |        |                             |        |\n        | Client | pushHandler()               | Server |\n        |        |---------------------\x3e       |        | \n        |        |                             |        |\n        |        |   pullStream$               |        | \n        |        |   <-------------------------|        | \n        +--------+                             +--------+\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The replication runs in two ",(0,a.jsx)(n.strong,{children:"different modes"}),":"]}),"\n",(0,a.jsx)(n.h3,{id:"checkpoint-iteration",children:"Checkpoint iteration"}),"\n",(0,a.jsxs)(n.p,{children:["On first initial replication, or when the client comes online again, a checkpoint based iteration is used to catch up with the server state.\nA checkpoint is a subset of the fields of the last pulled document. When the checkpoint is send to the backend via ",(0,a.jsx)(n.code,{children:"pullHandler()"}),", the backend must be able to respond with all documents that have been written ",(0,a.jsx)(n.strong,{children:"after"})," the given checkpoint.\nFor example if your documents contain an ",(0,a.jsx)(n.code,{children:"id"})," and an ",(0,a.jsx)(n.code,{children:"updatedAt"})," field, these two can be used as checkpoint."]}),"\n",(0,a.jsxs)(n.p,{children:["When the checkpoint iteration reaches the last checkpoint, where the backend returns an empty array because there are no newer documents, the replication will automatically switch to the ",(0,a.jsx)(n.code,{children:"event observation"})," mode."]}),"\n",(0,a.jsx)(n.h3,{id:"event-observation",children:"Event observation"}),"\n",(0,a.jsxs)(n.p,{children:["While the client is connected to the backend, the events from the backend are observed via ",(0,a.jsx)(n.code,{children:"pullStream$"})," and persisted to the client."]}),"\n",(0,a.jsxs)(n.p,{children:["If your backend for any reason is not able to provide a full ",(0,a.jsx)(n.code,{children:"pullStream$"})," that contains all events and the checkpoint, you can instead only emit ",(0,a.jsx)(n.code,{children:"RESYNC"})," events that tell RxDB that anything unknown has changed on the server and it should run the pull replication via ",(0,a.jsx)(n.a,{href:"#checkpoint-iteration",children:"checkpoint iteration"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["When the client goes offline and online again, it might happen that the ",(0,a.jsx)(n.code,{children:"pullStream$"})," has missed out some events. Therefore the ",(0,a.jsx)(n.code,{children:"pullStream$"})," should also emit a ",(0,a.jsx)(n.code,{children:"RESYNC"})," event each time the client reconnects, so that the client can become in sync with the backend via the ",(0,a.jsx)(n.a,{href:"#checkpoint-iteration",children:"checkpoint iteration"})," mode."]}),"\n",(0,a.jsx)(n.h2,{id:"data-layout-on-the-server",children:"Data layout on the server"}),"\n",(0,a.jsx)(n.p,{children:"To use the replication you first have to ensure that:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"documents are deterministic sortable by their last write time"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"deterministic"})," means that even if two documents have the same ",(0,a.jsx)(n.em,{children:"last write time"}),", they have a predictable sort order.\nThis is most often ensured by using the ",(0,a.jsx)(n.em,{children:"primaryKey"})," as second sort parameter as part of the checkpoint."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.strong,{children:["documents are never deleted, instead the ",(0,a.jsx)(n.code,{children:"_deleted"})," field is set to ",(0,a.jsx)(n.code,{children:"true"}),"."]})}),"\n",(0,a.jsx)(n.p,{children:"This is needed so that the deletion state of a document exists in the database and can be replicated with other instances. If your backend uses a different field to mark deleted documents, you have to transform the data in the push/pull handlers or with the modifiers."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For example if your documents look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'const docData = {\n    "id": "foobar",\n    "name": "Alice",\n    "lastName": "Wilson",\n    /**\n     * Contains the last write timestamp\n     * so all documents writes can be sorted by that value\n     * when they are fetched from the remote instance.\n     */\n    "updatedAt": 1564483474,\n    /**\n     * Instead of physically deleting documents,\n     * a deleted document gets replicated.\n     */\n    "_deleted": false\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then your data is always sortable by ",(0,a.jsx)(n.code,{children:"updatedAt"}),". This ensures that when RxDB fetches 'new' changes via ",(0,a.jsx)(n.code,{children:"pullHandler()"}),", it can send the latest ",(0,a.jsx)(n.code,{children:"updatedAt+id"})," checkpoint to the remote endpoint and then receive all newer documents."]}),"\n",(0,a.jsxs)(n.p,{children:["By default, the field is ",(0,a.jsx)(n.code,{children:"_deleted"}),". If your remote endpoint uses a different field to mark deleted documents, you can set the ",(0,a.jsx)(n.code,{children:"deletedField"})," in the replication options which will automatically map the field on all pull and push requests."]}),"\n",(0,a.jsx)(n.h2,{id:"conflict-handling",children:"Conflict handling"}),"\n",(0,a.jsx)(n.p,{children:"When multiple clients (or the server) modify the same document at the same time (or when they are offline), it can happen that a conflict arises during the replication."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"A---B1---C1---X    master/server state\n     \\       /\n      B1---C2      fork/client state\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the case above, the client would tell the master to move the document state from ",(0,a.jsx)(n.code,{children:"B1"})," to ",(0,a.jsx)(n.code,{children:"C2"})," by calling ",(0,a.jsx)(n.code,{children:"pushHandler()"}),". But because the actual master state is ",(0,a.jsx)(n.code,{children:"C1"})," and not ",(0,a.jsx)(n.code,{children:"B1"}),", the master would reject the write by sending back the actual master state ",(0,a.jsx)(n.code,{children:"C1"}),".\n",(0,a.jsx)(n.strong,{children:"RxDB resolves all conflicts on the client"})," so it would call the conflict handler of the ",(0,a.jsx)(n.code,{children:"RxCollection"})," and create a new document state ",(0,a.jsx)(n.code,{children:"D"})," that can then be written to the master."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"A---B1---C1---X---D    master/server state\n     \\       / \\ /\n      B1---C2---D      fork/client state\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The default conflict handler will always drop the fork state and use the master state. This ensures that clients that are offline for a very long time, do not accidentally overwrite other peoples changes when they go online again.\nYou can specify a custom conflict handler by setting the property ",(0,a.jsx)(n.code,{children:"conflictHandler"})," when calling ",(0,a.jsx)(n.code,{children:"addCollection()"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Learn how to create a ",(0,a.jsx)(n.a,{href:"/transactions-conflicts-revisions.html#custom-conflict-handler",children:"custom conflict handler"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"replicaterxcollection",children:"replicateRxCollection()"}),"\n",(0,a.jsxs)(n.p,{children:["You can start the replication of a single ",(0,a.jsx)(n.code,{children:"RxCollection"})," by calling ",(0,a.jsx)(n.code,{children:"replicateRxCollection()"})," like in the following:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { replicateRxCollection } from 'rxdb/plugins/replication';\nimport {\n    lastOfArray\n} from 'rxdb';\nconst replicationState = await replicateRxCollection({\n    collection: myRxCollection,\n    /**\n     * An id for the replication to identify it\n     * and so that RxDB is able to resume the replication on app reload.\n     * If you replicate with a remote server, it is recommended to put the\n     * server url into the replicationIdentifier.\n     */\n    replicationIdentifier: 'my-rest-replication-to-https://example.com/api/sync',\n    /**\n     * By default it will do an ongoing realtime replication.\n     * By settings live: false the replication will run once until the local state\n     * is in sync with the remote state, then it will cancel itself.\n     * (optional), default is true.\n     */\n    live: true,\n    /**\n     * Time in milliseconds after when a failed backend request\n     * has to be retried.\n     * This time will be skipped if a offline->online switch is detected\n     * via navigator.onLine\n     * (optional), default is 5 seconds.\n     */\n    retryTime: 5 * 1000,\n    /**\n     * When multiInstance is true, like when you use RxDB in multiple browser tabs,\n     * the replication should always run in only one of the open browser tabs.\n     * If waitForLeadership is true, it will wait until the current instance is leader.\n     * If waitForLeadership is false, it will start replicating, even if it is not leader.\n     * [default=true]\n     */\n    waitForLeadership: true,\n    /**\n     * If this is set to false,\n     * the replication will not start automatically\n     * but will wait for replicationState.start() being called.\n     * (optional), default is true\n     */\n    autoStart: true,\n\n    /**\n     * Custom deleted field, the boolean property of the document data that\n     * marks a document as being deleted.\n     * If your backend uses a different fieldname then '_deleted', set the fieldname here.\n     * RxDB will still store the documents internally with '_deleted', setting this field\n     * only maps the data on the data layer.\n     * \n     * If a custom deleted field contains a non-boolean value, the deleted state\n     * of the documents depends on if the value is truthy or not. So instead of providing a boolean * * deleted value, you could also work with using a 'deletedAt' timestamp instead.\n     * \n     * [default='_deleted']\n     */\n    deletedField: 'deleted',\n\n    /**\n     * Optional,\n     * only needed when you want to replicate local changes to the remote instance.\n     */\n    push: {\n        /**\n         * Push handler\n         */\n        async handler(docs) {\n            /**\n             * Push the local documents to a remote REST server.\n             */\n            const rawResponse = await fetch('https://example.com/api/sync/push', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ docs })\n            });\n            /**\n             * Contains an array with all conflicts that appeared during this push.\n             * If there were no conflicts, return an empty array.\n             */\n            const response = await rawResponse.json();\n            return response;\n        },\n        /**\n         * Batch size, optional\n         * Defines how many documents will be given to the push handler at once.\n         */\n        batchSize: 5,\n        /**\n         * Modifies all documents before they are given to the push handler.\n         * Can be used to swap out a custom deleted flag instead of the '_deleted' field.\n         * If the push modifier return null, the document will be skipped and not send to the remote.\n         * Notice that the modifier can be called multiple times and should not contain any side effects.\n         * (optional)\n         */\n        modifier: d => d\n    },\n    /**\n     * Optional,\n     * only needed when you want to replicate remote changes to the local state.\n     */\n    pull: {\n        /**\n         * Pull handler\n         */\n        async handler(lastCheckpoint, batchSize) {\n            const minTimestamp = lastCheckpoint ? lastCheckpoint.updatedAt : 0;\n            /**\n             * In this example we replicate with a remote REST server\n             */\n            const response = await fetch(\n                `https://example.com/api/sync/?minUpdatedAt=${minTimestamp}&limit=${batchSize}`\n            );\n            const documentsFromRemote = await response.json();\n            return {\n                /**\n                 * Contains the pulled documents from the remote.\n                 * Not that if documentsFromRemote.length < batchSize,\n                 * then RxDB assumes that there are no more un-replicated documents\n                 * on the backend, so the replication will switch to 'Event observation' mode.\n                 */\n                documents: documentsFromRemote,\n                /**\n                 * The last checkpoint of the returned documents.\n                 * On the next call to the pull handler,\n                 * this checkpoint will be passed as 'lastCheckpoint'\n                 */\n                checkpoint: documentsFromRemote.length === 0 ? lastCheckpoint : {\n                    id: lastOfArray(documentsFromRemote).id,\n                    updatedAt: lastOfArray(documentsFromRemote).updatedAt\n                }\n            };\n        },\n        batchSize: 10,\n        /**\n         * Modifies all documents after they have been pulled\n         * but before they are used by RxDB.\n         * Notice that the modifier can be called multiple times and should not contain any side effects.\n         * (optional)\n         */\n        modifier: d => d,\n        /**\n         * Stream of the backend document writes.\n         * See below.\n         * You only need a stream$ when you have set live=true\n         */\n        stream$: pullStream$.asObservable()\n    },\n});\n\n\n/**\n * Creating the pull stream for realtime replication.\n * Here we use a websocket but any other way of sending data to the client can be used,\n * like long polling or server-sent events.\n */\nconst pullStream$ = new Subject<RxReplicationPullStreamItem<any, any>>();\nlet firstOpen = true;\nfunction connectSocket() {\n    const socket = new WebSocket('wss://example.com/api/sync/stream');\n    /**\n     * When the backend sends a new batch of documents+checkpoint,\n     * emit it into the stream$.\n     * \n     * event.data must look like this\n     * {\n     *     documents: [\n     *        {\n     *            id: 'foobar',\n     *            _deleted: false,\n     *            updatedAt: 1234\n     *        }\n     *     ],\n     *     checkpoint: {\n     *         id: 'foobar',\n     *         updatedAt: 1234\n     *     }\n     * }\n     */\n    socket.onmessage = event => pullStream$.next(event.data);\n    /**\n     * Automatically reconnect the socket on close and error.\n     */\n    socket.onclose = () => connectSocket();\n    socket.onerror = () => socket.close();\n\n    socket.onopen = () => {\n        if(firstOpen) {\n            firstOpen = false;\n        } else {\n            /**\n             * When the client is offline and goes online again,\n             * it might have missed out events that happened on the server.\n             * So we have to emit a RESYNC so that the replication goes\n             * into 'Checkpoint iteration' mode until the client is in sync\n             * and then it will go back into 'Event observation' mode again.\n             */\n            pullStream$.next('RESYNC');\n        }\n    }\n}\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"multi-tab-support",children:"Multi Tab support"}),"\n",(0,a.jsxs)(n.p,{children:["For better performance, the replication runs only in one instance when RxDB is used in multiple browser tabs or Node.js processes.\nBy setting ",(0,a.jsx)(n.code,{children:"waitForLeadership: false"})," you can enforce that each tab runs its own replication cycles.\nIf used in a multi instance setting, so when at database creation ",(0,a.jsx)(n.code,{children:"multiInstance: false"})," was not set,\nyou need to import the ",(0,a.jsx)(n.a,{href:"/leader-election.html",children:"leader election plugin"})," so that RxDB can know how many instances exist and which browser tab should run the replication."]}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error handling"}),"\n",(0,a.jsxs)(n.p,{children:["When sending a document to the remote fails for any reason, RxDB will send it again in a later point in time.\nThis happens for ",(0,a.jsx)(n.strong,{children:"all"})," errors. The document write could have already reached the remote instance and be processed, while only the answering fails.\nThe remote instance must be designed to handle this properly and to not crash on duplicate data transmissions.\nDepending on your use case, it might be ok to just write the duplicate document data again.\nBut for a more resilient error handling you could compare the last write timestamps or add a unique write id field to the document. This field can then be used to detect duplicates and ignore re-send data."]}),"\n",(0,a.jsxs)(n.p,{children:["Also the replication has an ",(0,a.jsx)(n.code,{children:".error$"})," stream that emits all ",(0,a.jsx)(n.code,{children:"RxError"})," objects that arise during replication.\nNotice that these errors contain an inner ",(0,a.jsx)(n.code,{children:".parameters.errors"})," field that contains the original error. Also they contain a ",(0,a.jsx)(n.code,{children:".parameters.direction"})," field that indicates if the error was thrown during ",(0,a.jsx)(n.code,{children:"pull"})," or ",(0,a.jsx)(n.code,{children:"push"}),". You can use these to properly handle errors. For example when the client is outdated, the server might respond with a ",(0,a.jsx)(n.code,{children:"426 Upgrade Required"})," error code that can then be used to force a page reload."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"replicationState.error$.subscribe((error) => {\n    if(\n        error.parameters.errors &&\n        error.parameters.errors[0] &&\n        error.parameters.errors[0].code === 426\n    ) {\n        // client is outdated -> enforce a page reload\n        location.reload();\n    }\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,a.jsxs)(n.p,{children:["Be aware that client side clocks can never be trusted. When you have a client-backend replication, the backend should overwrite the ",(0,a.jsx)(n.code,{children:"updatedAt"})," timestamp or use another field, when it receives the change from the client."]}),"\n",(0,a.jsx)(n.h2,{id:"rxreplicationstate",children:"RxReplicationState"}),"\n",(0,a.jsxs)(n.p,{children:["The function ",(0,a.jsx)(n.code,{children:"replicateRxCollection()"})," returns a ",(0,a.jsx)(n.code,{children:"RxReplicationState"})," that can be used to manage and observe the replication."]}),"\n",(0,a.jsx)(n.h3,{id:"observable",children:"Observable"}),"\n",(0,a.jsxs)(n.p,{children:["To observe the replication, the ",(0,a.jsx)(n.code,{children:"RxReplicationState"})," has some ",(0,a.jsx)(n.code,{children:"Observable"})," properties:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// emits each document that was received from the remote\nmyRxReplicationState.received$.subscribe(doc => console.dir(doc));\n\n// emits each document that was send to the remote\nmyRxReplicationState.sent$.subscribe(doc => console.dir(doc));\n\n// emits all errors that happen when running the push- & pull-handlers.\nmyRxReplicationState.error$.subscribe(error => console.dir(error));\n\n// emits true when the replication was canceled, false when not.\nmyRxReplicationState.canceled$.subscribe(bool => console.dir(bool));\n\n// emits true when a replication cycle is running, false when not.\nmyRxReplicationState.active$.subscribe(bool => console.dir(bool));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"awaitinitialreplication",children:"awaitInitialReplication()"}),"\n",(0,a.jsxs)(n.p,{children:["With ",(0,a.jsx)(n.code,{children:"awaitInitialReplication()"})," you can await the initial replication that is done when a full replication cycle was successful finished for the first time. The returned promise will never resolve if you cancel the replication before the initial replication can be done."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"await myRxReplicationState.awaitInitialReplication();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"awaitinsync",children:"awaitInSync()"}),"\n",(0,a.jsxs)(n.p,{children:["Returns a ",(0,a.jsx)(n.code,{children:"Promise"})," that resolves when:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"awaitInitialReplication()"})," has emitted."]}),"\n",(0,a.jsx)(n.li,{children:"All local data is replicated with the remote."}),"\n",(0,a.jsx)(n.li,{children:"No replication cycle is running or in retry-state."}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{type:"warning",children:[(0,a.jsxs)(n.p,{children:["When ",(0,a.jsx)(n.code,{children:"multiInstance: true"})," and ",(0,a.jsx)(n.code,{children:"waitForLeadership: true"})," and another tab is already running the replication, ",(0,a.jsx)(n.code,{children:"awaitInSync()"})," will not resolve until the other tab is closed and the replication starts in this tab."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"await myRxReplicationState.awaitInSync();\n"})})]}),"\n",(0,a.jsxs)(n.admonition,{type:"warning",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{}),(0,a.jsxs)(n.h4,{id:"awaitinitialreplication-and-awaitinsync-should-not-be-used-to-block-the-application",children:[(0,a.jsx)(n.code,{children:"awaitInitialReplication()"})," and ",(0,a.jsx)(n.code,{children:"awaitInSync()"})," should not be used to block the application"]}),(0,a.jsxs)(n.p,{children:["A common mistake in RxDB usage is when developers want to block the app usage until the application is in sync.\nOften they just ",(0,a.jsx)(n.code,{children:"await"})," the promise of ",(0,a.jsx)(n.code,{children:"awaitInitialReplication()"})," or ",(0,a.jsx)(n.code,{children:"awaitInSync()"})," and show a loading spinner until they resolve. This is dangerous and should not be done because:"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["When ",(0,a.jsx)(n.code,{children:"multiInstance: true"})," and ",(0,a.jsx)(n.code,{children:"waitForLeadership: true (default)"})," and another tab is already running the replication, ",(0,a.jsx)(n.code,{children:"awaitInitialReplication()"})," will not resolve until the other tab is closed and the replication starts in this tab."]}),"\n",(0,a.jsxs)(n.li,{children:["Your app can no longer be started when the device is offline because there the ",(0,a.jsx)(n.code,{children:"awaitInitialReplication()"})," will never resolve and the app cannot be used."]}),"\n"]}),(0,a.jsxs)(n.p,{children:["Instead you should store the last in-sync time in a ",(0,a.jsx)(n.a,{href:"/rx-local-document.html",children:"local document"})," and observe its value on all instances."]}),(0,a.jsx)(n.p,{children:"For example if you want to block clients from using the app if they have not been in sync for the last 24 hours, you could use this code:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"\n// update last-in-sync-flag each time replication is in sync\nawait myCollection.insertLocal('last-in-sync', { time: 0 }).catch(); // ensure flag exists\nmyReplicationState.active$.pipe(\n    mergeMap(async() => {\n        await myReplicationState.awaitInSync();\n        await myCollection.upsertLocal('last-in-sync', { time: Date.now() })\n    })\n);\n\n// observe the flag and toggle loading spinner\nawait showLoadingSpinner();\nconst oneDay = 1000 * 60 * 60 * 24;\nawait firstValueFrom(\n    myCollection.getLocal$('last-in-sync').pipe(\n        filter(d => d.get('time') > (Date.now() - oneDay))\n    )\n);\nawait hideLoadingSpinner();\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"resync",children:"reSync()"}),"\n",(0,a.jsxs)(n.p,{children:["Triggers a ",(0,a.jsx)(n.code,{children:"RESYNC"})," cycle where the replication goes into ",(0,a.jsx)(n.a,{href:"#checkpoint-iteration",children:"checkpoint iteration"})," until the client is in sync with the backend. Used in unit tests or when no proper ",(0,a.jsx)(n.code,{children:"pull.stream$"})," can be implemented so that the client only knows that something has been changed but not what."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"myRxReplicationState.reSync();\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If your backend is not capable of sending events to the client at all, you could run ",(0,a.jsx)(n.code,{children:"reSync()"})," in an interval so that the client will automatically fetch server changes after some time at least."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// trigger RESYNC each 10 seconds.\nsetInterval(() => myRxReplicationState.reSync(), 10 * 1000);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cancel",children:"cancel()"}),"\n",(0,a.jsx)(n.p,{children:"Cancels the replication. Returns a promise that resolved when everything has been cleaned up."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"await myRxReplicationState.cancel();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pause",children:"pause()"}),"\n",(0,a.jsxs)(n.p,{children:["Pauses a running replication. The replication can later be resumed with ",(0,a.jsx)(n.code,{children:"RxReplicationState.start()"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"await myRxReplicationState.pause();\nawait myRxReplicationState.start(); // restart\n"})}),"\n",(0,a.jsx)(n.h3,{id:"remove",children:"remove()"}),"\n",(0,a.jsxs)(n.p,{children:['Cancels the replication and deletes the metadata of the replication state. This can be used to restart the replication "from scratch". Calling ',(0,a.jsx)(n.code,{children:".remove()"})," will only delete the replication metadata, it will NOT delete the documents from the collection of the replication."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"await myRxReplicationState.remove();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"isstopped",children:"isStopped()"}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"true"})," if the replication is stopped. This can be if a non-live replication is finished or a replication got canceled."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"replicationState.isStopped(); // true/false\n"})}),"\n",(0,a.jsx)(n.h3,{id:"ispaused",children:"isPaused()"}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"true"})," if the replication is paused."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"replicationState.isPaused(); // true/false\n"})}),"\n",(0,a.jsx)(n.h3,{id:"setting-a-custom-initialcheckpoint",children:"Setting a custom initialCheckpoint"}),"\n",(0,a.jsxs)(n.p,{children:["By default, the push replication will start from the beginning of time and push all documents from there to the remote.\nBy setting a custom ",(0,a.jsx)(n.code,{children:"push.initialCheckpoint"}),", you can tell the replication to only push writes that are newer than the given checkpoint."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// store the latest checkpoint of a collection\nlet lastLocalCheckpoint: any;\nmyCollection.checkpoint$.subscribe(checkpoint => lastLocalCheckpoint = checkpoint);\n\n// start the replication but only push documents that are newer than the lastLocalCheckpoint\nconst replicationState = replicateRxCollection({\n    collection: myCollection,\n    replicationIdentifier: 'my-custom-replication-with-init-checkpoint',\n    /* ... */\n    push: {\n        handler: /* ... */,\n        initialCheckpoint: lastLocalCheckpoint\n    }\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The same can be done for the other direction by setting a ",(0,a.jsx)(n.code,{children:"pull.initialCheckpoint"}),". Notice that here we need the remote checkpoint from the backend instead of the one from the RxDB storage."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// get the last pull checkpoint from the server\nconst lastRemoteCheckpoint = await (await fetch('http://example.com/pull-checkpoint')).json();\n\n// start the replication but only pull documents that are newer than the lastRemoteCheckpoint\nconst replicationState = replicateRxCollection({\n    collection: myCollection,\n    replicationIdentifier: 'my-custom-replication-with-init-checkpoint',\n    /* ... */\n    pull: {\n        handler: /* ... */,\n        initialCheckpoint: lastRemoteCheckpoint\n    }\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"toggleondocumentvisible",children:"toggleOnDocumentVisible"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"(experimental)"})}),"\n",(0,a.jsxs)(n.p,{children:["Set this to true to ensure the replication also runs if the tab is currently ",(0,a.jsx)(n.code,{children:"visbile"}),". This fixes problem in browsers where the replicating leader-elected tab becomes stale or hibernated by the browser to save battery life. If the tab is losing visibility, the replication will be paused automatically and then restarted if either the tab becomes leader or the tab becomes visible again."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const replicationState = replicateRxCollection({\n    toggleOnDocumentVisible: true,\n    /* ... */\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"attachment-replication-beta",children:"Attachment replication (beta)"}),"\n",(0,a.jsxs)(n.p,{children:["Attachment replication is supported in the RxDB Sync Engine itself. However not all replication plugins support it.\nIf you start the replication with a collection which has ",(0,a.jsx)(n.a,{href:"/rx-attachment.html",children:"enabled RxAttachments"})," attachments data will be added to all push- and write data."]}),"\n",(0,a.jsxs)(n.p,{children:["The pushed documents will contain an ",(0,a.jsx)(n.code,{children:"_attachments"})," object which contains:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The attachment meta data (id, length, digest) of all non-attachments"}),"\n",(0,a.jsx)(n.li,{children:"The full attachment data of all attachments that have been updated/added from the client."}),"\n",(0,a.jsx)(n.li,{children:"Deleted attachments are spared out in the pushed document."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"With this data, the backend can decide onto which attachments must be deleted, added or overwritten."}),"\n",(0,a.jsx)(n.p,{children:"Accordingly, the pulled document must contain the same data, if the backend has a new document state with updated attachments."}),"\n",(0,a.jsx)(n.h2,{id:"partial-sync-with-rxdb",children:"Partial Sync with RxDB"}),"\n",(0,a.jsx)(n.p,{children:"Suppose you're building a Minecraft-like voxel game where the world can expand in every direction. Storing the entire map locally for offline use is impossible because the dataset could be massive. Yet you still want a local-first design so players can edit the game world offline and sync back to the server later."}),"\n",(0,a.jsx)(n.h3,{id:"idea-one-collection-multiple-replications",children:"Idea: One Collection, Multiple Replications"}),"\n",(0,a.jsxs)(n.p,{children:["You might define a single RxDB collection called ",(0,a.jsx)(n.code,{children:"db.voxels"}),', where each document represents a block or "voxel" (with fields like id, chunkId, coordinates, and type). With RxDB you can, instead of setting up ',(0,a.jsx)(n.em,{children:"one"})," replication that tries to fetch ",(0,a.jsx)(n.em,{children:"all"})," voxels, you create ",(0,a.jsx)(n.strong,{children:"separate replication states"})," for each ",(0,a.jsx)(n.em,{children:"chunk"})," of the world the player is currently near."]}),"\n",(0,a.jsxs)(n.p,{children:["When the player enters a particular chunk (say ",(0,a.jsx)(n.code,{children:"chunk-123"}),"), you ",(0,a.jsx)(n.strong,{children:"start a replication"})," dedicated to that chunk. On the server side, you have endpoints to ",(0,a.jsx)(n.strong,{children:"pull"})," only that chunk's voxels (e.g., GET ",(0,a.jsx)(n.code,{children:"/api/voxels/pull?chunkId=123"}),") and ",(0,a.jsx)(n.strong,{children:"push"})," local changes back (e.g., POST ",(0,a.jsx)(n.code,{children:"/api/voxels/push?chunkId=123"}),"). RxDB handles them similarly to any other offline-first setup, but each replication is filtered to only that chunk's data."]}),"\n",(0,a.jsxs)(n.p,{children:["When the player leaves ",(0,a.jsx)(n.code,{children:"chunk-123"})," and no longer needs it, you ",(0,a.jsx)(n.strong,{children:"stop"})," that replication. If the player moves to ",(0,a.jsx)(n.code,{children:"chunk-124"}),", you start a new replication for chunk 124. This ensures the game only downloads and syncs data relevant to the player's immediate location. Meanwhile, all edits made offline remain safely stored in the local database until a network connection is available."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const activeReplications = {}; // chunkId -> replicationState\n\nfunction startChunkReplication(chunkId) {\n  if (activeReplications[chunkId]) return;\n  const replicationId = 'voxels-chunk-' + chunkId;\n\n  const replicationState = replicateRxCollection({\n    collection: db.voxels,\n    replicationIdentifier: replicationId,\n    pull: {\n      async handler(checkpoint, limit) {\n        const res = await fetch(\n          `/api/voxels/pull?chunkId=${chunkId}&cp=${checkpoint}&limit=${limit}`\n        );\n        /* ... */\n      }\n    },\n    push: {\n      async handler(changedDocs) {\n        const res = await fetch(`/api/voxels/push?chunkId=${chunkId}`);\n        /* ... */\n      }\n    }\n  });\n  activeReplications[chunkId] = replicationState;\n}\n\nfunction stopChunkReplication(chunkId) {\n  const rep = await activeReplications[chunkId];\n  if (rep) {\n    rep.cancel();\n    delete activeReplications[chunkId];\n  }\n}\n\n// Called whenever the player's location changes; \n// dynamically start/stop replication for nearby chunks.\nfunction onPlayerMove(neighboringChunkIds) {\n  neighboringChunkIds.forEach(startChunkReplication);\n  Object.keys(activeReplications).forEach(cid => {\n    if (!neighboringChunkIds.includes(cid)) {\n      stopChunkReplication(cid);\n    }\n  });\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"diffy-sync-when-revisiting-a-chunk",children:"Diffy-Sync when Revisiting a Chunk"}),"\n",(0,a.jsxs)(n.p,{children:['An added benefit of this multi-replication-state design is checkpointing. Each replication state has a unique "replication identifier," so the next time the player returns to ',(0,a.jsx)(n.code,{children:"chunk-123"}),", the local database knows what it already has and only fetches the differences without the need to re-download the entire chunk."]}),"\n",(0,a.jsx)(n.h3,{id:"partial-sync-in-a-local-first-business-application",children:"Partial Sync in a Local-First Business Application"}),"\n",(0,a.jsx)(n.p,{children:'Though a voxel world is an intuitive example, the same technique applies in enterprise scenarios where data sets are large but each user only needs a specific subset. You could spin up a new replication for each "permission group" or "region," so users only sync the records they\'re allowed to see. Or in a CRM, the replication might be filtered by the specific accounts or projects a user is currently handling. As soon as they switch to a different project, you stop the old replication and start one for the new scope.'}),"\n",(0,a.jsxs)(n.p,{children:["This ",(0,a.jsx)(n.strong,{children:"chunk-based"})," or ",(0,a.jsx)(n.strong,{children:"scope-based"}),' replication pattern keeps your local storage lean, reduces network overhead, and still gives users the offline, instant-feedback experience that local-first apps are known for. By dynamically creating (and canceling) replication states, you retain tight control over bandwidth usage and make the infinite (or very large) feasible. In a production app you would also "flag" the entities (with a ',(0,a.jsx)(n.code,{children:"pull.modifier"}),") by which replication state they came from, so that you can clean up the parts that you no longer need. --\x3e"]}),"\n",(0,a.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"I have infinite loops in my replication, how to debug?"}),(0,a.jsx)("div",{children:(0,a.jsxs)(n.p,{children:["When you have infinite loops in your replication or random re-runs of http requests after some time, the reason is likely that your pull-handler\nis crashing. The debug this, add a log to the error$ handler to debug it. ",(0,a.jsx)(n.code,{children:"myRxReplicationState.error$.subscribe(err => console.log('error$', err))"}),"."]})})]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);