{"version":3,"file":"rx-collection.js","names":["filter","startWith","mergeMap","shareReplay","ucfirst","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","clone","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","RXJS_SHARE_REPLAY_DEFAULTS","getDefaultRxDocumentMeta","getDefaultRevision","nextTick","fillObjectDataBeforeInsert","createRxCollectionStorageInstance","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","DocCache","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createRxDocument","getWrappedStorageInstance","storageChangeEventToRxChangeEvent","throwIfIsStorageWriteError","defaultConflictHandler","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","conflictHandler","storageInstance","timeouts","Set","_atomicUpsertQueues","Map","synced","hooks","_subs","_docCache","_queryCache","$","_changeEventBuffer","onDestroy","destroyed","_applyHookFunctions","asRxCollection","prepare","jsonSchema","eventBulks$","pipe","changeEventBulk","collectionName","events","storageToken","databaseStorageToken","subDocs","changeStream","subscribe","eventBulk","id","internal","map","ev","databaseToken","token","checkpoint","context","$emit","push","cE","isLocal","doc","get","documentId","_handleChangeEvent","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","migrationNeeded","getDataMigrator","migrate","batchSize","migratePromise","insert","json","useJson","bulkInsert","writeResult","isError","error","primaryPath","insertResult","success","docsData","length","useDocs","docData","useDocData","Promise","all","_runHooks","docs","docsMap","insertRows","set","Object","assign","_attachments","_meta","_rev","_deleted","row","document","bulkWrite","results","successEntries","entries","rxDocuments","key","writtenDocData","primary","values","bulkRemove","ids","findByIds","rxDocumentMap","Array","from","forEach","rxDocument","data","toJSON","removeDocs","writeDoc","previous","successIds","keys","bulkUpsert","insertData","useJsonByDocId","ret","slice","writeData","docDataInDb","documentInDb","atomicUpdate","updatedDocs","concat","upsert","result","atomicUpsert","queue","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","find","queryObj","query","findOne","selector","limit","isArray","mustBeQueried","findDocumentsById","findByIds$","currentValue","lastChangeEvent","initialPromise","counter","firstEmitDone","changeEvent","includes","missedChangeEvents","getFrom","newResult","resultHasChanged","rxChangeEvent","docId","op","operation","documentData","has","x","exportJSON","importJSON","_exportedJSON","syncCouchDB","_syncOptions","syncGraphQL","_options","addHook","when","fun","parallel","boundFun","bind","runName","series","getHooks","e","instance","tasks","hook","_runHooksSync","promiseWait","time","res","timeout","setTimeout","add","destroy","clearTimeout","requestIdlePromise","fn","close","sub","unsubscribe","collections","remove","removeCollection","collection","colProto","getPrototypeOf","fnName","_innerDoc","rxCollection","docFromCache","resolve","exec","newDoc","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","password","funName","defineProperty","version","creator","err","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    startWith,\n    mergeMap,\n    shareReplay\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    clone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    getDefaultRxDocumentMeta,\n    getDefaultRevision,\n    nextTick\n} from './util';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    DocCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCouchDBReplicationState,\n    MigrationState,\n    SyncOptions,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageBulkWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nimport {\n    createRxDocument\n} from './rx-document-prototype-merge';\nimport {\n    getWrappedStorageInstance,\n    storageChangeEventToRxChangeEvent,\n    throwIfIsStorageWriteError\n} from './rx-storage-helper';\nimport { defaultConflictHandler } from './replication-protocol';\n\nconst HOOKS_WHEN = ['pre', 'post'];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any }\n    > {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _atomicUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: any = {};\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocCache<\n        RxDocument<RxDocumentType, OrmMethods>\n    > = new DocCache();\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n\n\n    /**\n     * When the collection is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed = false;\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n\n        this.$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * When a write happens to the collection\n         * we find the changed document in the docCache\n         * and tell it that it has to change its data.\n         */\n        this._subs.push(\n            this.$\n                .pipe(\n                    filter((cE: RxChangeEvent<RxDocumentType>) => !cE.isLocal)\n                )\n                .subscribe(cE => {\n                    // when data changes, send it to RxDocument in docCache\n                    const doc = this._docCache.get(cE.documentId);\n                    if (doc) {\n                        doc._handleChangeEvent(cE);\n                    }\n                })\n        );\n\n        /**\n         * Resolve the conflict tasks\n         * of the RxStorageInstance\n         */\n        this._subs.push(\n            this.storageInstance\n                .conflictResultionTasks()\n                .subscribe(task => {\n                    this\n                        .conflictHandler(task.input, task.context)\n                        .then(output => {\n                            this.storageInstance.resolveConflictResultionTask({\n                                id: task.id,\n                                output\n                            });\n                        });\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this.schema, json);\n        const writeResult = await this.bulkInsert([useJson]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, useJson[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs: RxDocumentType[] = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n            return useDocData;\n        });\n        const docs = await Promise.all(\n            useDocs.map(doc => {\n                return this._runHooks('pre', 'insert', doc)\n                    .then(() => {\n                        return doc;\n                    });\n            })\n        );\n\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        const insertRows: BulkWriteRow<RxDocumentType>[] = docs.map(doc => {\n            docsMap.set((doc as any)[this.schema.primaryPath] as any, doc);\n            const docData = Object.assign(doc, {\n                _attachments: {},\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _deleted: false\n            });\n            const row: BulkWriteRow<RxDocumentType> = { document: docData };\n            return row;\n        });\n\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n        // create documents\n        const successEntries: [string, RxDocumentData<RxDocumentType>][] = Object.entries(results.success);\n        const rxDocuments: any[] = successEntries\n            .map(([key, writtenDocData]) => {\n                const docData: RxDocumentData<RxDocumentType> = getFromMapOrThrow(docsMap, key) as any;\n                docData._rev = writtenDocData._rev;\n\n                const doc = createRxDocument(this as any, docData);\n                return doc;\n            });\n\n\n        await Promise.all(\n            rxDocuments.map(doc => {\n                return this._runHooks(\n                    'post', 'insert',\n                    docsMap.get(doc.primary),\n                    doc\n                );\n            })\n        );\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids);\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = clone(rxDocument.toJSON(true)) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n\n\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments: any[] = successIds.map(id => {\n            return rxDocumentMap.get(id);\n        });\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<RxDocument<RxDocumentType, OrmMethods>[]> {\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        let ret = insertResult.success.slice(0);\n        const updatedDocs = await Promise.all(\n            insertResult.error.map(error => {\n                const id = error.documentId;\n                const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                const docDataInDb = ensureNotFalsy(error.documentInDb);\n                const doc = createRxDocument(this.asRxCollection, docDataInDb);\n                return doc.atomicUpdate(() => writeData);\n            })\n        );\n        ret = ret.concat(updatedDocs);\n        return ret;\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        return this.bulkUpsert([json]).then(result => result[0]);\n    }\n\n    /**\n     * upserts to a RxDocument, uses atomicUpdate if document already exists\n     */\n    atomicUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it wont try 2 parallel runs\n        let queue = this._atomicUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _atomicUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _atomicUpsertUpdate(wasInserted.doc, useJson)\n                        .then(() => wasInserted.doc);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._atomicUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(queryObj?: MangoQueryNoLimit<RxDocumentType> | string): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>\n        | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritte\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    async findByIds(\n        ids: string[]\n    ): Promise<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n\n        const ret = new Map();\n        const mustBeQueried: string[] = [];\n\n        // first try to fill from docCache\n        ids.forEach(id => {\n            const doc = this._docCache.get(id);\n            if (doc) {\n                ret.set(id, doc);\n            } else {\n                mustBeQueried.push(id);\n            }\n        });\n\n        // find everything which was not in docCache\n        if (mustBeQueried.length > 0) {\n            const docs = await this.storageInstance.findDocumentsById(mustBeQueried, false);\n            Object.values(docs).forEach(docData => {\n                const doc = createRxDocument<RxDocumentType, OrmMethods>(this as any, docData);\n                ret.set(doc.primary, doc);\n            });\n        }\n        return ret;\n    }\n\n    /**\n     * like this.findByIds but returns an observable\n     * that always emits the current state\n     */\n    findByIds$(\n        ids: string[]\n    ): Observable<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        let currentValue: Map<string, RxDocument<RxDocumentType, OrmMethods>> | null = null;\n        let lastChangeEvent: number = -1;\n\n        /**\n         * Ensure we do not process events in parallel\n         */\n        let queue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n        const initialPromise = this.findByIds(ids).then(docsMap => {\n            lastChangeEvent = this._changeEventBuffer.counter;\n            currentValue = docsMap;\n        });\n        let firstEmitDone = false;\n\n        return this.$.pipe(\n            startWith(null),\n            /**\n             * Optimization shortcut.\n             * Do not proceed if the emited RxChangeEvent\n             * is not relevant for the query.\n             */\n            filter(changeEvent => {\n                if (\n                    // first emit has no event\n                    changeEvent &&\n                    (\n                        // local documents are not relevant for the query\n                        changeEvent.isLocal ||\n                        // document of the change is not in the ids list.\n                        !ids.includes(changeEvent.documentId)\n                    )\n                ) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }),\n            mergeMap(() => initialPromise),\n            /**\n             * Because shareReplay with refCount: true\n             * will often subscribe/unsusbscribe\n             * we always ensure that we handled all missed events\n             * since the last subscription.\n             */\n            mergeMap(() => {\n                queue = queue.then(async () => {\n                    /**\n                     * We first have to clone the Map\n                     * to ensure we do not create side effects by mutating\n                     * a Map that has already been returned before.\n                     */\n                    currentValue = new Map(ensureNotFalsy(currentValue));\n                    const missedChangeEvents = this._changeEventBuffer.getFrom(lastChangeEvent + 1);\n                    lastChangeEvent = this._changeEventBuffer.counter;\n                    if (missedChangeEvents === null) {\n                        /**\n                         * changeEventBuffer is of bounds -> we must re-execute over the database\n                         * because we cannot calculate the new results just from the events.\n                         */\n                        const newResult = await this.findByIds(ids);\n                        lastChangeEvent = this._changeEventBuffer.counter;\n                        return newResult;\n                    } else {\n                        let resultHasChanged = false;\n                        missedChangeEvents\n                            .forEach(rxChangeEvent => {\n                                const docId = rxChangeEvent.documentId;\n                                if (!ids.includes(docId)) {\n                                    // document is not relevant for the result set\n                                    return;\n                                }\n                                const op = rxChangeEvent.operation;\n                                if (op === 'INSERT' || op === 'UPDATE') {\n                                    resultHasChanged = true;\n                                    const rxDocument = createRxDocument(\n                                        this.asRxCollection,\n                                        rxChangeEvent.documentData\n                                    );\n                                    ensureNotFalsy(currentValue).set(docId, rxDocument);\n                                } else {\n                                    if (ensureNotFalsy(currentValue).has(docId)) {\n                                        resultHasChanged = true;\n                                        ensureNotFalsy(currentValue).delete(docId);\n                                    }\n                                }\n                            });\n\n                        // nothing happened that affects the result -> do not emit\n                        if (!resultHasChanged && firstEmitDone) {\n                            return false as any;\n                        }\n                    }\n                    firstEmitDone = true;\n                    return currentValue;\n                });\n                return queue;\n            }),\n            filter(x => !!x),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * sync with a CouchDB endpoint\n     */\n    syncCouchDB(_syncOptions: SyncOptions): RxCouchDBReplicationState {\n        throw pluginMissing('replication');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL<CheckpointType = any>(_options: SyncOptionsGraphQL<RxDocumentType, CheckpointType>): RxGraphQLReplicationState<RxDocumentType, CheckpointType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: string, key: string, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: string, key: string) {\n        try {\n            return this.hooks[key][when];\n        } catch (e) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n    }\n\n    _runHooks(when: string, key: string, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: string, key: string, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    remove(): Promise<any> {\n        return this.database.removeCollection(this.name);\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _atomicUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.atomicUpdate((_innerDoc: RxDocumentData<RxDocType>) => {\n        return json;\n    })\n        .then(() => nextTick())\n        .then(() => {\n            return doc;\n        });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _atomicUpsertEnsureRxDocumentExists(\n    rxCollection: RxCollection,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument,\n        inserted: boolean\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docFromCache = rxCollection._docCache.get(primary);\n    if (docFromCache) {\n        return Promise.resolve({\n            doc: docFromCache,\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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"}