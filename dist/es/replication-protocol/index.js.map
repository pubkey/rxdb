{"version":3,"file":"index.js","names":["BehaviorSubject","combineLatest","filter","firstValueFrom","map","Subject","getPrimaryFieldOfPrimaryKey","ensureNotFalsy","flatClone","PROMISE_RESOLVE_VOID","getCheckpointKey","startReplicationDownstream","docStateToWriteDoc","writeDocToDocState","startReplicationUpstream","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","cancelRxStorageReplication","replicationState","events","canceled","next","streamQueue","down","up","checkpointQueue","active","complete","processed","resolvedConflicts","awaitRxStorageReplicationIdle","awaitRxStorageReplicationFirstInSync","Promise","all","replicateRxStorageInstance","input","checkpointKey","primaryPath","forkInstance","schema","primaryKey","downstreamBulkWriteFlag","error","stats","addNewTask","downstreamProcessChanges","downstreamResyncOnce","masterChangeStreamEmit","persistFromMaster","forkChangeStreamEmit","persistToMaster","persistToMasterConflictWrites","persistToMasterHadConflicts","processTasks","upstreamInitialSync","firstSyncDone","lastCheckpointDoc","pipe","awaitRxStorageReplicationInSync","rxStorageInstanceToReplicationHandler","instance","conflictHandler","hashFunction","replicationHandler","masterChangeStream$","changeStream","eventBulk","ret","checkpoint","documents","event","change","doc","useDoc","previous","operation","_deleted","masterChangesSince","batchSize","getChangedDocumentsSince","length","d","masterWrite","rows","rowById","forEach","row","docId","newDocumentState","ids","Object","keys","findDocumentsById","masterDocsState","conflicts","writeRows","entries","id","masterState","push","document","assumedMasterState","realMasterState","isEqual","bulkWrite","values","err","status","Error","documentInDb"],"sources":["../../../src/replication-protocol/index.ts"],"sourcesContent":["/**\n * These files contain the replication protocol.\n * It can be used to replicated RxStorageInstances or RxCollections\n * or even to do a client(s)-server replication.\n */\n\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    firstValueFrom,\n    map,\n    Subject\n} from 'rxjs';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from '../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    DocumentsWithCheckpoint,\n    HashFunction,\n    RxConflictHandler,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    WithDeleted\n} from '../types';\nimport {\n    ensureNotFalsy,\n    flatClone,\n    PROMISE_RESOLVE_VOID\n} from '../util';\nimport {\n    getCheckpointKey\n} from './checkpoint';\nimport { startReplicationDownstream } from './downstream';\nimport { docStateToWriteDoc, writeDocToDocState } from './helper';\nimport { startReplicationUpstream } from './upstream';\n\n\nexport * from './checkpoint';\nexport * from './downstream';\nexport * from './upstream';\nexport * from './meta-instance';\nexport * from './conflicts';\nexport * from './helper';\n\n\nexport function replicateRxStorageInstance<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): RxStorageInstanceReplicationState<RxDocType> {\n    const checkpointKey = getCheckpointKey(input);\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.forkInstance.schema.primaryKey),\n        input,\n        checkpointKey,\n        downstreamBulkWriteFlag: 'replication-downstream-' + checkpointKey,\n        events: {\n            canceled: new BehaviorSubject<boolean>(false),\n            active: {\n                down: new BehaviorSubject<boolean>(true),\n                up: new BehaviorSubject<boolean>(true)\n            },\n            processed: {\n                down: new Subject(),\n                up: new Subject()\n            },\n            resolvedConflicts: new Subject(),\n            error: new Subject()\n        },\n        stats: {\n            down: {\n                addNewTask: 0,\n                downstreamProcessChanges: 0,\n                downstreamResyncOnce: 0,\n                masterChangeStreamEmit: 0,\n                persistFromMaster: 0\n            },\n            up: {\n                forkChangeStreamEmit: 0,\n                persistToMaster: 0,\n                persistToMasterConflictWrites: 0,\n                persistToMasterHadConflicts: 0,\n                processTasks: 0,\n                upstreamInitialSync: 0\n            }\n        },\n        firstSyncDone: {\n            down: new BehaviorSubject<boolean>(false),\n            up: new BehaviorSubject<boolean>(false)\n        },\n        streamQueue: {\n            down: PROMISE_RESOLVE_VOID,\n            up: PROMISE_RESOLVE_VOID\n        },\n        checkpointQueue: PROMISE_RESOLVE_VOID,\n        lastCheckpointDoc: {}\n    };\n\n    startReplicationDownstream(state);\n    startReplicationUpstream(state);\n    return state;\n}\n\nexport function awaitRxStorageReplicationFirstInSync(\n    state: RxStorageInstanceReplicationState<any>\n): Promise<void> {\n    return firstValueFrom(\n        combineLatest([\n            state.firstSyncDone.down.pipe(\n                filter(v => !!v)\n            ),\n            state.firstSyncDone.up.pipe(\n                filter(v => !!v)\n            )\n        ])\n    ).then(() => { });\n}\n\nexport function awaitRxStorageReplicationInSync(\n    replicationState: RxStorageInstanceReplicationState<any>\n) {\n    return Promise.all([\n        replicationState.streamQueue.up,\n        replicationState.streamQueue.down\n    ]);\n}\n\n\nexport async function awaitRxStorageReplicationIdle(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    await awaitRxStorageReplicationFirstInSync(state);\n    while (true) {\n        const { down, up } = state.streamQueue;\n        await Promise.all([\n            up,\n            down\n        ]);\n        /**\n         * If the Promises have not been reasigned\n         * after awaiting them, we know that the replication\n         * is in idle state at this point in time.\n         */\n        if (\n            down === state.streamQueue.down &&\n            up === state.streamQueue.up\n        ) {\n            return;\n        }\n    }\n}\n\n\nexport function rxStorageInstanceToReplicationHandler<RxDocType, MasterCheckpointType>(\n    instance: RxStorageInstance<RxDocType, any, any, MasterCheckpointType>,\n    conflictHandler: RxConflictHandler<RxDocType>,\n    hashFunction: HashFunction\n): RxReplicationHandler<RxDocType, MasterCheckpointType> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n    const replicationHandler: RxReplicationHandler<RxDocType, MasterCheckpointType> = {\n        masterChangeStream$: instance.changeStream().pipe(\n            map(eventBulk => {\n                const ret: DocumentsWithCheckpoint<RxDocType, MasterCheckpointType> = {\n                    checkpoint: eventBulk.checkpoint,\n                    documents: eventBulk.events.map(event => {\n                        /**\n                         * TODO the event object should be properly redesigned\n                         * to how RxDB does use it.\n                         * This requires touching the event-reduce-js library\n                         * and others. But it would remove much complexity\n                         * from RxDBs event handling.\n                         */\n                        if (event.change.doc) {\n                            return writeDocToDocState(event.change.doc as any);\n                        } else {\n                            let useDoc = ensureNotFalsy(event.change.previous);\n                            if (event.change.operation === 'DELETE') {\n                                useDoc = flatClone(useDoc);\n                                (useDoc as any)._deleted = true;\n                            }\n                            return writeDocToDocState(useDoc as any);\n                        }\n                    })\n                };\n                return ret;\n            })\n        ),\n        masterChangesSince(\n            checkpoint,\n            batchSize\n        ) {\n            return instance.getChangedDocumentsSince(\n                batchSize,\n                checkpoint\n            ).then(result => {\n                return {\n                    checkpoint: result.documents.length > 0 ? result.checkpoint : checkpoint,\n                    documents: result.documents.map(d => writeDocToDocState(d))\n                }\n            })\n        },\n        async masterWrite(\n            rows\n        ) {\n            const rowById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            rows.forEach(row => {\n                const docId: string = (row.newDocumentState as any)[primaryPath];\n                rowById[docId] = row;\n            });\n            const ids = Object.keys(rowById);\n\n            const masterDocsState = await instance.findDocumentsById(\n                ids,\n                true\n            );\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            const writeRows: BulkWriteRow<RxDocType>[] = [];\n            await Promise.all(\n                Object.entries(rowById)\n                    .map(async ([id, row]) => {\n                        const masterState = masterDocsState[id];\n                        if (!masterState) {\n                            writeRows.push({\n                                document: docStateToWriteDoc(hashFunction, row.newDocumentState)\n                            });\n                        } else if (\n                            masterState &&\n                            !row.assumedMasterState\n                        ) {\n                            conflicts.push(writeDocToDocState(masterState));\n                        } else if (\n                            (await conflictHandler({\n                                realMasterState: writeDocToDocState(masterState),\n                                newDocumentState: ensureNotFalsy(row.assumedMasterState)\n                            }, 'rxStorageInstanceToReplicationHandler-masterWrite')).isEqual === true\n                        ) {\n                            writeRows.push({\n                                previous: masterState,\n                                document: docStateToWriteDoc(hashFunction, row.newDocumentState, masterState)\n                            });\n                        } else {\n                            conflicts.push(writeDocToDocState(masterState));\n                        }\n                    })\n            );\n\n\n            if (writeRows.length > 0) {\n                const result = await instance.bulkWrite(\n                    writeRows,\n                    'replication-master-write'\n                );\n                Object\n                    .values(result.error)\n                    .forEach(err => {\n                        if (err.status !== 409) {\n                            throw new Error('non conflict error');\n                        } else {\n                            conflicts.push(\n                                writeDocToDocState(ensureNotFalsy(err.documentInDb))\n                            );\n                        }\n                    });\n            }\n            return conflicts;\n        }\n    };\n\n    return replicationHandler;\n}\n\n\nexport async function cancelRxStorageReplication(\n    replicationState: RxStorageInstanceReplicationState<any>\n): Promise<void> {\n    replicationState.events.canceled.next(true);\n\n    await replicationState.streamQueue.down;\n    await replicationState.streamQueue.up;\n    await replicationState.checkpointQueue;\n\n    replicationState.events.active.up.complete();\n    replicationState.events.active.down.complete();\n    replicationState.events.processed.up.complete();\n    replicationState.events.processed.down.complete();\n    replicationState.events.resolvedConflicts.complete();\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAGA,SACIA,eADJ,EAEIC,aAFJ,EAGIC,MAHJ,EAIIC,cAJJ,EAKIC,GALJ,EAMIC,OANJ,QAOO,MAPP;AAQA,SACIC,2BADJ,QAEO,qBAFP;AAgBA,SACIC,cADJ,EAEIC,SAFJ,EAGIC,oBAHJ,QAIO,SAJP;AAKA,SACIC,gBADJ,QAEO,cAFP;AAGA,SAASC,0BAAT,QAA2C,cAA3C;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,UAAvD;AACA,SAASC,wBAAT,QAAyC,YAAzC;;AAFO,iBAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;EAC3C,IAAI,CAACF,IAAI,CAACG,CAAV,EAAa;IACZ,IAAID,KAAK,iBAAT,EAA4B;MAC3B,IAAIA,KAAK,CAACC,CAAV,EAAa;QACZ,IAAIF,KAAK,GAAG,CAAZ,EAAe;UACdA,KAAK,GAAGC,KAAK,CAACC,CAAd;QACA;;QACDD,KAAK,GAAGA,KAAK,CAACE,CAAd;MACA,CALD,MAKO;QACNF,KAAK,CAACG,CAAN,GAAU,QAAQC,IAAR,CAAa,IAAb,EAAmBN,IAAnB,EAAyBC,KAAzB,CAAV;QACA;MACA;IACD;;IACD,IAAIC,KAAK,IAAIA,KAAK,CAACK,IAAnB,EAAyB;MACxBL,KAAK,CAACK,IAAN,CAAW,QAAQD,IAAR,CAAa,IAAb,EAAmBN,IAAnB,EAAyBC,KAAzB,CAAX,EAA4C,QAAQK,IAAR,CAAa,IAAb,EAAmBN,IAAnB,EAAyB,CAAzB,CAA5C;MACA;IACA;;IACDA,IAAI,CAACG,CAAL,GAASF,KAAT;IACAD,IAAI,CAACI,CAAL,GAASF,KAAT;IACA,MAAMM,QAAQ,GAAGR,IAAI,CAACK,CAAtB;;IACA,IAAIG,QAAJ,EAAc;MACbA,QAAQ,CAACR,IAAD,CAAR;IACA;EACD;AACD;;AA9DM,IAAM,QAAQ,aAAc,YAAW;EAC7C,iBAAiB,CAAE;;EACnB,MAAMS,SAAN,CAAgBF,IAAhB,GAAuB,UAASG,WAAT,EAAsBC,UAAtB,EAAkC;IACxD,IAAMC,MAAM,GAAG,WAAf;IACA,IAAMX,KAAK,GAAG,KAAKE,CAAnB;;IACA,IAAIF,KAAJ,EAAW;MACV,IAAMY,QAAQ,GAAGZ,KAAK,GAAG,CAAR,GAAYS,WAAZ,GAA0BC,UAA3C;;MACA,IAAIE,QAAJ,EAAc;QACb,IAAI;UACH,QAAQD,MAAR,EAAgB,CAAhB,EAAmBC,QAAQ,CAAC,KAAKT,CAAN,CAA3B;QACA,CAFD,CAEE,OAAOU,CAAP,EAAU;UACX,QAAQF,MAAR,EAAgB,CAAhB,EAAmBE,CAAnB;QACA;;QACD,OAAOF,MAAP;MACA,CAPD,MAOO;QACN,OAAO,IAAP;MACA;IACD;;IACD,KAAKP,CAAL,GAAS,UAASU,KAAT,EAAgB;MACxB,IAAI;QACH,IAAMb,KAAK,GAAGa,KAAK,CAACX,CAApB;;QACA,IAAIW,KAAK,CAACZ,CAAN,GAAU,CAAd,EAAiB;UAChB,QAAQS,MAAR,EAAgB,CAAhB,EAAmBF,WAAW,GAAGA,WAAW,CAACR,KAAD,CAAd,GAAwBA,KAAtD;QACA,CAFD,MAEO,IAAIS,UAAJ,EAAgB;UACtB,QAAQC,MAAR,EAAgB,CAAhB,EAAmBD,UAAU,CAACT,KAAD,CAA7B;QACA,CAFM,MAEA;UACN,QAAQU,MAAR,EAAgB,CAAhB,EAAmBV,KAAnB;QACA;MACD,CATD,CASE,OAAOY,CAAP,EAAU;QACX,QAAQF,MAAR,EAAgB,CAAhB,EAAmBE,CAAnB;MACA;IACD,CAbD;;IAcA,OAAOF,MAAP;EACA,CA/BD;;EAgCA;AACA,CAnCiC,EAA3B;;AAgEA,wBAAwBI,QAAxB,EAAkC;EACxC,OAAOA,QAAQ,iBAAR,IAA6BA,QAAQ,CAACb,CAAT,GAAa,CAAjD;AACA;;AA4LM,cAAcc,IAAd,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;EACxC,IAAIC,KAAJ;;EACA,SAAS;IACR,IAAIC,cAAc,GAAGJ,IAAI,EAAzB;;IACA,IAAI,eAAeI,cAAf,CAAJ,EAAoC;MACnCA,cAAc,GAAGA,cAAc,CAACjB,CAAhC;IACA;;IACD,IAAI,CAACiB,cAAL,EAAqB;MACpB,OAAOT,MAAP;IACA;;IACD,IAAIS,cAAc,CAACd,IAAnB,EAAyB;MACxBa,KAAK,GAAG,CAAR;MACA;IACA;;IACD,IAAIR,MAAM,GAAGO,IAAI,EAAjB;;IACA,IAAIP,MAAM,IAAIA,MAAM,CAACL,IAArB,EAA2B;MAC1B,IAAI,eAAeK,MAAf,CAAJ,EAA4B;QAC3BA,MAAM,GAAGA,MAAM,CAACT,CAAhB;MACA,CAFD,MAEO;QACNiB,KAAK,GAAG,CAAR;QACA;MACA;IACD;;IACD,IAAIF,MAAJ,EAAY;MACX,IAAII,WAAW,GAAGJ,MAAM,EAAxB;;MACA,IAAII,WAAW,IAAIA,WAAW,CAACf,IAA3B,IAAmC,CAAC,eAAee,WAAf,CAAxC,EAAqE;QACpEF,KAAK,GAAG,CAAR;QACA;MACA;IACD;EACD;;EACD,IAAIpB,IAAI,GAAG,WAAX;;EACA,IAAIuB,MAAM,GAAG,QAAQjB,IAAR,CAAa,IAAb,EAAmBN,IAAnB,EAAyB,CAAzB,CAAb;;EACA,CAACoB,KAAK,KAAK,CAAV,GAAcC,cAAc,CAACd,IAAf,CAAoBiB,gBAApB,CAAd,GAAsDJ,KAAK,KAAK,CAAV,GAAcR,MAAM,CAACL,IAAP,CAAYkB,gBAAZ,CAAd,GAA8CH,WAAW,CAACf,IAAZ,CAAiBmB,kBAAjB,CAArG,EAA2InB,IAA3I,CAAgJ,KAAK,CAArJ,EAAwJgB,MAAxJ;EACA,OAAOvB,IAAP;;EACA,SAASyB,gBAAT,CAA0BvB,KAA1B,EAAiC;IAChCU,MAAM,GAAGV,KAAT;;IACA,GAAG;MACF,IAAIgB,MAAJ,EAAY;QACXI,WAAW,GAAGJ,MAAM,EAApB;;QACA,IAAII,WAAW,IAAIA,WAAW,CAACf,IAA3B,IAAmC,CAAC,eAAee,WAAf,CAAxC,EAAqE;UACpEA,WAAW,CAACf,IAAZ,CAAiBmB,kBAAjB,EAAqCnB,IAArC,CAA0C,KAAK,CAA/C,EAAkDgB,MAAlD;UACA;QACA;MACD;;MACDF,cAAc,GAAGJ,IAAI,EAArB;;MACA,IAAI,CAACI,cAAD,IAAoB,eAAeA,cAAf,KAAkC,CAACA,cAAc,CAACjB,CAA1E,EAA8E;QAC7E,QAAQJ,IAAR,EAAc,CAAd,EAAiBY,MAAjB;;QACA;MACA;;MACD,IAAIS,cAAc,CAACd,IAAnB,EAAyB;QACxBc,cAAc,CAACd,IAAf,CAAoBiB,gBAApB,EAAsCjB,IAAtC,CAA2C,KAAK,CAAhD,EAAmDgB,MAAnD;QACA;MACA;;MACDX,MAAM,GAAGO,IAAI,EAAb;;MACA,IAAI,eAAeP,MAAf,CAAJ,EAA4B;QAC3BA,MAAM,GAAGA,MAAM,CAACR,CAAhB;MACA;IACD,CArBD,QAqBS,CAACQ,MAAD,IAAW,CAACA,MAAM,CAACL,IArB5B;;IAsBAK,MAAM,CAACL,IAAP,CAAYkB,gBAAZ,EAA8BlB,IAA9B,CAAmC,KAAK,CAAxC,EAA2CgB,MAA3C;EACA;;EACD,SAASC,gBAAT,CAA0BH,cAA1B,EAA0C;IACzC,IAAIA,cAAJ,EAAoB;MACnBT,MAAM,GAAGO,IAAI,EAAb;;MACA,IAAIP,MAAM,IAAIA,MAAM,CAACL,IAArB,EAA2B;QAC1BK,MAAM,CAACL,IAAP,CAAYkB,gBAAZ,EAA8BlB,IAA9B,CAAmC,KAAK,CAAxC,EAA2CgB,MAA3C;MACA,CAFD,MAEO;QACNE,gBAAgB,CAACb,MAAD,CAAhB;MACA;IACD,CAPD,MAOO;MACN,QAAQZ,IAAR,EAAc,CAAd,EAAiBY,MAAjB;IACA;EACD;;EACD,SAASc,kBAAT,GAA8B;IAC7B,IAAIL,cAAc,GAAGJ,IAAI,EAAzB,EAA6B;MAC5B,IAAII,cAAc,CAACd,IAAnB,EAAyB;QACxBc,cAAc,CAACd,IAAf,CAAoBiB,gBAApB,EAAsCjB,IAAtC,CAA2C,KAAK,CAAhD,EAAmDgB,MAAnD;MACA,CAFD,MAEO;QACNC,gBAAgB,CAACH,cAAD,CAAhB;MACA;IACD,CAND,MAMO;MACN,QAAQrB,IAAR,EAAc,CAAd,EAAiBY,MAAjB;IACA;EACD;AACD;;AA9DD,WAAsBe,0BAAtB,YAAsBA,0BAAtB,CACIC,gBADJ;EAAA,IAEiB;IACbA,gBAAgB,CAACC,MAAjB,CAAwBC,QAAxB,CAAiCC,IAAjC,CAAsC,IAAtC;IADa,uBAGPH,gBAAgB,CAACI,WAAjB,CAA6BC,IAHtB;MAAA,uBAIPL,gBAAgB,CAACI,WAAjB,CAA6BE,EAJtB;QAAA,uBAKPN,gBAAgB,CAACO,eALV;UAObP,gBAAgB,CAACC,MAAjB,CAAwBO,MAAxB,CAA+BF,EAA/B,CAAkCG,QAAlC;UACAT,gBAAgB,CAACC,MAAjB,CAAwBO,MAAxB,CAA+BH,IAA/B,CAAoCI,QAApC;UACAT,gBAAgB,CAACC,MAAjB,CAAwBS,SAAxB,CAAkCJ,EAAlC,CAAqCG,QAArC;UACAT,gBAAgB,CAACC,MAAjB,CAAwBS,SAAxB,CAAkCL,IAAlC,CAAuCI,QAAvC;UACAT,gBAAgB,CAACC,MAAjB,CAAwBU,iBAAxB,CAA0CF,QAA1C;QAXa;MAAA;IAAA;EAYhB,CAdD;IAAA;EAAA;AAAA;AAhJA,WAAsBG,6BAAtB,YAAsBA,6BAAtB,CACIvC,KADJ;EAAA,IAEE;IAAA,uBACQwC,oCAAoC,CAACxC,KAAD,CAD5C;MAAA;MAAA;QAAA;MAAA,uBAEe;QACT,yBAAqBA,KAAK,CAAC+B,WAA3B;QAAA,IAAQC,IAAR,sBAAQA,IAAR;QAAA,IAAcC,EAAd,sBAAcA,EAAd;QADS,uBAEHQ,OAAO,CAACC,GAAR,CAAY,CACdT,EADc,EAEdD,IAFc,CAAZ,CAFG;UAAA,IAYLA,IAAI,KAAKhC,KAAK,CAAC+B,WAAN,CAAkBC,IAA3B,IACAC,EAAE,KAAKjC,KAAK,CAAC+B,WAAN,CAAkBE,EAbpB;YAAA;UAAA;QAAA;QAMT;AACR;AACA;AACA;AACA;MAOK,CAnBH;IAAA;EAoBD,CAtBD;IAAA;EAAA;AAAA;AAzFA,cAAc,cAAd;AACA,cAAc,cAAd;AACA,cAAc,YAAd;AACA,cAAc,iBAAd;AACA,cAAc,aAAd;AACA,cAAc,UAAd;AAGA,OAAO,SAASU,0BAAT,CACHC,KADG,EAEyC;EAC5C,IAAMC,aAAa,GAAGnD,gBAAgB,CAACkD,KAAD,CAAtC;EACA,IAAM5C,KAAmD,GAAG;IACxD8C,WAAW,EAAExD,2BAA2B,CAACsD,KAAK,CAACG,YAAN,CAAmBC,MAAnB,CAA0BC,UAA3B,CADgB;IAExDL,KAAK,EAALA,KAFwD;IAGxDC,aAAa,EAAbA,aAHwD;IAIxDK,uBAAuB,EAAE,4BAA4BL,aAJG;IAKxDjB,MAAM,EAAE;MACJC,QAAQ,EAAE,IAAI7C,eAAJ,CAA6B,KAA7B,CADN;MAEJmD,MAAM,EAAE;QACJH,IAAI,EAAE,IAAIhD,eAAJ,CAA6B,IAA7B,CADF;QAEJiD,EAAE,EAAE,IAAIjD,eAAJ,CAA6B,IAA7B;MAFA,CAFJ;MAMJqD,SAAS,EAAE;QACPL,IAAI,EAAE,IAAI3C,OAAJ,EADC;QAEP4C,EAAE,EAAE,IAAI5C,OAAJ;MAFG,CANP;MAUJiD,iBAAiB,EAAE,IAAIjD,OAAJ,EAVf;MAWJ8D,KAAK,EAAE,IAAI9D,OAAJ;IAXH,CALgD;IAkBxD+D,KAAK,EAAE;MACHpB,IAAI,EAAE;QACFqB,UAAU,EAAE,CADV;QAEFC,wBAAwB,EAAE,CAFxB;QAGFC,oBAAoB,EAAE,CAHpB;QAIFC,sBAAsB,EAAE,CAJtB;QAKFC,iBAAiB,EAAE;MALjB,CADH;MAQHxB,EAAE,EAAE;QACAyB,oBAAoB,EAAE,CADtB;QAEAC,eAAe,EAAE,CAFjB;QAGAC,6BAA6B,EAAE,CAH/B;QAIAC,2BAA2B,EAAE,CAJ7B;QAKAC,YAAY,EAAE,CALd;QAMAC,mBAAmB,EAAE;MANrB;IARD,CAlBiD;IAmCxDC,aAAa,EAAE;MACXhC,IAAI,EAAE,IAAIhD,eAAJ,CAA6B,KAA7B,CADK;MAEXiD,EAAE,EAAE,IAAIjD,eAAJ,CAA6B,KAA7B;IAFO,CAnCyC;IAuCxD+C,WAAW,EAAE;MACTC,IAAI,EAAEvC,oBADG;MAETwC,EAAE,EAAExC;IAFK,CAvC2C;IA2CxDyC,eAAe,EAAEzC,oBA3CuC;IA4CxDwE,iBAAiB,EAAE;EA5CqC,CAA5D;EA+CAtE,0BAA0B,CAACK,KAAD,CAA1B;EACAF,wBAAwB,CAACE,KAAD,CAAxB;EACA,OAAOA,KAAP;AACH;AAED,OAAO,SAASwC,oCAAT,CACHxC,KADG,EAEU;EACb,OAAOb,cAAc,CACjBF,aAAa,CAAC,CACVe,KAAK,CAACgE,aAAN,CAAoBhC,IAApB,CAAyBkC,IAAzB,CACIhF,MAAM,CAAC,UAAAiB,CAAC;IAAA,OAAI,CAAC,CAACA,CAAN;EAAA,CAAF,CADV,CADU,EAIVH,KAAK,CAACgE,aAAN,CAAoB/B,EAApB,CAAuBiC,IAAvB,CACIhF,MAAM,CAAC,UAAAiB,CAAC;IAAA,OAAI,CAAC,CAACA,CAAN;EAAA,CAAF,CADV,CAJU,CAAD,CADI,CAAd,CASLG,IATK,CASA,YAAM,CAAG,CATT,CAAP;AAUH;AAED,OAAO,SAAS6D,+BAAT,CACHxC,gBADG,EAEL;EACE,OAAOc,OAAO,CAACC,GAAR,CAAY,CACff,gBAAgB,CAACI,WAAjB,CAA6BE,EADd,EAEfN,gBAAgB,CAACI,WAAjB,CAA6BC,IAFd,CAAZ,CAAP;AAIH;AA4BD,OAAO,SAASoC,qCAAT,CACHC,QADG,EAEHC,eAFG,EAGHC,YAHG,EAIkD;EACrD,IAAMzB,WAAW,GAAGxD,2BAA2B,CAAC+E,QAAQ,CAACrB,MAAT,CAAgBC,UAAjB,CAA/C;EACA,IAAMuB,kBAAyE,GAAG;IAC9EC,mBAAmB,EAAEJ,QAAQ,CAACK,YAAT,GAAwBR,IAAxB,CACjB9E,GAAG,CAAC,UAAAuF,SAAS,EAAI;MACb,IAAMC,GAA6D,GAAG;QAClEC,UAAU,EAAEF,SAAS,CAACE,UAD4C;QAElEC,SAAS,EAAEH,SAAS,CAAC/C,MAAV,CAAiBxC,GAAjB,CAAqB,UAAA2F,KAAK,EAAI;UACrC;AACxB;AACA;AACA;AACA;AACA;AACA;UACwB,IAAIA,KAAK,CAACC,MAAN,CAAaC,GAAjB,EAAsB;YAClB,OAAOpF,kBAAkB,CAACkF,KAAK,CAACC,MAAN,CAAaC,GAAd,CAAzB;UACH,CAFD,MAEO;YACH,IAAIC,MAAM,GAAG3F,cAAc,CAACwF,KAAK,CAACC,MAAN,CAAaG,QAAd,CAA3B;;YACA,IAAIJ,KAAK,CAACC,MAAN,CAAaI,SAAb,KAA2B,QAA/B,EAAyC;cACrCF,MAAM,GAAG1F,SAAS,CAAC0F,MAAD,CAAlB;cACCA,MAAD,CAAgBG,QAAhB,GAA2B,IAA3B;YACH;;YACD,OAAOxF,kBAAkB,CAACqF,MAAD,CAAzB;UACH;QACJ,CAlBU;MAFuD,CAAtE;MAsBA,OAAON,GAAP;IACH,CAxBE,CADc,CADyD;IA4B9EU,kBA5B8E,8BA6B1ET,UA7B0E,EA8B1EU,SA9B0E,EA+B5E;MACE,OAAOlB,QAAQ,CAACmB,wBAAT,CACHD,SADG,EAEHV,UAFG,EAGLvE,IAHK,CAGA,UAAAK,MAAM,EAAI;QACb,OAAO;UACHkE,UAAU,EAAElE,MAAM,CAACmE,SAAP,CAAiBW,MAAjB,GAA0B,CAA1B,GAA8B9E,MAAM,CAACkE,UAArC,GAAkDA,UAD3D;UAEHC,SAAS,EAAEnE,MAAM,CAACmE,SAAP,CAAiB1F,GAAjB,CAAqB,UAAAsG,CAAC;YAAA,OAAI7F,kBAAkB,CAAC6F,CAAD,CAAtB;UAAA,CAAtB;QAFR,CAAP;MAIH,CARM,CAAP;IASH,CAzC6E;IA0CxEC,WA1CwE,uBA2C1EC,IA3C0E;MAAA,IA4C5E;QACE,IAAMC,OAAuD,GAAG,EAAhE;QACAD,IAAI,CAACE,OAAL,CAAa,UAAAC,GAAG,EAAI;UAChB,IAAMC,KAAa,GAAID,GAAG,CAACE,gBAAL,CAA8BnD,WAA9B,CAAtB;UACA+C,OAAO,CAACG,KAAD,CAAP,GAAiBD,GAAjB;QACH,CAHD;QAIA,IAAMG,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYP,OAAZ,CAAZ;QANF,uBAQgCxB,QAAQ,CAACgC,iBAAT,CAC1BH,GAD0B,EAE1B,IAF0B,CARhC,iBAQQI,eARR;UAYE,IAAMC,SAAmC,GAAG,EAA5C;UACA,IAAMC,SAAoC,GAAG,EAA7C;UAbF,uBAcQ/D,OAAO,CAACC,GAAR,CACFyD,MAAM,CAACM,OAAP,CAAeZ,OAAf,EACKzG,GADL;YAAA,IAC8B;cAAA,IAAbsH,EAAa;cAAA,IAATX,GAAS;cACtB,IAAMY,WAAW,GAAGL,eAAe,CAACI,EAAD,CAAnC;;cADsB;gBAAA,IAElB,CAACC,WAFiB;kBAGlBH,SAAS,CAACI,IAAV,CAAe;oBACXC,QAAQ,EAAEjH,kBAAkB,CAAC2E,YAAD,EAAewB,GAAG,CAACE,gBAAnB;kBADjB,CAAf;gBAHkB;kBAAA;oBAAA,IAOlBU,WAAW,IACX,CAACZ,GAAG,CAACe,kBARa;sBAUlBP,SAAS,CAACK,IAAV,CAAe/G,kBAAkB,CAAC8G,WAAD,CAAjC;oBAVkB,8BAYXrC,eAAe,CAAC;sBACnByC,eAAe,EAAElH,kBAAkB,CAAC8G,WAAD,CADhB;sBAEnBV,gBAAgB,EAAE1G,cAAc,CAACwG,GAAG,CAACe,kBAAL;oBAFb,CAAD,EAGnB,mDAHmB,CAZJ;sBAAA,IAYlB,iBAGyDE,OAHzD,KAGqE,IAfnD;wBAiBlBR,SAAS,CAACI,IAAV,CAAe;0BACXzB,QAAQ,EAAEwB,WADC;0BAEXE,QAAQ,EAAEjH,kBAAkB,CAAC2E,YAAD,EAAewB,GAAG,CAACE,gBAAnB,EAAqCU,WAArC;wBAFjB,CAAf;sBAjBkB;wBAsBlBJ,SAAS,CAACK,IAAV,CAAe/G,kBAAkB,CAAC8G,WAAD,CAAjC;sBAtBkB;oBAAA;kBAAA;;kBAAA;gBAAA;cAAA;;cAAA;YAwBzB,CAzBL;cAAA;YAAA;UAAA,EADE,CAdR;YAAA;cAAA,IA4CMH,SAAS,CAACf,MAAV,GAAmB,CA5CzB;gBAAA,uBA6C2BpB,QAAQ,CAAC4C,SAAT,CACjBT,SADiB,EAEjB,0BAFiB,CA7C3B,iBA6CY7F,MA7CZ;kBAiDMwF,MAAM,CACDe,MADL,CACYvG,MAAM,CAACwC,KADnB,EAEK2C,OAFL,CAEa,UAAAqB,GAAG,EAAI;oBACZ,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;sBACpB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;oBACH,CAFD,MAEO;sBACHd,SAAS,CAACK,IAAV,CACI/G,kBAAkB,CAACN,cAAc,CAAC4H,GAAG,CAACG,YAAL,CAAf,CADtB;oBAGH;kBACJ,CAVL;gBAjDN;cAAA;YAAA;;YAAA;cA6DE,OAAOf,SAAP;YA7DF,KA6DSA,SA7DT;UAAA;QAAA;MA8DD,CA1G6E;QAAA;MAAA;IAAA;EAAA,CAAlF;EA6GA,OAAO/B,kBAAP;AACH"}