{"version":3,"file":"downstream.js","names":["firstValueFrom","filter","stackCheckpoints","createRevision","ensureNotFalsy","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","getLastCheckpointDoc","setCheckpoint","writeDocToDocState","getAssumedMasterState","getMetaWriteRow","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","startReplicationDownstream","downstreamResyncOnce","stats","down","events","canceled","getValue","checkpointQueue","lastCheckpoint","Promise","all","promises","firstSyncDone","next","lastTimeMasterChangesRequested","timer","replicationHandler","masterChangesSince","input","pullBatchSize","downResult","documents","length","checkpoint","push","persistFromMaster","openTasks","addNewTask","task","taskWithTime","time","streamQueue","useTasks","active","shift","downstreamProcessChanges","sub","masterChangeStream$","subscribe","masterChangeStreamEmit","pipe","unsubscribe","tasks","docsOfAllTasks","forEach","Error","concat","persistenceQueue","nonPersistedFromMaster","docs","docData","docId","primaryPath","downDocsById","useCheckpoint","docIds","Object","keys","writeRowsToFork","writeRowsToForkById","writeRowsToMeta","useMetaWriteRows","forkInstance","findDocumentsById","currentForkState","assumedMasterState","map","forkStateFullDoc","forkStateDocData","undefined","masterState","assumedMaster","metaDocument","isResolvedConflict","_rev","isAssumedMasterEqualToForkStatePromise","conflictHandler","realMasterState","newDocumentState","r","isEqual","isAssumedMasterEqualToForkState","areStatesExactlyEqualPromise","areStatesExactlyEqual","newForkState","assign","_meta","_attachments","lwt","hashFunction","forkWriteRow","previous","document","bulkWrite","downstreamBulkWriteFlag","forkWriteResult","success","processed","metaInstance","unhandledError","error"],"sources":["../../../src/replication-protocol/downstream.ts"],"sourcesContent":["import {\n    firstValueFrom,\n    filter\n} from 'rxjs';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxStorageInstanceReplicationState,\n    BulkWriteRow,\n    BulkWriteRowById,\n    RxStorageReplicationMeta,\n    RxDocumentData,\n    ById,\n    WithDeleted,\n    DocumentsWithCheckpoint\n} from '../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from '../util';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all documents from the master to the fork.\n * The downstream has two operation modes\n * - Sync by iterating over the checkpoints via downstreamResyncOnce()\n * - Sync by listening to the changestream via downstreamProcessChanges()\n * We need this to be able to do initial syncs\n * and still can have fast event based sync when the client is not offline.\n */\nexport function startReplicationDownstream<RxDocType, CheckpointType = any>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    const replicationHandler = state.input.replicationHandler;\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n\n\n    type Task = DocumentsWithCheckpoint<RxDocType, any> | 'RESYNC';\n    type TaskWithTime = {\n        time: number;\n        task: Task;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    function addNewTask(task: Task): void {\n        state.stats.down.addNewTask = state.stats.down.addNewTask + 1;\n        const taskWithTime = {\n            time: timer++,\n            task\n        };\n        openTasks.push(taskWithTime);\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => {\n                const useTasks: Task[] = [];\n                while (openTasks.length > 0) {\n                    state.events.active.down.next(true);\n                    const taskWithTime = ensureNotFalsy(openTasks.shift());\n\n                    /**\n                     * If the task came in before the last time we started the pull \n                     * from the master, then we can drop the task.\n                     */\n                    if (taskWithTime.time < lastTimeMasterChangesRequested) {\n                        continue;\n                    }\n\n                    if (taskWithTime.task === 'RESYNC') {\n                        if (useTasks.length === 0) {\n                            useTasks.push(taskWithTime.task);\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    useTasks.push(taskWithTime.task);\n                }\n\n                if (useTasks.length === 0) {\n                    state.events.active.down.next(false);\n                    return;\n                }\n\n                if (useTasks[0] === 'RESYNC') {\n                    return downstreamResyncOnce();\n                } else {\n                    return downstreamProcessChanges(useTasks);\n                }\n            });\n    }\n    addNewTask('RESYNC');\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     */\n    const sub = replicationHandler\n        .masterChangeStream$\n        .subscribe((task: Task) => {\n            state.stats.down.masterChangeStreamEmit = state.stats.down.masterChangeStreamEmit + 1;\n            addNewTask(task);\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let lastTimeMasterChangesRequested: number = -1;\n    async function downstreamResyncOnce() {\n        state.stats.down.downstreamResyncOnce = state.stats.down.downstreamResyncOnce + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'down'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            lastTimeMasterChangesRequested = timer++;\n            const downResult = await replicationHandler.masterChangesSince(\n                lastCheckpoint,\n                state.input.pullBatchSize\n            );\n\n            if (downResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, downResult.checkpoint]);\n            promises.push(\n                persistFromMaster(\n                    downResult.documents,\n                    lastCheckpoint\n                )\n            );\n        }\n        return Promise.all(promises)\n            .then(() => {\n                if (!state.firstSyncDone.down.getValue()) {\n                    state.firstSyncDone.down.next(true);\n                }\n            });\n    }\n\n\n    function downstreamProcessChanges(tasks: Task[]) {\n        state.stats.down.downstreamProcessChanges = state.stats.down.downstreamProcessChanges + 1;\n        let docsOfAllTasks: WithDeleted<RxDocType>[] = [];\n        let lastCheckpoint: CheckpointType | undefined = null as any;\n\n        tasks.forEach(task => {\n            if (task === 'RESYNC') {\n                throw new Error('SNH');\n            }\n            docsOfAllTasks = docsOfAllTasks.concat(task.documents);\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, task.checkpoint]);\n        });\n        return persistFromMaster(\n            docsOfAllTasks,\n            ensureNotFalsy(lastCheckpoint)\n        );\n    }\n\n\n    /**\n     * It can happen that the calls to masterChangesSince() or the changeStream()\n     * are way faster then how fast the documents can be persisted.\n     * Therefore we merge all incoming downResults into the nonPersistedFromMaster object\n     * and process them together if possible.\n     * This often bundles up single writes and improves performance\n     * by processing the documents in bulks.\n     */\n    let persistenceQueue = PROMISE_RESOLVE_VOID;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<WithDeleted<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    function persistFromMaster(\n        docs: WithDeleted<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<void> {\n        state.stats.down.persistFromMaster = state.stats.down.persistFromMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistend list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n\n        /**\n         * Run in the queue\n         * with all open documents from nonPersistedFromMaster.\n         */\n        persistenceQueue = persistenceQueue.then(() => {\n            const downDocsById: ById<WithDeleted<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(downDocsById);\n\n            if (\n                state.events.canceled.getValue() ||\n                docIds.length === 0\n            ) {\n                return PROMISE_RESOLVE_VOID;\n            }\n\n            const writeRowsToFork: BulkWriteRow<RxDocType>[] = [];\n            const writeRowsToForkById: ById<BulkWriteRow<RxDocType>> = {};\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const useMetaWriteRows: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n            return Promise.all([\n                state.input.forkInstance.findDocumentsById(docIds, true),\n                getAssumedMasterState(\n                    state,\n                    docIds\n                )\n            ]).then(([\n                currentForkState,\n                assumedMasterState\n            ]) => {\n                return Promise.all(\n                    docIds.map(async (docId) => {\n                        const forkStateFullDoc: RxDocumentData<RxDocType> | undefined = currentForkState[docId];\n                        const forkStateDocData: WithDeleted<RxDocType> | undefined = forkStateFullDoc ? writeDocToDocState(forkStateFullDoc) : undefined;\n                        const masterState = downDocsById[docId];\n                        const assumedMaster = assumedMasterState[docId];\n\n                        if (\n                            assumedMaster &&\n                            assumedMaster.metaDocument.isResolvedConflict === forkStateFullDoc._rev\n                        ) {\n                            /**\n                             * The current fork state represents a resolved conflict\n                             * that first must be send to the master in the upstream.\n                             * All conflicts are resolved by the upstream.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n\n                        const isAssumedMasterEqualToForkStatePromise = !assumedMaster || !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: assumedMaster.docData,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-0').then(r => r.isEqual);\n                        const isAssumedMasterEqualToForkState = await isAssumedMasterEqualToForkStatePromise;\n                        if (\n                            (\n                                forkStateFullDoc &&\n                                assumedMaster &&\n                                isAssumedMasterEqualToForkState === false\n                            ) ||\n                            (\n                                forkStateFullDoc && !assumedMaster\n                            )\n                        ) {\n                            /**\n                             * We have a non-upstream-replicated\n                             * local write to the fork.\n                             * This means we ignore the downstream of this document\n                             * because anyway the upstream will first resolve the conflict.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n\n                        const areStatesExactlyEqualPromise = !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: masterState,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-1').then(r => r.isEqual);\n                        const areStatesExactlyEqual = await areStatesExactlyEqualPromise;\n\n                        if (\n                            forkStateDocData &&\n                            areStatesExactlyEqual\n                        ) {\n                            /**\n                             * Document states are exactly equal.\n                             * This can happen when the replication is shut down\n                             * unexpected like when the user goes offline.\n                             * \n                             * Only when the assumedMaster is different from the forkState,\n                             * we have to patch the document in the meta instance.\n                             */\n                            if (\n                                !assumedMaster ||\n                                isAssumedMasterEqualToForkState === false\n                            ) {\n                                useMetaWriteRows.push(\n                                    getMetaWriteRow(\n                                        state,\n                                        forkStateDocData,\n                                        assumedMaster ? assumedMaster.metaDocument : undefined\n                                    )\n                                );\n                            }\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        /**\n                         * All other master states need to be written to the forkInstance\n                         * and metaInstance.\n                         */\n                        const newForkState = Object.assign(\n                            {},\n                            masterState,\n                            forkStateFullDoc ? {\n                                _meta: flatClone(forkStateFullDoc._meta),\n                                _attachments: {},\n                                _rev: getDefaultRevision()\n                            } : {\n                                _meta: getDefaultRxDocumentMeta(),\n                                _rev: getDefaultRevision(),\n                                _attachments: {}\n                            });\n                        newForkState._meta.lwt = now();\n                        newForkState._rev = (masterState as any)._rev ? (masterState as any)._rev : createRevision(\n                            state.input.hashFunction,\n                            newForkState,\n                            forkStateFullDoc\n                        );\n                        const forkWriteRow = {\n                            previous: forkStateFullDoc,\n                            document: newForkState\n                        };\n                        writeRowsToFork.push(forkWriteRow);\n                        writeRowsToForkById[docId] = forkWriteRow;\n                        writeRowsToMeta[docId] = getMetaWriteRow(\n                            state,\n                            masterState,\n                            assumedMaster ? assumedMaster.metaDocument : undefined\n                        );\n                    })\n                );\n            }).then(() => {\n                if (writeRowsToFork.length > 0) {\n                    return state.input.forkInstance.bulkWrite(\n                        writeRowsToFork,\n                        state.downstreamBulkWriteFlag\n                    ).then((forkWriteResult) => {\n                        Object.keys(forkWriteResult.success).forEach((docId) => {\n                            state.events.processed.down.next(writeRowsToForkById[docId]);\n                            useMetaWriteRows.push(writeRowsToMeta[docId]);\n                        });\n                    });\n                }\n            }).then(() => {\n                if (useMetaWriteRows.length > 0) {\n                    return state.input.metaInstance.bulkWrite(\n                        useMetaWriteRows,\n                        'replication-down-write-meta'\n                    );\n                }\n            }).then(() => {\n                /**\n                 * For better performance we do not await checkpoint writes,\n                 * but to ensure order on parrallel checkpoint writes,\n                 * we have to use a queue.\n                 */\n                state.checkpointQueue = state.checkpointQueue.then(() => setCheckpoint(\n                    state,\n                    'down',\n                    useCheckpoint\n                ));\n            });\n        }).catch(unhandledError => state.events.error.next(unhandledError));\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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"}