{"version":3,"file":"meta-instance.js","names":["fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","flatCloneDocWithMeta","getDefaultRevision","createRevision","now","RX_REPLICATION_META_INSTANCE_SCHEMA","primaryKey","key","fields","separator","type","version","additionalProperties","properties","id","minLength","maxLength","replicationIdentifier","isCheckpoint","itemId","data","isResolvedConflict","required","getAssumedMasterState","state","docIds","input","metaInstance","findDocumentsById","map","docId","useId","checkpointKey","then","metaDocs","ret","Object","values","forEach","metaDoc","docData","metaDocument","getMetaWriteRow","newMasterDocState","previous","primaryPath","newMeta","_attachments","_deleted","_rev","_meta","lwt","hashFunction","document"],"sources":["../../../src/replication-protocol/meta-instance.ts"],"sourcesContent":["import {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from '../rx-schema-helper';\nimport { flatCloneDocWithMeta } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport { getDefaultRevision, createRevision, now } from '../util';\n\nexport const RX_REPLICATION_META_INSTANCE_SCHEMA: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta>> = fillWithDefaultSettings({\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'replicationIdentifier',\n            'itemId',\n            'isCheckpoint'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    version: 0,\n    additionalProperties: false,\n    properties: {\n        id: {\n            type: 'string',\n            minLength: 1,\n            maxLength: 100\n        },\n        replicationIdentifier: {\n            type: 'string'\n        },\n        isCheckpoint: {\n            type: 'string',\n            enum: [\n                '0',\n                '1'\n            ],\n            maxLength: 1\n        },\n        itemId: {\n            type: 'string'\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        },\n        isResolvedConflict: {\n            type: 'string'\n        }\n    },\n    required: [\n        'id',\n        'replicationIdentifier',\n        'isCheckpoint',\n        'itemId',\n        'data'\n    ]\n});\n\n\n/**\n * Returns the document states of what the fork instance\n * assumes to be the latest state on the master instance.\n */\nexport function getAssumedMasterState<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    docIds: string[]\n): Promise<ById<{\n    docData: WithDeleted<RxDocType>;\n    metaDocument: RxDocumentData<RxStorageReplicationMeta>\n}>> {\n    return state.input.metaInstance.findDocumentsById(\n        docIds.map(docId => {\n            const useId = getComposedPrimaryKeyOfDocumentData(\n                RX_REPLICATION_META_INSTANCE_SCHEMA,\n                {\n                    itemId: docId,\n                    replicationIdentifier: state.checkpointKey,\n                    isCheckpoint: '0'\n                }\n            );\n            return useId;\n        }),\n        true\n    ).then(metaDocs => {\n        const ret: {\n            [docId: string]: {\n                docData: RxDocumentData<RxDocType>;\n                metaDocument: RxDocumentData<RxStorageReplicationMeta>\n            }\n        } = {};\n        Object\n            .values(metaDocs)\n            .forEach((metaDoc) => {\n                ret[metaDoc.itemId] = {\n                    docData: metaDoc.data,\n                    metaDocument: metaDoc\n                };\n            });\n\n        return ret;\n    });\n}\n\n\nexport function getMetaWriteRow<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    newMasterDocState: WithDeleted<RxDocType>,\n    previous?: RxDocumentData<RxStorageReplicationMeta>,\n    isResolvedConflict?: string\n): BulkWriteRow<RxStorageReplicationMeta> {\n    const docId: string = (newMasterDocState as any)[state.primaryPath];\n    const newMeta: RxDocumentData<RxStorageReplicationMeta> = previous ? flatCloneDocWithMeta(\n        previous\n    ) : {\n        id: '',\n        replicationIdentifier: state.checkpointKey,\n        isCheckpoint: '0',\n        itemId: docId,\n        data: newMasterDocState,\n        _attachments: {},\n        _deleted: false,\n        _rev: getDefaultRevision(),\n        _meta: {\n            lwt: 0\n        }\n    };\n    newMeta.data = newMasterDocState;\n    newMeta.isResolvedConflict = isResolvedConflict;\n    newMeta._meta.lwt = now();\n    newMeta.id = getComposedPrimaryKeyOfDocumentData(\n        RX_REPLICATION_META_INSTANCE_SCHEMA,\n        newMeta\n    );\n    newMeta._rev = createRevision(\n        state.input.hashFunction,\n        newMeta,\n        previous\n    );\n    return {\n        previous,\n        document: newMeta\n    };\n}\n"],"mappings":"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"}