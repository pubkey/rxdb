{"version":3,"file":"custom-index.js","names":["getSchemaByObjectPath","ensureNotFalsy","objectPathMonad","INDEX_MAX","INDEX_MIN","getIndexableStringMonad","schema","index","fieldNameProperties","map","fieldName","schemaPart","type","parsedLengths","getStringLengthOfIndexNumber","hasComplexPath","includes","getValueFn","ret","docData","str","forEach","props","fieldValue","padEnd","maxLength","boolToStr","getNumberIndexString","minimum","Math","floor","maximum","ceil","multipleOf","valueSpan","nonDecimals","toString","length","multipleOfParts","split","decimals","roundedMinimum","nonDecimalsValueAsString","padStart","splitByDecimalPoint","decimalValueAsString","getStartIndexStringFromLowerBound","lowerBound","inclusiveStart","idx","bound","fillChar","repeat","Error","getStartIndexStringFromUpperBound","upperBound","inclusiveEnd"],"sources":["../../src/custom-index.ts"],"sourcesContent":["/**\n * For some RxStorage implementations,\n * we need to use our custom crafted indexes\n * so we can easily iterate over them. And sort plain arrays of document data.\n */\n\nimport { getSchemaByObjectPath } from './rx-schema-helper';\nimport type {\n    JsonSchema,\n    RxDocumentData,\n    RxJsonSchema\n} from './types';\nimport {\n    ensureNotFalsy,\n    objectPathMonad,\n    ObjectPathMonadFunction\n} from './util';\nimport { INDEX_MAX, INDEX_MIN } from './query-planner';\n\n\n/**\n * Crafts an indexable string that can be used\n * to check if a document would be sorted below or above \n * another documents, dependent on the index values.\n * @monad for better performance\n * \n * IMPORTANT: Performance is really important here\n * which is why we code so 'strange'.\n * Always run performance tests when you want to\n * change something in this method.\n */\nexport function getIndexableStringMonad<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    index: string[]\n): (docData: RxDocumentData<RxDocType>) => string {\n\n    /**\n     * Prepare all relevant information\n     * outside of the returned function\n     * to save performance when the returned\n     * function is called many times.\n     */\n    const fieldNameProperties: {\n        fieldName: string;\n        schemaPart: JsonSchema;\n        /*\n         * Only in number fields.\n         */\n        parsedLengths?: ParsedLengths;\n        getValueFn: ObjectPathMonadFunction<RxDocType>;\n    }[] = index.map(fieldName => {\n        const schemaPart = getSchemaByObjectPath(\n            schema,\n            fieldName\n        );\n        const type = schemaPart.type;\n        let parsedLengths: ParsedLengths | undefined;\n        if (type === 'number' || type === 'integer') {\n            parsedLengths = getStringLengthOfIndexNumber(\n                schemaPart\n            );\n        }\n\n        return {\n            fieldName,\n            schemaPart,\n            parsedLengths,\n            hasComplexPath: fieldName.includes('.'),\n            getValueFn: objectPathMonad(fieldName)\n        }\n    });\n\n\n    const ret = function (docData: RxDocumentData<RxDocType>): string {\n        let str = '';\n        fieldNameProperties.forEach(props => {\n            const schemaPart = props.schemaPart;\n            const type = schemaPart.type;\n\n            let fieldValue = props.getValueFn(docData);\n\n            if (type === 'string') {\n                if (!fieldValue) {\n                    fieldValue = '';\n                }\n                str += fieldValue.padEnd(schemaPart.maxLength as number, ' ');\n            } else if (type === 'boolean') {\n                const boolToStr = fieldValue ? '1' : '0';\n                str += boolToStr;\n            } else {\n                const parsedLengths = ensureNotFalsy(props.parsedLengths);\n                if (!fieldValue) {\n                    fieldValue = 0;\n                }\n                str += getNumberIndexString(\n                    parsedLengths,\n                    fieldValue\n                );\n            }\n        });\n        return str;\n    }\n    return ret;\n}\n\ndeclare type ParsedLengths = {\n    nonDecimals: number;\n    decimals: number;\n    roundedMinimum: number;\n};\nexport function getStringLengthOfIndexNumber(\n    schemaPart: JsonSchema\n): ParsedLengths {\n    const minimum = Math.floor(schemaPart.minimum as number);\n    const maximum = Math.ceil(schemaPart.maximum as number);\n    const multipleOf: number = schemaPart.multipleOf as number;\n\n    const valueSpan = maximum - minimum;\n    const nonDecimals = valueSpan.toString().length;\n\n    const multipleOfParts = multipleOf.toString().split('.');\n    let decimals = 0;\n    if (multipleOfParts.length > 1) {\n        decimals = multipleOfParts[1].length;\n    }\n    return {\n        nonDecimals,\n        decimals,\n        roundedMinimum: minimum\n    };\n}\n\n\nexport function getNumberIndexString(\n    parsedLengths: ParsedLengths,\n    fieldValue: number\n): string {\n    let str: string = '';\n    const nonDecimalsValueAsString = (Math.floor(fieldValue) - parsedLengths.roundedMinimum).toString();\n    str += nonDecimalsValueAsString.padStart(parsedLengths.nonDecimals, '0');\n\n    const splitByDecimalPoint = fieldValue.toString().split('.');\n    const decimalValueAsString = splitByDecimalPoint.length > 1 ? splitByDecimalPoint[1] : '0';\n\n    str += decimalValueAsString.padEnd(parsedLengths.decimals, '0');\n    return str;\n}\n\nexport function getStartIndexStringFromLowerBound(\n    schema: RxJsonSchema<any>,\n    index: string[],\n    lowerBound: (string | boolean | number | null | undefined)[],\n    inclusiveStart: boolean\n): string {\n    let str = '';\n    index.forEach((fieldName, idx) => {\n        const schemaPart = getSchemaByObjectPath(\n            schema,\n            fieldName\n        );\n        const bound = lowerBound[idx];\n        const type = schemaPart.type;\n\n        switch (type) {\n            case 'string':\n                const maxLength = ensureNotFalsy(schemaPart.maxLength);\n                if (typeof bound === 'string') {\n                    str += (bound as string).padEnd(maxLength, ' ');\n                } else {\n                    // str += ''.padStart(maxLength, inclusiveStart ? ' ' : INDEX_MAX);\n                    str += ''.padEnd(maxLength, ' ');\n                }\n                break;\n            case 'boolean':\n                if (bound === null) {\n                    str += inclusiveStart ? '0' : INDEX_MAX;\n                } else {\n                    const boolToStr = bound ? '1' : '0';\n                    str += boolToStr;\n                }\n                break;\n            case 'number':\n            case 'integer':\n                const parsedLengths = getStringLengthOfIndexNumber(\n                    schemaPart\n                );\n                if (bound === null || bound === INDEX_MIN) {\n                    const fillChar = inclusiveStart ? '0' : INDEX_MAX;\n                    str += fillChar.repeat(parsedLengths.nonDecimals + parsedLengths.decimals);\n                } else {\n                    str += getNumberIndexString(\n                        parsedLengths,\n                        bound as number\n                    );\n                }\n                break;\n            default:\n                throw new Error('unknown index type ' + type);\n        }\n    });\n    return str;\n}\n\n\nexport function getStartIndexStringFromUpperBound(\n    schema: RxJsonSchema<any>,\n    index: string[],\n    upperBound: (string | boolean | number | null | undefined)[],\n    inclusiveEnd: boolean\n): string {\n    let str = '';\n    index.forEach((fieldName, idx) => {\n        const schemaPart = getSchemaByObjectPath(\n            schema,\n            fieldName\n        );\n        const bound = upperBound[idx];\n        const type = schemaPart.type;\n\n        switch (type) {\n            case 'string':\n                const maxLength = ensureNotFalsy(schemaPart.maxLength);\n                if (typeof bound === 'string') {\n                    str += (bound as string).padEnd(maxLength, inclusiveEnd ? INDEX_MAX : ' ');\n                } else {\n                    str += ''.padEnd(maxLength, inclusiveEnd ? INDEX_MAX : ' ');\n                }\n                break;\n            case 'boolean':\n                if (bound === null) {\n                    str += inclusiveEnd ? '0' : '1';\n                } else {\n                    const boolToStr = bound ? '1' : '0';\n                    str += boolToStr;\n                }\n                break;\n            case 'number':\n            case 'integer':\n                const parsedLengths = getStringLengthOfIndexNumber(\n                    schemaPart\n                );\n                if (bound === null || bound === INDEX_MAX) {\n                    const fillChar = inclusiveEnd ? '9' : '0';\n                    str += fillChar.repeat(parsedLengths.nonDecimals + parsedLengths.decimals);\n                } else {\n                    str += getNumberIndexString(\n                        parsedLengths,\n                        bound as number\n                    );\n                }\n                break;\n            default:\n                throw new Error('unknown index type ' + type);\n        }\n    });\n    return str;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,qBAAqB,QAAQ,oBAAoB;AAM1D,SACIC,cAAc,EACdC,eAAe,QAEZ,QAAQ;AACf,SAASC,SAAS,EAAEC,SAAS,QAAQ,iBAAiB;;AAGtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuB,CACnCC,MAA+C,EAC/CC,KAAe,EAC+B;EAE9C;AACJ;AACA;AACA;AACA;AACA;EACI,IAAMC,mBAQH,GAAGD,KAAK,CAACE,GAAG,CAAC,UAAAC,SAAS,EAAI;IACzB,IAAMC,UAAU,GAAGX,qBAAqB,CACpCM,MAAM,EACNI,SAAS,CACZ;IACD,IAAME,IAAI,GAAGD,UAAU,CAACC,IAAI;IAC5B,IAAIC,aAAwC;IAC5C,IAAID,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,SAAS,EAAE;MACzCC,aAAa,GAAGC,4BAA4B,CACxCH,UAAU,CACb;IACL;IAEA,OAAO;MACHD,SAAS,EAATA,SAAS;MACTC,UAAU,EAAVA,UAAU;MACVE,aAAa,EAAbA,aAAa;MACbE,cAAc,EAAEL,SAAS,CAACM,QAAQ,CAAC,GAAG,CAAC;MACvCC,UAAU,EAAEf,eAAe,CAACQ,SAAS;IACzC,CAAC;EACL,CAAC,CAAC;EAGF,IAAMQ,GAAG,GAAG,SAANA,GAAG,CAAaC,OAAkC,EAAU;IAC9D,IAAIC,GAAG,GAAG,EAAE;IACZZ,mBAAmB,CAACa,OAAO,CAAC,UAAAC,KAAK,EAAI;MACjC,IAAMX,UAAU,GAAGW,KAAK,CAACX,UAAU;MACnC,IAAMC,IAAI,GAAGD,UAAU,CAACC,IAAI;MAE5B,IAAIW,UAAU,GAAGD,KAAK,CAACL,UAAU,CAACE,OAAO,CAAC;MAE1C,IAAIP,IAAI,KAAK,QAAQ,EAAE;QACnB,IAAI,CAACW,UAAU,EAAE;UACbA,UAAU,GAAG,EAAE;QACnB;QACAH,GAAG,IAAIG,UAAU,CAACC,MAAM,CAACb,UAAU,CAACc,SAAS,EAAY,GAAG,CAAC;MACjE,CAAC,MAAM,IAAIb,IAAI,KAAK,SAAS,EAAE;QAC3B,IAAMc,SAAS,GAAGH,UAAU,GAAG,GAAG,GAAG,GAAG;QACxCH,GAAG,IAAIM,SAAS;MACpB,CAAC,MAAM;QACH,IAAMb,aAAa,GAAGZ,cAAc,CAACqB,KAAK,CAACT,aAAa,CAAC;QACzD,IAAI,CAACU,UAAU,EAAE;UACbA,UAAU,GAAG,CAAC;QAClB;QACAH,GAAG,IAAIO,oBAAoB,CACvBd,aAAa,EACbU,UAAU,CACb;MACL;IACJ,CAAC,CAAC;IACF,OAAOH,GAAG;EACd,CAAC;EACD,OAAOF,GAAG;AACd;AAOA,OAAO,SAASJ,4BAA4B,CACxCH,UAAsB,EACT;EACb,IAAMiB,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACnB,UAAU,CAACiB,OAAO,CAAW;EACxD,IAAMG,OAAO,GAAGF,IAAI,CAACG,IAAI,CAACrB,UAAU,CAACoB,OAAO,CAAW;EACvD,IAAME,UAAkB,GAAGtB,UAAU,CAACsB,UAAoB;EAE1D,IAAMC,SAAS,GAAGH,OAAO,GAAGH,OAAO;EACnC,IAAMO,WAAW,GAAGD,SAAS,CAACE,QAAQ,EAAE,CAACC,MAAM;EAE/C,IAAMC,eAAe,GAAGL,UAAU,CAACG,QAAQ,EAAE,CAACG,KAAK,CAAC,GAAG,CAAC;EACxD,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIF,eAAe,CAACD,MAAM,GAAG,CAAC,EAAE;IAC5BG,QAAQ,GAAGF,eAAe,CAAC,CAAC,CAAC,CAACD,MAAM;EACxC;EACA,OAAO;IACHF,WAAW,EAAXA,WAAW;IACXK,QAAQ,EAARA,QAAQ;IACRC,cAAc,EAAEb;EACpB,CAAC;AACL;AAGA,OAAO,SAASD,oBAAoB,CAChCd,aAA4B,EAC5BU,UAAkB,EACZ;EACN,IAAIH,GAAW,GAAG,EAAE;EACpB,IAAMsB,wBAAwB,GAAG,CAACb,IAAI,CAACC,KAAK,CAACP,UAAU,CAAC,GAAGV,aAAa,CAAC4B,cAAc,EAAEL,QAAQ,EAAE;EACnGhB,GAAG,IAAIsB,wBAAwB,CAACC,QAAQ,CAAC9B,aAAa,CAACsB,WAAW,EAAE,GAAG,CAAC;EAExE,IAAMS,mBAAmB,GAAGrB,UAAU,CAACa,QAAQ,EAAE,CAACG,KAAK,CAAC,GAAG,CAAC;EAC5D,IAAMM,oBAAoB,GAAGD,mBAAmB,CAACP,MAAM,GAAG,CAAC,GAAGO,mBAAmB,CAAC,CAAC,CAAC,GAAG,GAAG;EAE1FxB,GAAG,IAAIyB,oBAAoB,CAACrB,MAAM,CAACX,aAAa,CAAC2B,QAAQ,EAAE,GAAG,CAAC;EAC/D,OAAOpB,GAAG;AACd;AAEA,OAAO,SAAS0B,iCAAiC,CAC7CxC,MAAyB,EACzBC,KAAe,EACfwC,UAA4D,EAC5DC,cAAuB,EACjB;EACN,IAAI5B,GAAG,GAAG,EAAE;EACZb,KAAK,CAACc,OAAO,CAAC,UAACX,SAAS,EAAEuC,GAAG,EAAK;IAC9B,IAAMtC,UAAU,GAAGX,qBAAqB,CACpCM,MAAM,EACNI,SAAS,CACZ;IACD,IAAMwC,KAAK,GAAGH,UAAU,CAACE,GAAG,CAAC;IAC7B,IAAMrC,IAAI,GAAGD,UAAU,CAACC,IAAI;IAE5B,QAAQA,IAAI;MACR,KAAK,QAAQ;QACT,IAAMa,SAAS,GAAGxB,cAAc,CAACU,UAAU,CAACc,SAAS,CAAC;QACtD,IAAI,OAAOyB,KAAK,KAAK,QAAQ,EAAE;UAC3B9B,GAAG,IAAK8B,KAAK,CAAY1B,MAAM,CAACC,SAAS,EAAE,GAAG,CAAC;QACnD,CAAC,MAAM;UACH;UACAL,GAAG,IAAI,EAAE,CAACI,MAAM,CAACC,SAAS,EAAE,GAAG,CAAC;QACpC;QACA;MACJ,KAAK,SAAS;QACV,IAAIyB,KAAK,KAAK,IAAI,EAAE;UAChB9B,GAAG,IAAI4B,cAAc,GAAG,GAAG,GAAG7C,SAAS;QAC3C,CAAC,MAAM;UACH,IAAMuB,SAAS,GAAGwB,KAAK,GAAG,GAAG,GAAG,GAAG;UACnC9B,GAAG,IAAIM,SAAS;QACpB;QACA;MACJ,KAAK,QAAQ;MACb,KAAK,SAAS;QACV,IAAMb,aAAa,GAAGC,4BAA4B,CAC9CH,UAAU,CACb;QACD,IAAIuC,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK9C,SAAS,EAAE;UACvC,IAAM+C,QAAQ,GAAGH,cAAc,GAAG,GAAG,GAAG7C,SAAS;UACjDiB,GAAG,IAAI+B,QAAQ,CAACC,MAAM,CAACvC,aAAa,CAACsB,WAAW,GAAGtB,aAAa,CAAC2B,QAAQ,CAAC;QAC9E,CAAC,MAAM;UACHpB,GAAG,IAAIO,oBAAoB,CACvBd,aAAa,EACbqC,KAAK,CACR;QACL;QACA;MACJ;QACI,MAAM,IAAIG,KAAK,CAAC,qBAAqB,GAAGzC,IAAI,CAAC;IAAC;EAE1D,CAAC,CAAC;EACF,OAAOQ,GAAG;AACd;AAGA,OAAO,SAASkC,iCAAiC,CAC7ChD,MAAyB,EACzBC,KAAe,EACfgD,UAA4D,EAC5DC,YAAqB,EACf;EACN,IAAIpC,GAAG,GAAG,EAAE;EACZb,KAAK,CAACc,OAAO,CAAC,UAACX,SAAS,EAAEuC,GAAG,EAAK;IAC9B,IAAMtC,UAAU,GAAGX,qBAAqB,CACpCM,MAAM,EACNI,SAAS,CACZ;IACD,IAAMwC,KAAK,GAAGK,UAAU,CAACN,GAAG,CAAC;IAC7B,IAAMrC,IAAI,GAAGD,UAAU,CAACC,IAAI;IAE5B,QAAQA,IAAI;MACR,KAAK,QAAQ;QACT,IAAMa,SAAS,GAAGxB,cAAc,CAACU,UAAU,CAACc,SAAS,CAAC;QACtD,IAAI,OAAOyB,KAAK,KAAK,QAAQ,EAAE;UAC3B9B,GAAG,IAAK8B,KAAK,CAAY1B,MAAM,CAACC,SAAS,EAAE+B,YAAY,GAAGrD,SAAS,GAAG,GAAG,CAAC;QAC9E,CAAC,MAAM;UACHiB,GAAG,IAAI,EAAE,CAACI,MAAM,CAACC,SAAS,EAAE+B,YAAY,GAAGrD,SAAS,GAAG,GAAG,CAAC;QAC/D;QACA;MACJ,KAAK,SAAS;QACV,IAAI+C,KAAK,KAAK,IAAI,EAAE;UAChB9B,GAAG,IAAIoC,YAAY,GAAG,GAAG,GAAG,GAAG;QACnC,CAAC,MAAM;UACH,IAAM9B,SAAS,GAAGwB,KAAK,GAAG,GAAG,GAAG,GAAG;UACnC9B,GAAG,IAAIM,SAAS;QACpB;QACA;MACJ,KAAK,QAAQ;MACb,KAAK,SAAS;QACV,IAAMb,aAAa,GAAGC,4BAA4B,CAC9CH,UAAU,CACb;QACD,IAAIuC,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK/C,SAAS,EAAE;UACvC,IAAMgD,QAAQ,GAAGK,YAAY,GAAG,GAAG,GAAG,GAAG;UACzCpC,GAAG,IAAI+B,QAAQ,CAACC,MAAM,CAACvC,aAAa,CAACsB,WAAW,GAAGtB,aAAa,CAAC2B,QAAQ,CAAC;QAC9E,CAAC,MAAM;UACHpB,GAAG,IAAIO,oBAAoB,CACvBd,aAAa,EACbqC,KAAK,CACR;QACL;QACA;MACJ;QACI,MAAM,IAAIG,KAAK,CAAC,qBAAqB,GAAGzC,IAAI,CAAC;IAAC;EAE1D,CAAC,CAAC;EACF,OAAOQ,GAAG;AACd"}