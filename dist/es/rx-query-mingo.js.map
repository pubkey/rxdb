{"version":3,"file":"rx-query-mingo.js","names":["useOperators","OperatorType","Query","$project","$sort","$and","$not","$or","$nor","$eq","$ne","$gt","$gte","$lt","$lte","$regex","$mod","$elemMatch","$exists","$nin","$in","$size","$type","mingoInitDone","getMingoQuery","selector","PIPELINE","QUERY"],"sources":["../../src/rx-query-mingo.ts"],"sourcesContent":["import { useOperators, OperatorType } from 'mingo/core';\nimport { Query } from 'mingo/query';\nimport type { MangoQuerySelector } from './types';\nimport { $project } from 'mingo/operators/pipeline/project';\nimport { $sort } from 'mingo/operators/pipeline/sort';\nimport { $and } from 'mingo/operators/query/logical/and';\nimport { $not } from 'mingo/operators/query/logical/not';\nimport { $or } from 'mingo/operators/query/logical/or';\nimport { $nor } from 'mingo/operators/query/logical/nor';\nimport { $eq } from 'mingo/operators/query/comparison/eq';\nimport { $ne } from 'mingo/operators/query/comparison/ne';\nimport { $gt } from 'mingo/operators/query/comparison/gt';\nimport { $gte } from 'mingo/operators/query/comparison/gte';\nimport { $lt } from 'mingo/operators/query/comparison/lt';\nimport { $lte } from 'mingo/operators/query/comparison/lte';\nimport { $regex } from 'mingo/operators/query/evaluation/regex';\nimport { $mod } from 'mingo/operators/query/evaluation/mod';\nimport { $elemMatch } from 'mingo/operators/query/array/elemMatch';\nimport { $exists } from 'mingo/operators/query/element/exists';\nimport { $nin } from 'mingo/operators/query/comparison/nin';\nimport { $in } from 'mingo/operators/query/comparison/in';\nimport { $size } from 'mingo/operators/query/array/size';\nimport { $type } from 'mingo/operators/query/element/type';\n\nlet mingoInitDone = false;\n\n\n/**\n * The MongoDB query library is huge and we do not need all the operators.\n * If you add an operator here, make sure that you properly add a test in\n * the file /test/unit/rx-storage-query-correctness.test.ts\n *\n * @link https://github.com/kofrasa/mingo#es6\n */\nexport function getMingoQuery<RxDocType>(\n    selector?: MangoQuerySelector<RxDocType>\n) {\n    if (!mingoInitDone) {\n\n        useOperators(OperatorType.PIPELINE, {\n            $sort,\n            $project\n        } as any);\n        useOperators(OperatorType.QUERY, {\n            $and,\n            $eq,\n            $elemMatch,\n            $exists,\n            $gt,\n            $gte,\n            $in,\n            $lt,\n            $lte,\n            $ne,\n            $nin,\n            $mod,\n            $nor,\n            $not,\n            $or,\n            $regex,\n            $size,\n            $type,\n        } as any);\n        mingoInitDone = true;\n    }\n    return new Query(selector as any);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,YAAY,QAAQ,YAAY;AACvD,SAASC,KAAK,QAAQ,aAAa;AAEnC,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,IAAI,QAAQ,mCAAmC;AACxD,SAASC,IAAI,QAAQ,mCAAmC;AACxD,SAASC,GAAG,QAAQ,kCAAkC;AACtD,SAASC,IAAI,QAAQ,mCAAmC;AACxD,SAASC,GAAG,QAAQ,qCAAqC;AACzD,SAASC,GAAG,QAAQ,qCAAqC;AACzD,SAASC,GAAG,QAAQ,qCAAqC;AACzD,SAASC,IAAI,QAAQ,sCAAsC;AAC3D,SAASC,GAAG,QAAQ,qCAAqC;AACzD,SAASC,IAAI,QAAQ,sCAAsC;AAC3D,SAASC,MAAM,QAAQ,wCAAwC;AAC/D,SAASC,IAAI,QAAQ,sCAAsC;AAC3D,SAASC,UAAU,QAAQ,uCAAuC;AAClE,SAASC,OAAO,QAAQ,sCAAsC;AAC9D,SAASC,IAAI,QAAQ,sCAAsC;AAC3D,SAASC,GAAG,QAAQ,qCAAqC;AACzD,SAASC,KAAK,QAAQ,kCAAkC;AACxD,SAASC,KAAK,QAAQ,oCAAoC;AAE1D,IAAIC,aAAa,GAAG,KAAK;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAa,CACzBC,QAAwC,EAC1C;EACE,IAAI,CAACF,aAAa,EAAE;IAEhBvB,YAAY,CAACC,YAAY,CAACyB,QAAQ,EAAE;MAChCtB,KAAK;MACLD;IACJ,CAAC,CAAQ;IACTH,YAAY,CAACC,YAAY,CAAC0B,KAAK,EAAE;MAC7BtB,IAAI;MACJI,GAAG;MACHQ,UAAU;MACVC,OAAO;MACPP,GAAG;MACHC,IAAI;MACJQ,GAAG;MACHP,GAAG;MACHC,IAAI;MACJJ,GAAG;MACHS,IAAI;MACJH,IAAI;MACJR,IAAI;MACJF,IAAI;MACJC,GAAG;MACHQ,MAAM;MACNM,KAAK;MACLC;IACJ,CAAC,CAAQ;IACTC,aAAa,GAAG,IAAI;EACxB;EACA,OAAO,IAAIrB,KAAK,CAACuB,QAAQ,CAAQ;AACrC"}