{"version":3,"file":"util.d.js","names":[],"sources":["../../../src/types/util.d.ts"],"sourcesContent":["import { RxStorage } from './rx-storage.interface';\n\nexport type MaybePromise<T> = Promise<T> | T;\n\n\nexport type PlainJsonValue = string | number | boolean | PlainSimpleJsonObject | PlainSimpleJsonObject[] | PlainJsonValue[];\nexport type PlainSimpleJsonObject = {\n    [k: string]: PlainJsonValue | PlainJsonValue[];\n};\n\n/**\n * @link https://stackoverflow.com/a/49670389/3443137\n */\ntype DeepReadonly<T> =\n    T extends (infer R)[] ? DeepReadonlyArray<R> :\n    T extends Function ? T :\n    T extends object ? DeepReadonlyObject<T> :\n    T;\n\ninterface DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> { }\n\ntype DeepReadonlyObject<T> = {\n    readonly [P in keyof T]: DeepReadonly<T[P]>;\n};\n\nexport type MaybeReadonly<T> = T | Readonly<T>;\n\n\n/**\n * Opposite of DeepReadonly,\n * makes everything mutable again.\n */\ntype DeepMutable<T> = (\n    T extends object\n    ? {\n        -readonly [K in keyof T]: (\n            T[K] extends object\n            ? DeepMutable<T[K]>\n            : T[K]\n        )\n    }\n    : never\n);\n\n/**\n * Can be used like 'keyof'\n * but only represents the string keys, not the Symbols or numbers.\n * @link https://stackoverflow.com/a/51808262/3443137\n */\nexport type StringKeys<X> = Extract<keyof X, string>;\n\n\n/**\n * @link https://dev.to/vborodulin/ts-how-to-override-properties-with-type-intersection-554l\n */\nexport type Override<T1, T2> = Omit<T1, keyof T2> & T2;\n\n\n\nexport type ById<T> = {\n    [id: string]: T;\n};\n\n/**\n * To test a storage, we need these\n * configuration values.\n */\nexport type RxTestStorage = {\n    // TODO remove name here, it can be read out already via getStorage().name\n    readonly name: string;\n    readonly getStorage: () => RxStorage<any, any>;\n    /**\n     * Returns a storage that is used in performance tests.\n     * For example in a browser it should return the storage with an IndexedDB based adapter,\n     * while in node.js it must use the filesystem.\n     */\n    readonly getPerformanceStorage: () => {\n        storage: RxStorage<any, any>;\n        /**\n         * A description that describes the storage and setting.\n         * For example 'pouchdb-idb'.\n         */\n        description: string;\n    };\n    /**\n     * True if the storage is able to\n     * keep data after an instance is closed and opened again.\n     */\n    readonly hasPersistence: boolean;\n    readonly hasMultiInstance: boolean;\n    readonly hasCouchDBReplication: boolean;\n    readonly hasAttachments: boolean;\n    // true if the storage supports $regex queries, false if not.\n    readonly hasRegexSupport: boolean;\n}\n\n\nexport type HashFunction = (input: string) => string;\n"],"mappings":""}