{"version":3,"file":"rx-plugin.d.js","names":[],"sources":["../../../src/types/rx-plugin.d.ts"],"sourcesContent":["import {\n    RxQuery,\n    RxQueryOP,\n    MangoQuery\n} from './rx-query';\nimport type {\n    RxCollection,\n    RxCollectionCreator\n} from './rx-collection';\nimport {\n    RxStorageInstanceCreationParams\n} from './rx-storage';\nimport type {\n    DeepReadonly,\n    RxDatabase,\n    RxDatabaseCreator,\n    RxDocument,\n    RxStorage\n} from '../types'\nimport type { RxSchema } from '../rx-schema';\n\nexport type RxPluginPreCreateRxQueryArgs = {\n    op: RxQueryOP;\n    queryObj: MangoQuery;\n    collection: RxCollection;\n}\n\nexport type RxPluginPreAddRxPluginArgs = {\n    // the plugin that is getting added\n    plugin: RxPlugin | any;\n    // previous added plugins\n    plugins: Set<RxPlugin | any>\n}\n\nexport type RxPluginPrePrepareQueryArgs = {\n    rxQuery: RxQuery<any>;\n    mangoQuery: MangoQuery<any>;\n};\n\n\n/**\n * Depending on which plugins are used together,\n * it is important that the plugin is able to define if\n * the hooks must be added as first or as last array item.\n * For example the encryption plugin must run encryption\n * before the key-compression changes the fieldnames.\n */\nexport type RxPluginHooks<Input> = {\n    /**\n     * Hook function that is added as first.\n     */\n    before?: (i: Input) => void;\n    /**\n     * Hook function that is added as last.\n     */\n    after?: (i: Input) => void;\n}\n\nexport interface RxPlugin {\n    /**\n     * A string to uniquely identifies the plugin.\n     * Can be used to throw when different versions of the same plugin are used.\n     * And also other checks.\n     * Use kebab-case.\n     */\n    readonly name: string;\n\n    /**\n     * set this to true so RxDB\n     * knows that this object in a rxdb plugin\n     */\n    readonly rxdb: true;\n\n    /**\n     * Init function where dependend plugins could be added.\n     * (optional)\n     */\n    init?(): any;\n\n    prototypes?: {\n        RxSchema?: (proto: RxSchema) => void,\n        RxDocument?: (proto: RxDocument) => void,\n        RxQuery?: (proto: RxQuery) => void,\n        RxCollection?: (proto: RxCollection) => void,\n        RxDatabase?: (proto: RxDatabase) => void\n    };\n    overwritable?: {\n        isDevMode?: () => boolean;\n        deepFreezeWhenDevMode?: <T>(obj: T) => DeepReadonly<T>,\n        validatePassword?: Function,\n        checkAdapter?: Function,\n        tunnelErrorMessage?: Function\n    };\n    // TODO add typings to hook functions\n    hooks?: {\n        preAddRxPlugin?: RxPluginHooks<RxPluginPreAddRxPluginArgs>,\n        preCreateRxDatabase?: RxPluginHooks<any>,\n        createRxDatabase?: RxPluginHooks<{\n            database: RxDatabase,\n            creator: RxDatabaseCreator\n        }>,\n        preDestroyRxDatabase?: RxPluginHooks<RxDatabase>,\n        postRemoveRxDatabase?: RxPluginHooks<{\n            databaseName: string,\n            storage: RxStorage<any, any>\n        }>,\n        createRxCollection?: RxPluginHooks<{\n            collection: RxCollection,\n            creator: RxCollectionCreator\n        }>,\n        preCreateRxCollection?: RxPluginHooks<any>,\n        postDestroyRxCollection?: RxPluginHooks<RxCollection>,\n        postRemoveRxCollection?: RxPluginHooks<{\n            storage: RxStorage<any, any>;\n            databaseName: string;\n            collectionName: string;\n        }>,\n        preCreateRxSchema?: RxPluginHooks<any>,\n        createRxSchema?: RxPluginHooks<any>,\n        preCreateRxQuery?: RxPluginHooks<RxPluginPreCreateRxQueryArgs>,\n        prePrepareQuery?: RxPluginHooks<RxPluginPrePrepareQueryArgs>,\n        createRxQuery?: RxPluginHooks<RxQuery>;\n        createRxDocument?: RxPluginHooks<any>;\n        postCreateRxDocument?: RxPluginHooks<any>;\n        preCreateRxStorageInstance?: RxPluginHooks<RxStorageInstanceCreationParams<any, any>>;\n        preMigrateDocument?: RxPluginHooks<any>;\n        postMigrateDocument?: RxPluginHooks<any>;\n    };\n}\n"],"mappings":""}