{"version":3,"file":"rx-query.d.js","names":["RxQueryBase"],"sources":["../../../src/types/rx-query.d.ts"],"sourcesContent":["import {\n    RxQueryBase\n} from '../rx-query';\nimport { StringKeys } from './util';\n\nexport interface RxQueryOptions<T> {\n    $eq?: T;\n    $gt?: T;\n    $gte?: T;\n    $lt?: T;\n    $lte?: T;\n    $ne?: T;\n    $in?: T[];\n    $nin?: T[];\n    $regex?: RegExp;\n    $exists?: boolean;\n    $type?: 'null' | 'boolean' | 'number' | 'string' | 'array' | 'object';\n    $mod?: number;\n    $not?: T;\n    $all?: T[];\n    $size?: number;\n    $elemMatch?: RxQueryOptions<T>;\n}\n\nexport type RxQueryObject<T = any> = keyof T & { [P in keyof T]?: T[P] | RxQueryOptions<T[P]>; } & {\n    $or: RxQueryObject<T>[];\n    $nor: RxQueryObject<T>[];\n    $and: RxQueryObject<T>[];\n};\n\n// TODO this should be typed\nexport type MangoQuerySelector<RxDocType = any> = {\n    [k: string]: MangoQuerySelector<RxDocType> | any;\n};\n\n/**\n * Discussion was at:\n * @link https://github.com/pubkey/rxdb/issues/1972\n */\nexport type MangoQuerySortDirection = 'asc' | 'desc';\nexport type MangoQuerySortPart<RxDocType = any> = {\n    [k in StringKeys<RxDocType> | string]: MangoQuerySortDirection;\n};\n\nexport type MangoQuerySelectorAndIndex<RxDocType = any> = {\n    /**\n     * Selector is optional,\n     * if not given, the query matches all documents\n     * that are not _deleted=true.\n     */\n    selector?: MangoQuerySelector<RxDocType>;\n    /**\n     * By default, the RxStorage implementation\n     * decides which index to use when running the query.\n     * \n     * For better performance, a different index might be defined\n     * by setting it in the query.\n     * How this improves performance and if the defined index is used,\n     * depends on the RxStorage implementation.\n     */\n    index?: string | string[];\n}\n\nexport type MangoQueryNoLimit<RxDocType = any> = MangoQuerySelectorAndIndex<RxDocType> & {\n    /**\n     * Sorting of the results.\n     * If no sort is set, RxDB will sort by the primary key.\n     * Also if sort is set, RxDB will add primaryKey sorting\n     * if the primaryKey was not in the sort parameters before.\n     * This ensures that there is a deterministic sorting of the \n     * results, not mather at which order the documents have been\n     * inserted into the storage.\n     */\n    sort?: MangoQuerySortPart<RxDocType>[];\n};\n\nexport type MangoQuery<RxDocType = any> = MangoQueryNoLimit<RxDocType> & {\n    skip?: number;\n    limit?: number;\n};\n\nexport type RxQueryOP = 'find' | 'findOne' | 'count';\n\nexport declare class RxQuery<RxDocumentType = any, RxQueryResult = RxDocumentType | RxDocumentType[]> extends RxQueryBase<RxDocumentType, RxQueryResult> {\n    equals(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    eq(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    or(queryObj: keyof RxDocumentType | string | any[]): RxQuery<RxDocumentType, RxQueryResult>;\n    nor(queryObj: keyof RxDocumentType | string | any[]): RxQuery<RxDocumentType, RxQueryResult>;\n    and(queryObj: keyof RxDocumentType | string | any[]): RxQuery<RxDocumentType, RxQueryResult>;\n    gt(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    gte(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    lt(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    lte(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    ne(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    in(queryObj: any[]): RxQuery<RxDocumentType, RxQueryResult>;\n    nin(queryObj: any[]): RxQuery<RxDocumentType, RxQueryResult>;\n    all(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    regex(queryObj: RegExp): RxQuery<RxDocumentType, RxQueryResult>;\n    exists(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    elemMatch(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\n    mod(p1: any, p2: any, p3: any): RxQuery<RxDocumentType, RxQueryResult>;\n}\n"],"mappings":"AAAA,SACIA,WAAW,QACR,aAAa"}