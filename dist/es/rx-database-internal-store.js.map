{"version":3,"file":"rx-database-internal-store.js","names":["newRxError","fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","ensureNotFalsy","fastUnsecureHash","getDefaultRevision","getDefaultRxDocumentMeta","randomCouchString","ensureStorageTokenDocumentExists","rxDatabase","storageToken","passwordHash","password","undefined","docData","id","STORAGE_TOKEN_DOCUMENT_ID","context","INTERNAL_CONTEXT_STORAGE_TOKEN","key","STORAGE_TOKEN_DOCUMENT_KEY","data","token","instanceToken","_deleted","_meta","_rev","_attachments","internalStore","bulkWrite","document","writeResult","success","error","isError","status","conflictError","documentInDb","existingPasswordHash","storageTokenDocInDb","getAllCollectionDocuments","storage","storageInstance","getAllQueryPrepared","statics","prepareQuery","schema","selector","INTERNAL_CONTEXT_COLLECTION","sort","skip","query","queryResult","allDocs","documents","INTERNAL_CONTEXT_REPLICATION_PRIMITIVES","INTERNAL_STORE_SCHEMA_TITLE","INTERNAL_STORE_SCHEMA","version","title","primaryKey","fields","separator","type","properties","maxLength","additionalProperties","indexes","required","sharding","shards","mode","getPrimaryKeyOfInternalDocument"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import { newRxError } from './rx-error';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from './rx-schema-helper';\nimport type {\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageInstance\n} from './types';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\nexport const INTERNAL_CONTEXT_REPLICATION_PRIMITIVES = 'plugin-replication-primitives';\n\n/**\n * Do not change the title,\n * we have to flag the internal schema so that\n * some RxStorage implementations are able\n * to detect if the created RxStorageInstance\n * is from the internals or not,\n * to do some optimizations in some cases.\n */\nexport const INTERNAL_STORE_SCHEMA_TITLE = 'RxInternalDocument';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    title: INTERNAL_STORE_SCHEMA_TITLE,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    )\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\n\nexport const STORAGE_TOKEN_DOCUMENT_ID = getPrimaryKeyOfInternalDocument(\n    STORAGE_TOKEN_DOCUMENT_KEY,\n    INTERNAL_CONTEXT_STORAGE_TOKEN\n);\n\nexport async function ensureStorageTokenDocumentExists<Collections = any>(\n    rxDatabase: RxDatabase<Collections>\n): Promise<RxDocumentData<InternalStoreStorageTokenDocType>> {\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n\n    const passwordHash = rxDatabase.password ? fastUnsecureHash(rxDatabase.password) : undefined;\n\n    const docData: RxDocumentData<InternalStoreStorageTokenDocType> = {\n        id: STORAGE_TOKEN_DOCUMENT_ID,\n        context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n        key: STORAGE_TOKEN_DOCUMENT_KEY,\n        data: {\n            token: storageToken,\n            /**\n             * We add the instance token here\n             * to be able to detect if a given RxDatabase instance\n             * is the first instance that was ever created\n             * or if databases have existed earlier on that storage\n             * with the same database name.\n             */\n            instanceToken: rxDatabase.token,\n            passwordHash\n        },\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    const writeResult = await rxDatabase.internalStore.bulkWrite(\n        [{ document: docData }],\n        'internal-add-storage-token'\n    );\n    if (writeResult.success[STORAGE_TOKEN_DOCUMENT_ID]) {\n        return writeResult.success[STORAGE_TOKEN_DOCUMENT_ID];\n    }\n\n    /**\n     * If we get a 409 error,\n     * it means another instance already inserted the storage token.\n     * So we get that token from the database and return that one.\n     */\n    const error = ensureNotFalsy(writeResult.error[STORAGE_TOKEN_DOCUMENT_ID]);\n    if (\n        error.isError &&\n        (error as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>).status === 409\n    ) {\n        const conflictError = (error as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>);\n\n\n        if (\n            passwordHash &&\n            passwordHash !== ensureNotFalsy(conflictError.documentInDb).data.passwordHash\n        ) {\n            throw newRxError('DB1', {\n                passwordHash,\n                existingPasswordHash: ensureNotFalsy(conflictError.documentInDb).data.passwordHash\n            });\n        }\n\n        const storageTokenDocInDb = conflictError.documentInDb;\n        return ensureNotFalsy(storageTokenDocInDb);\n    }\n    throw error;\n}\n"],"mappings":"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"}