{"version":3,"file":"rx-query.js","names":["deepEqual","BehaviorSubject","firstValueFrom","merge","mergeMap","filter","map","startWith","distinctUntilChanged","shareReplay","sortObject","stringifyFilter","pluginMissing","clone","overwriteGetterForCaching","now","PROMISE_RESOLVE_FALSE","RXJS_SHARE_REPLAY_DEFAULTS","ensureNotFalsy","newRxError","runPluginHooks","createRxDocuments","calculateNewResults","triggerCacheReplacement","normalizeMangoQuery","queryCollection","rxQuery","docs","collection","isFindOneByIdQuery","docId","storageInstance","findDocumentsById","docsMap","docData","push","preparedQuery","getPreparedQuery","query","queryResult","documents","_queryCount","newQueryID","RxQueryBase","op","mangoQuery","id","_execOverDatabaseCount","_creationTime","_lastEnsureEqual","other","uncached","refCount$","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_ensureEqualQueue","_getDefaultQuery","schema","primaryPath","_setResultData","newResultData","primPath","docsDataMap","Map","docsData","doc","_dataSync$","getValue","set","time","_execOverDatabase","docsPromise","then","exec","throwIfMissing","name","_ensureEqual","$","result","toString","stringObj","value","JSON","stringify","hookInput","jsonSchema","database","storage","statics","prepareQuery","doesDocumentDataMatch","_deleted","queryMatcher","remove","ret","Array","isArray","Promise","all","update","_updateObj","where","_queryObj","sort","_params","skip","_amount","limit","_$","results$","pipe","changeEvent","isLocal","prev","curr","useResult","length","slice","usePreparedQuery","getQueryMatcher","selector","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","queryObj","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","eventReduceResult","runFullQueryAgain","changed","newResults","latestAfter","resolve","Object","keys","$eq","isInstanceOf","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    clone,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    ensureNotFalsy\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    RxDocumentData\n} from './types';\n\nimport {\n    createRxDocuments\n} from './rx-document-prototype-merge';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport type { QueryMatcher } from 'event-reduce-js';\nimport { normalizeMangoQuery } from './rx-query-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocumentType = any,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocumentType>[] | RxDocument<RxDocumentType>\n    > {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    // used by some plugins\n    public other: any = {};\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string;\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: {\n        docsData: RxDocumentType[];\n        // A key->document map, used in the event reduce optimization.\n        docsDataMap: Map<string, RxDocumentType>;\n        docs: RxDocument<RxDocumentType>[];\n        /**\n         * Time at which the current _result state was created.\n         * Used to determine if the result set has changed since X\n         * so that we do not emit the same result multiple times on subscription.\n         */\n        time: number;\n    } | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery>,\n        public collection: RxCollection<RxDocumentType>\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.docs.length === 0 ? null : useResult.docs[0];\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it wont matter if the user modifies it.\n                        return useResult.docs.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from pouchdb\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocumentType[]>): void {\n        const docs = createRxDocuments<RxDocumentType, {}>(\n            this.collection,\n            newResultData\n        );\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const primPath = this.collection.schema.primaryPath;\n        const docsDataMap = new Map();\n        const docsData = docs.map(doc => {\n            const docData: RxDocumentData<RxDocumentType> = doc._dataSync$.getValue() as any;\n            const id: string = docData[primPath] as any;\n            docsDataMap.set(id, docData);\n            return docData;\n        });\n\n        this._result = {\n            docsData,\n            docsDataMap,\n            docs,\n            time: now()\n        }\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    _execOverDatabase(): Promise<RxDocumentData<RxDocumentType>[]> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n        const docsPromise = queryCollection<RxDocumentType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocumentType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocumentType>> {\n        const schema = this.collection.schema.jsonSchema;\n\n\n        /**\n         * Instead of calling this.getPreparedQuery(),\n         * we have to prepare the query for the query matcher\n         * so that it does not contain modifications from the hooks\n         * like the key compression.\n         */\n        const usePreparedQuery = this.collection.database.storage.statics.prepareQuery(\n            schema,\n            normalizeMangoQuery(\n                this.collection.schema.jsonSchema,\n                clone(this.mangoQuery)\n            )\n        );\n\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            this.collection.database.storage.statics.getQueryMatcher(\n                schema,\n                usePreparedQuery\n            )\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocumentType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocumentType>(\n                this.collection.schema.jsonSchema,\n                clone(this.mangoQuery)\n            )\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocumentType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        let ret: any;\n        return this\n            .exec()\n            .then(docs => {\n                ret = docs;\n                if (Array.isArray(docs)) {\n                    // TODO use a bulk operation instead of running .remove() on each document\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            })\n            .then(() => ret);\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocumentType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocumentType> | keyof RxDocumentType | string): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocumentType>): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery(): MangoQuery {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery(\n    op: RxQueryOP,\n    queryObj: MangoQuery,\n    collection: RxCollection\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection\n    });\n\n    let ret = new RxQueryBase(op, queryObj, collection);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happend since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            const eventReduceResult = calculateNewResults(\n                rxQuery as any,\n                runChangeEvents\n            );\n            if (eventReduceResult.runFullQueryAgain) {\n                // could not calculate the new results, execute must be done\n                mustReExec = true;\n            } else if (eventReduceResult.changed) {\n                // we got the new results, we do not have to re-execute, mustReExec stays false\n                ret = true; // true because results changed\n                rxQuery._setResultData(eventReduceResult.newResults as any);\n            }\n        }\n    }\n\n\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n                if (!rxQuery._result || !deepEqual(newResultData, rxQuery._result.docsData)) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensuer findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType>\n): Promise<RxDocumentData<RxDocType>[]> {\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        const docId = rxQuery.isFindOneByIdQuery;\n        const docsMap = await collection.storageInstance.findDocumentsById([docId], false);\n        const docData = docsMap[docId];\n        if (docData) {\n            docs.push(docData);\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        docs = queryResult.documents;\n    }\n    return docs;\n\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string {\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        if (typeof query.selector[primaryPath] === 'string') {\n            return query.selector[primaryPath];\n        } else if (\n            Object.keys(query.selector[primaryPath]).length === 1 &&\n            typeof query.selector[primaryPath].$eq === 'string'\n        ) {\n            return query.selector[primaryPath].$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":"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"}