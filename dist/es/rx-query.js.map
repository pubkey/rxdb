{"version":3,"file":"rx-query.js","names":["BehaviorSubject","firstValueFrom","merge","mergeMap","filter","map","startWith","distinctUntilChanged","shareReplay","sortObject","stringifyFilter","pluginMissing","overwriteGetterForCaching","now","PROMISE_RESOLVE_FALSE","RXJS_SHARE_REPLAY_DEFAULTS","ensureNotFalsy","areRxDocumentArraysEqual","newRxError","runPluginHooks","calculateNewResults","triggerCacheReplacement","getQueryMatcher","normalizeMangoQuery","_queryCount","newQueryID","RxQueryBase","op","mangoQuery","collection","other","id","_execOverDatabaseCount","_creationTime","_lastEnsureEqual","uncached","refCount$","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_ensureEqualQueue","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_proto","prototype","_setResultData","newResultData","docsData","docsMap","Map","docsDataMap","count","docs","time","Array","from","values","docData","_docCache","getCachedRxDocument","doc","set","primary","_data","length","_execOverDatabase","preparedQuery","getPreparedQuery","result","storageInstance","mode","database","allowSlowCount","queryObj","ids","selector","$in","ret","mustBeQueried","forEach","getLatestDocumentDataIfExists","_deleted","push","findDocumentsById","Object","docsPromise","queryCollection","then","exec","throwIfMissing","name","query","_ensureEqual","$","toString","stringObj","value","JSON","stringify","hookInput","rxQuery","jsonSchema","storage","statics","prepareQuery","doesDocumentDataMatch","queryMatcher","remove","isArray","Promise","all","update","_updateObj","where","_queryObj","sort","_params","skip","_amount","limit","_createClass","key","get","_$","results$","pipe","changeEvent","isLocal","prev","curr","useResult","slice","normalizedQuery","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","previousCount","newCount","cE","didMatchBefore","previousDocumentData","doesMatchNow","documentData","eventReduceResult","runFullQueryAgain","changed","newResults","latestAfter","resolve","docIds","docId","hasOwnProperty","queryResult","documents","keys","$eq","find","r","isRxQuery","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    ensureNotFalsy,\n    areRxDocumentArraysEqual\n} from './plugins/utils';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    RxDocumentData,\n    QueryMatcher\n} from './types';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport { getQueryMatcher, normalizeMangoQuery } from './rx-query-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocType,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocType>[] | RxDocument<RxDocType>\n> {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string | string[];\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: {\n        docsData: RxDocumentData<RxDocType>[];\n        // A key->document map, used in the event reduce optimization.\n        docsDataMap: Map<string, RxDocType>;\n        docsMap: Map<string, RxDocument<RxDocType>>;\n        docs: RxDocument<RxDocType>[];\n        count: number;\n        /**\n         * Time at which the current _result state was created.\n         * Used to determine if the result set has changed since X\n         * so that we do not emit the same result multiple times on subscription.\n         */\n        time: number;\n    } | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery<RxDocType>>,\n        public collection: RxCollection<RxDocType>,\n        // used by some plugins\n        public other: any = {}\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'count') {\n                        return useResult.count;\n                    } else if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.docs.length === 0 ? null : useResult.docs[0];\n                    } else if (this.op === 'findByIds') {\n                        return useResult.docsMap;\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it won't matter if the user modifies it.\n                        return useResult.docs.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from the storage\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocType>[] | number | Map<string, RxDocumentData<RxDocType>>): void {\n        if (typeof newResultData === 'number') {\n            this._result = {\n                docsData: [],\n                docsMap: new Map(),\n                docsDataMap: new Map(),\n                count: newResultData,\n                docs: [],\n                time: now()\n            };\n            return;\n        } else if (newResultData instanceof Map) {\n            newResultData = Array.from((newResultData as Map<string, RxDocumentData<RxDocType>>).values());\n        }\n\n        const docsDataMap = new Map();\n        const docsMap = new Map();\n\n\n        const docs = newResultData.map(docData => this.collection._docCache.getCachedRxDocument(docData));\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const docsData = docs.map(doc => {\n            docsDataMap.set(doc.primary, doc._data);\n            docsMap.set(doc.primary, doc);\n            return doc._data;\n        });\n\n        this._result = {\n            docsData,\n            docsMap,\n            docsDataMap,\n            count: docsData.length,\n            docs,\n            time: now()\n        };\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    async _execOverDatabase(): Promise<RxDocumentData<RxDocType>[] | number> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n\n        if (this.op === 'count') {\n            const preparedQuery = this.getPreparedQuery();\n            const result = await this.collection.storageInstance.count(preparedQuery);\n            if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n                throw newRxError('QU14', {\n                    collection: this.collection,\n                    queryObj: this.mangoQuery\n                });\n            } else {\n                return result.count;\n            }\n        }\n\n        if (this.op === 'findByIds') {\n            const ids: string[] = ensureNotFalsy(this.mangoQuery.selector as any)[this.collection.schema.primaryPath].$in;\n            const ret = new Map<string, RxDocument<RxDocType>>();\n            const mustBeQueried: string[] = [];\n            // first try to fill from docCache\n            ids.forEach(id => {\n                const docData = this.collection._docCache.getLatestDocumentDataIfExists(id);\n                if (docData) {\n                    if (!docData._deleted) {\n                        const doc = this.collection._docCache.getCachedRxDocument(docData);\n                        ret.set(id, doc);\n                    }\n                } else {\n                    mustBeQueried.push(id);\n                }\n            });\n            // everything which was not in docCache must be fetched from the storage\n            if (mustBeQueried.length > 0) {\n                const docs = await this.collection.storageInstance.findDocumentsById(mustBeQueried, false);\n                Object.values(docs).forEach(docData => {\n                    const doc = this.collection._docCache.getCachedRxDocument(docData);\n                    ret.set(doc.primary, doc);\n                });\n            }\n            return ret as any;\n        }\n\n\n        const docsPromise = queryCollection<RxDocType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const schema = this.collection.schema.jsonSchema;\n        const normalizedQuery = normalizeMangoQuery(\n            this.collection.schema.jsonSchema,\n            this.mangoQuery\n        );\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            getQueryMatcher(\n                schema,\n                normalizedQuery\n            ) as any\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocType>(\n                this.collection.schema.jsonSchema,\n                this.mangoQuery\n            )\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        return this\n            .exec()\n            .then(docs => {\n                if (Array.isArray(docs)) {\n                    // TODO use a bulk operation instead of running .remove() on each document\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            });\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocType> | keyof RxDocType | string): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocType>): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery<RxDocType>(): MangoQuery<RxDocType> {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery<RxDocType>(\n    op: RxQueryOP,\n    queryObj: MangoQuery<RxDocType>,\n    collection: RxCollection<RxDocType>,\n    other?: any\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection,\n        other\n    });\n\n    let ret = new RxQueryBase<RxDocType>(op, queryObj, collection, other);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase<any>): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase<any>): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual<RxDocType>(rxQuery: RxQueryBase<RxDocType>): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happened since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            if (rxQuery.op === 'count') {\n                // 'count' query\n                const previousCount = ensureNotFalsy(rxQuery._result).count;\n                let newCount = previousCount;\n                runChangeEvents.forEach(cE => {\n                    const didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n                    const doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n\n                    if (!didMatchBefore && doesMatchNow) {\n                        newCount++;\n                    }\n                    if (didMatchBefore && !doesMatchNow) {\n                        newCount--;\n                    }\n                });\n                if (newCount !== previousCount) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newCount as any);\n                }\n            } else {\n                // 'find' or 'findOne' query\n                const eventReduceResult = calculateNewResults(\n                    rxQuery as any,\n                    runChangeEvents\n                );\n                if (eventReduceResult.runFullQueryAgain) {\n                    // could not calculate the new results, execute must be done\n                    mustReExec = true;\n                } else if (eventReduceResult.changed) {\n                    // we got the new results, we do not have to re-execute, mustReExec stays false\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(eventReduceResult.newResults as any);\n                }\n            }\n        }\n    }\n\n\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n\n                // A count query needs a different has-changed check.\n                if (typeof newResultData === 'number') {\n                    if (\n                        !rxQuery._result ||\n                        newResultData !== rxQuery._result.count\n                    ) {\n                        ret = true;\n                        rxQuery._setResultData(newResultData as any);\n                    }\n                    return ret;\n                }\n                if (\n                    !rxQuery._result ||\n                    !areRxDocumentArraysEqual(\n                        rxQuery.collection.schema.primaryPath,\n                        newResultData,\n                        rxQuery._result.docsData\n                    )\n                ) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensure findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType>\n): Promise<RxDocumentData<RxDocType>[]> {\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        if (Array.isArray(rxQuery.isFindOneByIdQuery)) {\n            let docIds = rxQuery.isFindOneByIdQuery;\n            docIds = docIds.filter(docId => {\n                // first try to fill from docCache\n                const docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n                if (docData) {\n                    if (!docData._deleted) {\n                        docs.push(docData);\n                    }\n                    return false;\n                } else {\n                    return true;\n                }\n            });\n            // otherwise get from storage\n            if (docIds.length > 0) {\n                const docsMap = await collection.storageInstance.findDocumentsById(docIds, false);\n                Object.values(docsMap).forEach(docData => {\n                    docs.push(docData);\n                });\n            }\n        } else {\n            const docId = rxQuery.isFindOneByIdQuery;\n\n            // first try to fill from docCache\n            let docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n            if (!docData) {\n                // otherwise get from storage\n                const docsMap = await collection.storageInstance.findDocumentsById([docId], false);\n                if (docsMap.hasOwnProperty(docId)) {\n                    docData = docsMap[docId];\n                }\n            }\n            if (docData && !docData._deleted) {\n                docs.push(docData);\n            }\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        docs = queryResult.documents;\n    }\n    return docs;\n\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string | string[] {\n    // must have exactly one operator which must be $eq || $in\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        const value: any = query.selector[primaryPath];\n        if (typeof value === 'string') {\n            return value;\n        } else if (\n            Object.keys(value).length === 1 &&\n            typeof value.$eq === 'string'\n        ) {\n            return value.$eq;\n        }\n\n        // same with $in string arrays\n        if (\n            Object.keys(value).length === 1 &&\n            Array.isArray(value.$eq) &&\n            // must only contain strings\n            !(value.$eq as any[]).find(r => typeof r !== 'string')\n        ) {\n            return value.$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isRxQuery(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":";AAAA,SACIA,eAAe,EACfC,cAAc,EAEdC,KAAK,QACF,MAAM;AACb,SACIC,QAAQ,EACRC,MAAM,EACNC,GAAG,EACHC,SAAS,EACTC,oBAAoB,EACpBC,WAAW,QACR,gBAAgB;AACvB,SACIC,UAAU,EACVC,eAAe,EACfC,aAAa,EACbC,yBAAyB,EACzBC,GAAG,EACHC,qBAAqB,EACrBC,0BAA0B,EAC1BC,cAAc,EACdC,wBAAwB,QACrB,iBAAiB;AACxB,SACIC,UAAU,QACP,YAAY;AACnB,SACIC,cAAc,QACX,SAAS;AAehB,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,uBAAuB,QAAQ,eAAe;AACvD,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,mBAAmB;AAExE,IAAIC,WAAW,GAAG,CAAC;AACnB,IAAMC,UAAU,GAAG,SAAAA,CAAA,EAAoB;EACnC,OAAO,EAAED,WAAW;AACxB,CAAC;AAED,WAAaE,WAAW;EAQpB;AACJ;AACA;;EAII;;EAKA;;EAMA;AACJ;AACA;AACA;;EAiBI,SAAAA,YACWC,EAAa,EACbC,UAA2C,EAC3CC,UAAmC;EAC1C;EACOC,KAAU,GAAG,CAAC,CAAC,EACxB;IAAA,KA7CKC,EAAE,GAAWN,UAAU,CAAC,CAAC;IAAA,KAKzBO,sBAAsB,GAAW,CAAC;IAAA,KAClCC,aAAa,GAAGpB,GAAG,CAAC,CAAC;IAAA,KAGrBqB,gBAAgB,GAAG,CAAC;IAAA,KAEpBC,QAAQ,GAAG,KAAK;IAAA,KAGhBC,SAAS,GAAG,IAAIpC,eAAe,CAAC,IAAI,CAAC;IAAA,KASrCqC,OAAO,GAaH,IAAI;IAAA,KAqFRC,kBAAkB,GAAgB,CAAC,CAAC;IAAA,KAIpCC,cAAc,GAAW,CAAC;IAAA,KAC1BC,YAAY,GAAW,CAAC;IAAA,KAMxBC,iBAAiB,GAAqB3B,qBAAqB;IAAA,KA5FvDa,EAAa,GAAbA,EAAa;IAAA,KACbC,UAA2C,GAA3CA,UAA2C;IAAA,KAC3CC,UAAmC,GAAnCA,UAAmC;IAAA,KAEnCC,KAAU,GAAVA,KAAU;IAEjB,IAAI,CAACF,UAAU,EAAE;MACb,IAAI,CAACA,UAAU,GAAGc,gBAAgB,CAAC,CAAC;IACxC;IAEA,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB,CACxC,IAAI,CAACd,UAAU,CAACe,MAAM,CAACC,WAAW,EAClCjB,UACJ,CAAC;EACL;EAAC,IAAAkB,MAAA,GAAApB,WAAA,CAAAqB,SAAA;EAgFD;AACJ;AACA;AACA;AACA;AACA;AACA;EAGI;AACJ;AACA;AACA;EAHID,MAAA,CAIAE,cAAc,GAAd,SAAAA,eAAeC,aAA4F,EAAQ;IAC/G,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;MACnC,IAAI,CAACZ,OAAO,GAAG;QACXa,QAAQ,EAAE,EAAE;QACZC,OAAO,EAAE,IAAIC,GAAG,CAAC,CAAC;QAClBC,WAAW,EAAE,IAAID,GAAG,CAAC,CAAC;QACtBE,KAAK,EAAEL,aAAa;QACpBM,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE3C,GAAG,CAAC;MACd,CAAC;MACD;IACJ,CAAC,MAAM,IAAIoC,aAAa,YAAYG,GAAG,EAAE;MACrCH,aAAa,GAAGQ,KAAK,CAACC,IAAI,CAAET,aAAa,CAA4CU,MAAM,CAAC,CAAC,CAAC;IAClG;IAEA,IAAMN,WAAW,GAAG,IAAID,GAAG,CAAC,CAAC;IAC7B,IAAMD,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IAGzB,IAAMG,IAAI,GAAGN,aAAa,CAAC5C,GAAG,CAACuD,OAAO,IAAI,IAAI,CAAC/B,UAAU,CAACgC,SAAS,CAACC,mBAAmB,CAACF,OAAO,CAAC,CAAC;;IAEjG;AACR;AACA;AACA;AACA;IACQ,IAAMV,QAAQ,GAAGK,IAAI,CAAClD,GAAG,CAAC0D,GAAG,IAAI;MAC7BV,WAAW,CAACW,GAAG,CAACD,GAAG,CAACE,OAAO,EAAEF,GAAG,CAACG,KAAK,CAAC;MACvCf,OAAO,CAACa,GAAG,CAACD,GAAG,CAACE,OAAO,EAAEF,GAAG,CAAC;MAC7B,OAAOA,GAAG,CAACG,KAAK;IACpB,CAAC,CAAC;IAEF,IAAI,CAAC7B,OAAO,GAAG;MACXa,QAAQ;MACRC,OAAO;MACPE,WAAW;MACXC,KAAK,EAAEJ,QAAQ,CAACiB,MAAM;MACtBZ,IAAI;MACJC,IAAI,EAAE3C,GAAG,CAAC;IACd,CAAC;EACL;;EAEA;AACJ;AACA;AACA,KAHI;EAAAiC,MAAA,CAIMsB,iBAAiB,GAAvB,eAAAA,kBAAA,EAAyE;IACrE,IAAI,CAACpC,sBAAsB,GAAG,IAAI,CAACA,sBAAsB,GAAG,CAAC;IAC7D,IAAI,CAACO,cAAc,GAAG1B,GAAG,CAAC,CAAC;IAG3B,IAAI,IAAI,CAACc,EAAE,KAAK,OAAO,EAAE;MACrB,IAAM0C,aAAa,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;MAC7C,IAAMC,MAAM,GAAG,MAAM,IAAI,CAAC1C,UAAU,CAAC2C,eAAe,CAAClB,KAAK,CAACe,aAAa,CAAC;MACzE,IAAIE,MAAM,CAACE,IAAI,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC5C,UAAU,CAAC6C,QAAQ,CAACC,cAAc,EAAE;QACpE,MAAMzD,UAAU,CAAC,MAAM,EAAE;UACrBW,UAAU,EAAE,IAAI,CAACA,UAAU;UAC3B+C,QAAQ,EAAE,IAAI,CAAChD;QACnB,CAAC,CAAC;MACN,CAAC,MAAM;QACH,OAAO2C,MAAM,CAACjB,KAAK;MACvB;IACJ;IAEA,IAAI,IAAI,CAAC3B,EAAE,KAAK,WAAW,EAAE;MACzB,IAAMkD,GAAa,GAAG7D,cAAc,CAAC,IAAI,CAACY,UAAU,CAACkD,QAAe,CAAC,CAAC,IAAI,CAACjD,UAAU,CAACe,MAAM,CAACC,WAAW,CAAC,CAACkC,GAAG;MAC7G,IAAMC,GAAG,GAAG,IAAI5B,GAAG,CAAgC,CAAC;MACpD,IAAM6B,aAAuB,GAAG,EAAE;MAClC;MACAJ,GAAG,CAACK,OAAO,CAACnD,EAAE,IAAI;QACd,IAAM6B,OAAO,GAAG,IAAI,CAAC/B,UAAU,CAACgC,SAAS,CAACsB,6BAA6B,CAACpD,EAAE,CAAC;QAC3E,IAAI6B,OAAO,EAAE;UACT,IAAI,CAACA,OAAO,CAACwB,QAAQ,EAAE;YACnB,IAAMrB,GAAG,GAAG,IAAI,CAAClC,UAAU,CAACgC,SAAS,CAACC,mBAAmB,CAACF,OAAO,CAAC;YAClEoB,GAAG,CAAChB,GAAG,CAACjC,EAAE,EAAEgC,GAAG,CAAC;UACpB;QACJ,CAAC,MAAM;UACHkB,aAAa,CAACI,IAAI,CAACtD,EAAE,CAAC;QAC1B;MACJ,CAAC,CAAC;MACF;MACA,IAAIkD,aAAa,CAACd,MAAM,GAAG,CAAC,EAAE;QAC1B,IAAMZ,IAAI,GAAG,MAAM,IAAI,CAAC1B,UAAU,CAAC2C,eAAe,CAACc,iBAAiB,CAACL,aAAa,EAAE,KAAK,CAAC;QAC1FM,MAAM,CAAC5B,MAAM,CAACJ,IAAI,CAAC,CAAC2B,OAAO,CAACtB,OAAO,IAAI;UACnC,IAAMG,GAAG,GAAG,IAAI,CAAClC,UAAU,CAACgC,SAAS,CAACC,mBAAmB,CAACF,OAAO,CAAC;UAClEoB,GAAG,CAAChB,GAAG,CAACD,GAAG,CAACE,OAAO,EAAEF,GAAG,CAAC;QAC7B,CAAC,CAAC;MACN;MACA,OAAOiB,GAAG;IACd;IAGA,IAAMQ,WAAW,GAAGC,eAAe,CAAY,IAAW,CAAC;IAC3D,OAAOD,WAAW,CAACE,IAAI,CAACnC,IAAI,IAAI;MAC5B,IAAI,CAACf,YAAY,GAAG3B,GAAG,CAAC,CAAC;MACzB,OAAO0C,IAAI;IACf,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA,KAJI;EAAAT,MAAA,CAOO6C,IAAI,GAAX,SAAAA,KAAYC,cAAwB,EAAgB;IAChD,IAAIA,cAAc,IAAI,IAAI,CAACjE,EAAE,KAAK,SAAS,EAAE;MACzC,MAAMT,UAAU,CAAC,KAAK,EAAE;QACpBW,UAAU,EAAE,IAAI,CAACA,UAAU,CAACgE,IAAI;QAChCC,KAAK,EAAE,IAAI,CAAClE,UAAU;QACtBD,EAAE,EAAE,IAAI,CAACA;MACb,CAAC,CAAC;IACN;;IAGA;AACR;AACA;AACA;AACA;IACQ,OAAOoE,YAAY,CAAC,IAAI,CAAC,CACpBL,IAAI,CAAC,MAAMzF,cAAc,CAAC,IAAI,CAAC+F,CAAC,CAAC,CAAC,CAClCN,IAAI,CAACnB,MAAM,IAAI;MACZ,IAAI,CAACA,MAAM,IAAIqB,cAAc,EAAE;QAC3B,MAAM1E,UAAU,CAAC,MAAM,EAAE;UACrBW,UAAU,EAAE,IAAI,CAACA,UAAU,CAACgE,IAAI;UAChCC,KAAK,EAAE,IAAI,CAAClE,UAAU;UACtBD,EAAE,EAAE,IAAI,CAACA;QACb,CAAC,CAAC;MACN,CAAC,MAAM;QACH,OAAO4C,MAAM;MACjB;IACJ,CAAC,CAAC;EACV;;EAIA;AACJ;AACA;AACA,KAHI;EAoBA;AACJ;AACA;AACA;EAHIzB,MAAA,CAIAmD,QAAQ,GAAR,SAAAA,SAAA,EAAmB;IACf,IAAMC,SAAS,GAAGzF,UAAU,CAAC;MACzBkB,EAAE,EAAE,IAAI,CAACA,EAAE;MACXmE,KAAK,EAAE,IAAI,CAAClE,UAAU;MACtBE,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,EAAE,IAAI,CAAC;IACR,IAAMqE,KAAK,GAAGC,IAAI,CAACC,SAAS,CAACH,SAAS,EAAExF,eAAe,CAAC;IACxD,IAAI,CAACuF,QAAQ,GAAG,MAAME,KAAK;IAC3B,OAAOA,KAAK;EAChB;;EAEA;AACJ;AACA;AACA;AACA,KAJI;EAAArD,MAAA,CAKAwB,gBAAgB,GAAhB,SAAAA,iBAAA,EAA6C;IACzC,IAAMgC,SAAS,GAAG;MACdC,OAAO,EAAE,IAAI;MACb;MACA3E,UAAU,EAAEL,mBAAmB,CAC3B,IAAI,CAACM,UAAU,CAACe,MAAM,CAAC4D,UAAU,EACjC,IAAI,CAAC5E,UACT;IACJ,CAAC;IACDT,cAAc,CAAC,iBAAiB,EAAEmF,SAAS,CAAC;IAE5C,IAAMH,KAAK,GAAG,IAAI,CAACtE,UAAU,CAAC6C,QAAQ,CAAC+B,OAAO,CAACC,OAAO,CAACC,YAAY,CAC/D,IAAI,CAAC9E,UAAU,CAACe,MAAM,CAAC4D,UAAU,EACjCF,SAAS,CAAC1E,UACd,CAAC;IAED,IAAI,CAAC0C,gBAAgB,GAAG,MAAM6B,KAAK;IACnC,OAAOA,KAAK;EAChB;;EAEA;AACJ;AACA;AACA,KAHI;EAAArD,MAAA,CAIA8D,qBAAqB,GAArB,SAAAA,sBAAsBhD,OAAwB,EAAW;IACrD;IACA,IAAIA,OAAO,CAACwB,QAAQ,EAAE;MAClB,OAAO,KAAK;IAChB;IAEA,OAAO,IAAI,CAACyB,YAAY,CAACjD,OAAO,CAAC;EACrC;;EAEA;AACJ;AACA;AACA,KAHI;EAAAd,MAAA,CAIAgE,MAAM,GAAN,SAAAA,OAAA,EAAiC;IAC7B,OAAO,IAAI,CACNnB,IAAI,CAAC,CAAC,CACND,IAAI,CAACnC,IAAI,IAAI;MACV,IAAIE,KAAK,CAACsD,OAAO,CAACxD,IAAI,CAAC,EAAE;QACrB;QACA,OAAOyD,OAAO,CAACC,GAAG,CAAC1D,IAAI,CAAClD,GAAG,CAAC0D,GAAG,IAAIA,GAAG,CAAC+C,MAAM,CAAC,CAAC,CAAC,CAAC;MACrD,CAAC,MAAM;QACH,OAAQvD,IAAI,CAASuD,MAAM,CAAC,CAAC;MACjC;IACJ,CAAC,CAAC;EACV;;EAGA;AACJ;AACA,KAFI;EAOA;AACJ;AACA;AACA;EAHIhE,MAAA,CAIAoE,MAAM,GAAN,SAAAA,OAAOC,UAAe,EAA0B;IAC5C,MAAMxG,aAAa,CAAC,QAAQ,CAAC;EACjC;;EAGA;EACA;EAAA;EAAAmC,MAAA,CACAsE,KAAK,GAAL,SAAAA,MAAMC,SAAmE,EAAqC;IAC1G,MAAM1G,aAAa,CAAC,eAAe,CAAC;EACxC,CAAC;EAAAmC,MAAA,CACDwE,IAAI,GAAJ,SAAAA,KAAKC,OAA+C,EAAqC;IACrF,MAAM5G,aAAa,CAAC,eAAe,CAAC;EACxC,CAAC;EAAAmC,MAAA,CACD0E,IAAI,GAAJ,SAAAA,KAAKC,OAAsB,EAAqC;IAC5D,MAAM9G,aAAa,CAAC,eAAe,CAAC;EACxC,CAAC;EAAAmC,MAAA,CACD4E,KAAK,GAAL,SAAAA,MAAMD,OAAsB,EAAqC;IAC7D,MAAM9G,aAAa,CAAC,eAAe,CAAC;EACxC,CAAC;EAAAgH,YAAA,CAAAjG,WAAA;IAAAkG,GAAA;IAAAC,GAAA,EA9VD,SAAAA,CAAA,EAAwC;MACpC,IAAI,CAAC,IAAI,CAACC,EAAE,EAAE;QAEV,IAAMC,QAAQ,GAAG,IAAI,CAAClG,UAAU,CAACmE,CAAC,CAACgC,IAAI;QACnC;AAChB;AACA;AACA;QACgB5H,MAAM,CAAC6H,WAAW,IAAI,CAACA,WAAW,CAACC,OAAO,CAAC;QAC3C;AAChB;AACA;AACA;QACgB5H,SAAS,CAAC,IAAI,CAAC;QACf;QACAH,QAAQ,CAAC,MAAM4F,YAAY,CAAC,IAAW,CAAC,CAAC;QACzC;QACA1F,GAAG,CAAC,MAAM,IAAI,CAACgC,OAAO,CAAC;QACvB;QACA7B,WAAW,CAACO,0BAA0B,CAAC;QACvC;QACAR,oBAAoB,CAAC,CAAC4H,IAAI,EAAEC,IAAI,KAAK;UACjC,IAAID,IAAI,IAAIA,IAAI,CAAC3E,IAAI,KAAKxC,cAAc,CAACoH,IAAI,CAAC,CAAC5E,IAAI,EAAE;YACjD,OAAO,IAAI;UACf,CAAC,MAAM;YACH,OAAO,KAAK;UAChB;QACJ,CAAC,CAAC,EACFpD,MAAM,CAACmE,MAAM,IAAI,CAAC,CAACA,MAAM,CAAC;QAC1B;AAChB;AACA;AACA;QACgBlE,GAAG,CAAEkE,MAAM,IAAK;UACZ,IAAM8D,SAAS,GAAGrH,cAAc,CAACuD,MAAM,CAAC;UACxC,IAAI,IAAI,CAAC5C,EAAE,KAAK,OAAO,EAAE;YACrB,OAAO0G,SAAS,CAAC/E,KAAK;UAC1B,CAAC,MAAM,IAAI,IAAI,CAAC3B,EAAE,KAAK,SAAS,EAAE;YAC9B;YACA,OAAO0G,SAAS,CAAC9E,IAAI,CAACY,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGkE,SAAS,CAAC9E,IAAI,CAAC,CAAC,CAAC;UACjE,CAAC,MAAM,IAAI,IAAI,CAAC5B,EAAE,KAAK,WAAW,EAAE;YAChC,OAAO0G,SAAS,CAAClF,OAAO;UAC5B,CAAC,MAAM;YACH;YACA;YACA,OAAOkF,SAAS,CAAC9E,IAAI,CAAC+E,KAAK,CAAC,CAAC,CAAC;UAClC;QACJ,CAAC,CACL,CAAC;QAED,IAAI,CAACR,EAAE,GAAG5H,KAAK,CACX6H,QAAQ;QACR;AAChB;AACA;AACA;QACgB,IAAI,CAAC3F,SAAS,CAAC4F,IAAI,CACf5H,MAAM,CAAC,MAAM,KAAK,CACtB,CACJ,CAAC;MACL;MACA,OAAO,IAAI,CAAC0H,EAAE;IAClB;;IAGA;;IAGA;IACA;IAIA;AACJ;AACA;AACA;EAHI;IAAAF,GAAA;IAAAC,GAAA,EAiKA,SAAAA,CAAA,EAAiE;MAC7D,IAAMjF,MAAM,GAAG,IAAI,CAACf,UAAU,CAACe,MAAM,CAAC4D,UAAU;MAChD,IAAM+B,eAAe,GAAGhH,mBAAmB,CACvC,IAAI,CAACM,UAAU,CAACe,MAAM,CAAC4D,UAAU,EACjC,IAAI,CAAC5E,UACT,CAAC;MACD,OAAOhB,yBAAyB,CAC5B,IAAI,EACJ,cAAc,EACdU,eAAe,CACXsB,MAAM,EACN2F,eACJ,CACJ,CAAC;IACL;EAAC;IAAAX,GAAA;IAAAC,GAAA,EA4ED,SAAAA,CAAA,EAAmD;MAC/C,OAAO,IAAI;IACf;EAAC;EAAA,OAAAnG,WAAA;AAAA;AA2BL,OAAO,SAASgB,gBAAgBA,CAAA,EAAqC;EACjE,OAAO;IACHoC,QAAQ,EAAE,CAAC;EACf,CAAC;AACL;;AAEA;AACA;AACA;AACA,OAAO,SAAS0D,gBAAgBA,CAC5BjC,OAAmD,EACb;EACtC,OAAOA,OAAO,CAAC1E,UAAU,CAAC4G,WAAW,CAACC,UAAU,CAACnC,OAAc,CAAC;AACpE;AAEA,OAAO,SAASoC,aAAaA,CACzBhH,EAAa,EACbiD,QAA+B,EAC/B/C,UAAmC,EACnCC,KAAW,EACb;EACEX,cAAc,CAAC,kBAAkB,EAAE;IAC/BQ,EAAE;IACFiD,QAAQ;IACR/C,UAAU;IACVC;EACJ,CAAC,CAAC;EAEF,IAAIkD,GAAG,GAAG,IAAItD,WAAW,CAAYC,EAAE,EAAEiD,QAAQ,EAAE/C,UAAU,EAAEC,KAAK,CAAC;;EAErE;EACAkD,GAAG,GAAGwD,gBAAgB,CAACxD,GAAG,CAAC;EAC3B3D,uBAAuB,CAACQ,UAAU,CAAC;EAEnC,OAAOmD,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS4D,gBAAgBA,CAACrC,OAAyB,EAAW;EAC1D,IAAMsC,wBAAwB,GAAGtC,OAAO,CAACuC,SAAS,CAACjH,UAAU,CAACkH,kBAAkB,CAACC,OAAO;EACxF,IAAIzC,OAAO,CAACjE,kBAAkB,IAAIuG,wBAAwB,EAAE;IACxD,OAAO,IAAI;EACf,CAAC,MAAM;IACH,OAAO,KAAK;EAChB;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS9C,YAAYA,CAACQ,OAAyB,EAAoB;EAC/D;EACA,IACIA,OAAO,CAAC1E,UAAU,CAAC6C,QAAQ,CAACuE,SAAS,IACrCL,gBAAgB,CAACrC,OAAO,CAAC,EAC3B;IACE,OAAOzF,qBAAqB;EAChC;EAEAyF,OAAO,CAAC9D,iBAAiB,GAAG8D,OAAO,CAAC9D,iBAAiB,CAChDiD,IAAI,CAAC,MAAMwD,aAAa,CAAC3C,OAAO,CAAC,CAAC;EACvC,OAAOA,OAAO,CAAC9D,iBAAiB;AACpC;;AAEA;AACA;AACA;AACA;AACA,SAASyG,aAAaA,CAAY3C,OAA+B,EAAoB;EACjFA,OAAO,CAACrE,gBAAgB,GAAGrB,GAAG,CAAC,CAAC;;EAEhC;AACJ;AACA;EACI;EACI;EACA0F,OAAO,CAAC1E,UAAU,CAAC6C,QAAQ,CAACuE,SAAS;EACrC;EACAL,gBAAgB,CAACrC,OAAO,CAAC,EAC3B;IACE,OAAOzF,qBAAqB;EAChC;EAEA,IAAIkE,GAAG,GAAG,KAAK;EACf,IAAImE,UAAU,GAAG,KAAK,CAAC,CAAC;EACxB,IAAI5C,OAAO,CAACjE,kBAAkB,KAAK,CAAC,CAAC,EAAE;IACnC;IACA6G,UAAU,GAAG,IAAI;EACrB;;EAEA;AACJ;AACA;EACI,IAAI,CAACA,UAAU,EAAE;IACb,IAAMC,kBAAkB,GAAG7C,OAAO,CAACuC,SAAS,CAACjH,UAAU,CAACkH,kBAAkB,CAACM,OAAO,CAAC9C,OAAO,CAACjE,kBAAkB,GAAG,CAAC,CAAC;IAClH,IAAI8G,kBAAkB,KAAK,IAAI,EAAE;MAC7B;MACAD,UAAU,GAAG,IAAI;IACrB,CAAC,MAAM;MACH5C,OAAO,CAACjE,kBAAkB,GAAGiE,OAAO,CAACuC,SAAS,CAACjH,UAAU,CAACkH,kBAAkB,CAACC,OAAO;MAEpF,IAAMM,eAAqC,GAAG/C,OAAO,CAACuC,SAAS,CAACjH,UAAU,CACrEkH,kBAAkB,CAClBQ,iBAAiB,CAACH,kBAAkB,CAAC;MAE1C,IAAI7C,OAAO,CAAC5E,EAAE,KAAK,OAAO,EAAE;QACxB;QACA,IAAM6H,aAAa,GAAGxI,cAAc,CAACuF,OAAO,CAAClE,OAAO,CAAC,CAACiB,KAAK;QAC3D,IAAImG,QAAQ,GAAGD,aAAa;QAC5BF,eAAe,CAACpE,OAAO,CAACwE,EAAE,IAAI;UAC1B,IAAMC,cAAc,GAAGD,EAAE,CAACE,oBAAoB,IAAIrD,OAAO,CAACK,qBAAqB,CAAC8C,EAAE,CAACE,oBAAoB,CAAC;UACxG,IAAMC,YAAY,GAAGtD,OAAO,CAACK,qBAAqB,CAAC8C,EAAE,CAACI,YAAY,CAAC;UAEnE,IAAI,CAACH,cAAc,IAAIE,YAAY,EAAE;YACjCJ,QAAQ,EAAE;UACd;UACA,IAAIE,cAAc,IAAI,CAACE,YAAY,EAAE;YACjCJ,QAAQ,EAAE;UACd;QACJ,CAAC,CAAC;QACF,IAAIA,QAAQ,KAAKD,aAAa,EAAE;UAC5BxE,GAAG,GAAG,IAAI,CAAC,CAAC;UACZuB,OAAO,CAACvD,cAAc,CAACyG,QAAe,CAAC;QAC3C;MACJ,CAAC,MAAM;QACH;QACA,IAAMM,iBAAiB,GAAG3I,mBAAmB,CACzCmF,OAAO,EACP+C,eACJ,CAAC;QACD,IAAIS,iBAAiB,CAACC,iBAAiB,EAAE;UACrC;UACAb,UAAU,GAAG,IAAI;QACrB,CAAC,MAAM,IAAIY,iBAAiB,CAACE,OAAO,EAAE;UAClC;UACAjF,GAAG,GAAG,IAAI,CAAC,CAAC;UACZuB,OAAO,CAACvD,cAAc,CAAC+G,iBAAiB,CAACG,UAAiB,CAAC;QAC/D;MACJ;IACJ;EACJ;;EAIA;EACA,IAAIf,UAAU,EAAE;IACZ;IACA,IAAMgB,WAAmB,GAAI5D,OAAO,CAAS1E,UAAU,CAACkH,kBAAkB,CAACC,OAAO;IAClF,OAAOzC,OAAO,CAACnC,iBAAiB,CAAC,CAAC,CAC7BsB,IAAI,CAACzC,aAAa,IAAI;MACnBsD,OAAO,CAACjE,kBAAkB,GAAG6H,WAAW;;MAExC;MACA,IAAI,OAAOlH,aAAa,KAAK,QAAQ,EAAE;QACnC,IACI,CAACsD,OAAO,CAAClE,OAAO,IAChBY,aAAa,KAAKsD,OAAO,CAAClE,OAAO,CAACiB,KAAK,EACzC;UACE0B,GAAG,GAAG,IAAI;UACVuB,OAAO,CAACvD,cAAc,CAACC,aAAoB,CAAC;QAChD;QACA,OAAO+B,GAAG;MACd;MACA,IACI,CAACuB,OAAO,CAAClE,OAAO,IAChB,CAACpB,wBAAwB,CACrBsF,OAAO,CAAC1E,UAAU,CAACe,MAAM,CAACC,WAAW,EACrCI,aAAa,EACbsD,OAAO,CAAClE,OAAO,CAACa,QACpB,CAAC,EACH;QACE8B,GAAG,GAAG,IAAI,CAAC,CAAC;QACZuB,OAAO,CAACvD,cAAc,CAACC,aAAoB,CAAC;MAChD;MACA,OAAO+B,GAAG;IACd,CAAC,CAAC;EACV;EACA,OAAOgC,OAAO,CAACoD,OAAO,CAACpF,GAAG,CAAC,CAAC,CAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeS,eAAeA,CACjCc,OAAoD,EAChB;EACpC,IAAIhD,IAAiC,GAAG,EAAE;EAC1C,IAAM1B,UAAU,GAAG0E,OAAO,CAAC1E,UAAU;;EAErC;AACJ;AACA;AACA;AACA;AACA;EACI,IAAI0E,OAAO,CAAC5D,kBAAkB,EAAE;IAC5B,IAAIc,KAAK,CAACsD,OAAO,CAACR,OAAO,CAAC5D,kBAAkB,CAAC,EAAE;MAC3C,IAAI0H,MAAM,GAAG9D,OAAO,CAAC5D,kBAAkB;MACvC0H,MAAM,GAAGA,MAAM,CAACjK,MAAM,CAACkK,KAAK,IAAI;QAC5B;QACA,IAAM1G,OAAO,GAAG2C,OAAO,CAAC1E,UAAU,CAACgC,SAAS,CAACsB,6BAA6B,CAACmF,KAAK,CAAC;QACjF,IAAI1G,OAAO,EAAE;UACT,IAAI,CAACA,OAAO,CAACwB,QAAQ,EAAE;YACnB7B,IAAI,CAAC8B,IAAI,CAACzB,OAAO,CAAC;UACtB;UACA,OAAO,KAAK;QAChB,CAAC,MAAM;UACH,OAAO,IAAI;QACf;MACJ,CAAC,CAAC;MACF;MACA,IAAIyG,MAAM,CAAClG,MAAM,GAAG,CAAC,EAAE;QACnB,IAAMhB,OAAO,GAAG,MAAMtB,UAAU,CAAC2C,eAAe,CAACc,iBAAiB,CAAC+E,MAAM,EAAE,KAAK,CAAC;QACjF9E,MAAM,CAAC5B,MAAM,CAACR,OAAO,CAAC,CAAC+B,OAAO,CAACtB,OAAO,IAAI;UACtCL,IAAI,CAAC8B,IAAI,CAACzB,OAAO,CAAC;QACtB,CAAC,CAAC;MACN;IACJ,CAAC,MAAM;MACH,IAAM0G,KAAK,GAAG/D,OAAO,CAAC5D,kBAAkB;;MAExC;MACA,IAAIiB,OAAO,GAAG2C,OAAO,CAAC1E,UAAU,CAACgC,SAAS,CAACsB,6BAA6B,CAACmF,KAAK,CAAC;MAC/E,IAAI,CAAC1G,OAAO,EAAE;QACV;QACA,IAAMT,QAAO,GAAG,MAAMtB,UAAU,CAAC2C,eAAe,CAACc,iBAAiB,CAAC,CAACgF,KAAK,CAAC,EAAE,KAAK,CAAC;QAClF,IAAInH,QAAO,CAACoH,cAAc,CAACD,KAAK,CAAC,EAAE;UAC/B1G,OAAO,GAAGT,QAAO,CAACmH,KAAK,CAAC;QAC5B;MACJ;MACA,IAAI1G,OAAO,IAAI,CAACA,OAAO,CAACwB,QAAQ,EAAE;QAC9B7B,IAAI,CAAC8B,IAAI,CAACzB,OAAO,CAAC;MACtB;IACJ;EACJ,CAAC,MAAM;IACH,IAAMS,aAAa,GAAGkC,OAAO,CAACjC,gBAAgB,CAAC,CAAC;IAChD,IAAMkG,WAAW,GAAG,MAAM3I,UAAU,CAAC2C,eAAe,CAACsB,KAAK,CAACzB,aAAa,CAAC;IACzEd,IAAI,GAAGiH,WAAW,CAACC,SAAS;EAChC;EACA,OAAOlH,IAAI;AAEf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASZ,kBAAkBA,CAC9BE,WAAmB,EACnBiD,KAAsB,EACG;EACzB;EACA,IACI,CAACA,KAAK,CAAC0B,IAAI,IACX1B,KAAK,CAAChB,QAAQ,IACdS,MAAM,CAACmF,IAAI,CAAC5E,KAAK,CAAChB,QAAQ,CAAC,CAACX,MAAM,KAAK,CAAC,IACxC2B,KAAK,CAAChB,QAAQ,CAACjC,WAAW,CAAC,EAC7B;IACE,IAAMsD,KAAU,GAAGL,KAAK,CAAChB,QAAQ,CAACjC,WAAW,CAAC;IAC9C,IAAI,OAAOsD,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAOA,KAAK;IAChB,CAAC,MAAM,IACHZ,MAAM,CAACmF,IAAI,CAACvE,KAAK,CAAC,CAAChC,MAAM,KAAK,CAAC,IAC/B,OAAOgC,KAAK,CAACwE,GAAG,KAAK,QAAQ,EAC/B;MACE,OAAOxE,KAAK,CAACwE,GAAG;IACpB;;IAEA;IACA,IACIpF,MAAM,CAACmF,IAAI,CAACvE,KAAK,CAAC,CAAChC,MAAM,KAAK,CAAC,IAC/BV,KAAK,CAACsD,OAAO,CAACZ,KAAK,CAACwE,GAAG,CAAC;IACxB;IACA,CAAExE,KAAK,CAACwE,GAAG,CAAWC,IAAI,CAACC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAC,EACxD;MACE,OAAO1E,KAAK,CAACwE,GAAG;IACpB;EACJ;EACA,OAAO,KAAK;AAChB;AAIA,OAAO,SAASG,SAASA,CAACC,GAAQ,EAAW;EACzC,OAAOA,GAAG,YAAYrJ,WAAW;AACrC"}