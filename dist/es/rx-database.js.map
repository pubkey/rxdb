{"version":3,"file":"rx-database.js","names":["IdleQueue","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","PROMISE_RESOLVE_VOID","getDefaultRevision","getDefaultRxDocumentMeta","defaultHashFunction","newRxError","createRxSchema","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","flatCloneDocWithMeta","getSingleDocument","getWrappedStorageInstance","INTERNAL_STORAGE_NAME","createRxCollectionStorageInstance","ObliviousSet","ensureStorageTokenDocumentExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","ensureNoStartupErrors","rxDatabase","storageToken","startupErrors","isRxDatabaseFirstTimeInstantiated","database","storageTokenDocument","tokenDoc","data","instanceToken","token","removeRxDatabase","databaseName","storage","databaseInstanceToken","createRxDatabaseStorageInstance","dbInternalsStorageInstance","collectionDocs","removedCollectionNames","Promise","all","map","colDoc","schema","collectionName","name","push","createStorageInstance","options","multiInstance","storageInstance","remove","password","_removeAllOfCollection","internalStore","docs","relevantDocs","filter","writeRows","doc","writeDoc","_deleted","previous","document","bulkWrite","then","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","instanceCreationOptions","eventReduce","hashFunction","cleanupPolicy","idleQueue","_subs","onDestroy","destroyed","collections","eventBulks$","observable$","pipe","changeEventBulk","events","emittedEventBulkIds","asRxDatabase","err","$emit","has","id","add","next","removeCollectionDoc","_collectionNamePrimary","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","forEach","args","rxJsonSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","_meta","_rev","_attachments","useArgs","assign","hookData","putDocsResult","error","_id","docInDb","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","defineProperty","get","removeCollection","destroyPromise","destroy","knownVersions","knownVersionDoc","storageInstances","instance","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","importJSON","_exportedJSON","serverCouchDB","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","complete","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","createRxDatabase","ignoreDuplicate","localDocuments","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    CouchDBServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    CouchDBServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashFunction\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport {\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA\n} from './rx-database-internal-store';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         * \n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             * \n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Beceause having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version\n                },\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(knownVersionDoc => {\n                            return createRxCollectionStorageInstance(\n                                this.asRxDatabase,\n                                {\n                                    databaseInstanceToken: this.token,\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: knownVersionDoc.data.schema,\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                }\n                            );\n                        })\n                );\n            })\n            // remove the storage instance\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => instance.remove()\n                    )\n                );\n            })\n            .then(() => runAsyncPluginHooks('postRemoveRxCollection', {\n                storage: this.storage,\n                databaseName: this.name,\n                collectionName\n            }))\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    serverCouchDB(_options?: CouchDBServerOptions): Promise<CouchDBServerResponse> {\n        throw pluginMissing('server-couchdb');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const docs = await getAllCollectionDocuments(\n        rxDatabase.storage,\n        rxDatabase.internalStore\n    );\n    const relevantDocs = docs\n        .filter((colDoc) => colDoc.data.name === collectionName);\n    const writeRows = relevantDocs.map(doc => {\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n        return {\n            previous: doc,\n            document: writeDoc\n        };\n    });\n    return rxDatabase.internalStore\n        .bulkWrite(\n            writeRows,\n            'rx-database-remove-collection-all'\n        )\n        .then(() => relevantDocs);\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false,\n        hashFunction = defaultHashFunction\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance,\n        password\n    )\n        /**\n         * Creating the internal store might fail\n         * if some RxStorage wrapper is used that does some checks\n         * and then throw.\n         * In that case we have to properly clean up the database.\n         */\n        .catch(err => {\n            USED_DATABASE_NAMES.delete(name);\n            throw err;\n        })\n        .then(storageInstance => {\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n                name,\n                databaseInstanceToken,\n                storage,\n                instanceCreationOptions,\n                password,\n                multiInstance,\n                eventReduce,\n                options,\n                storageInstance,\n                hashFunction,\n                cleanupPolicy\n            ) as any;\n\n            return runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }).then(() => rxDatabase);\n        });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storage,\n        dbInternalsStorageInstance\n    );\n\n    const removedCollectionNames: string[] = [];\n    await Promise.all(\n        collectionDocs\n            .map(async (colDoc) => {\n                const schema = colDoc.data.schema;\n                const collectionName = colDoc.data.name;\n                removedCollectionNames.push(collectionName);\n                const storageInstance = await storage.createStorageInstance<any>(\n                    {\n                        databaseInstanceToken,\n                        databaseName,\n                        collectionName,\n                        schema,\n                        options: {},\n                        multiInstance: false\n                    }\n                );\n                await storageInstance.remove();\n            })\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n * \n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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"}