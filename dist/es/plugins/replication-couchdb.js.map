{"version":3,"file":"replication-couchdb.js","names":["PouchReplicationPlugin","BehaviorSubject","Subject","fromEvent","firstValueFrom","skipUntil","filter","first","mergeMap","promiseWait","flatClone","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_TRUE","ensureNotFalsy","newRxError","isInstanceOf","isInstanceOfPouchDB","addPouchPlugin","getPouchDBOfRxCollection","isRxCollection","INTERNAL_POUCHDBS","WeakSet","RxCouchDBReplicationStateBase","collection","syncOptions","_subs","_subjects","change","docs","denied","active","complete","alive","error","canceled","Object","keys","forEach","key","defineProperty","get","asObservable","awaitInitialReplication","options","live","database","name","multiInstance","waitForLeadership","that","complete$","pipe","x","cancel","ret","_pouchEventEmitterObject","Promise","res","on","sub","unsubscribe","setPouchEventEmitter","rxRepState","evEmitter","push","subscribe","ev","next","observers","length","direction","doc","language","info","requestIdlePromise","then","getIsAlive","emitter","state","pull","reduce","acc","val","isAlive","resolve","createRxCouchDBReplicationState","pouchReplicationFunction","pouch","sync","bind","replicate","to","from","syncCouchDB","remote","retry","query","useOptions","has","storageInstance","internals","syncFun","selector","getPreparedQuery","repState","waitTillRun","destroyed","pouchSync","onDestroy","RxDBReplicationCouchDBPlugin","rxdb","init","prototypes","RxCollection","proto","hooks","createRxCollection","after","args","add"],"sources":["../../../src/plugins/replication-couchdb.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.sync()-function to rxdb\n * you can use it to sync collections with remote or local couchdb-instances\n */\n\nimport PouchReplicationPlugin from 'pouchdb-replication';\nimport {\n    BehaviorSubject,\n    Subject,\n    fromEvent,\n    Subscription,\n    Observable,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    skipUntil,\n    filter,\n    first,\n    mergeMap\n} from 'rxjs/operators';\n\nimport {\n    promiseWait,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE,\n    ensureNotFalsy\n} from '../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    isInstanceOf as isInstanceOfPouchDB,\n    addPouchPlugin,\n    getPouchDBOfRxCollection\n} from '../plugins/pouchdb';\n\nimport {\n    isRxCollection\n} from '../rx-collection';\nimport type {\n    RxCollection,\n    PouchSyncHandler,\n    PouchReplicationOptions,\n    RxPlugin,\n    SyncOptions,\n    PouchDBInstance\n} from '../types';\n\n/**\n * Contains all pouchdb instances that\n * are used inside of RxDB by collections or databases.\n * Used to ensure the remote of a replication cannot be an internal pouchdb.\n */\nconst INTERNAL_POUCHDBS = new WeakSet();\n\nexport class RxCouchDBReplicationStateBase {\n    public _subs: Subscription[] = [];\n\n    // can be used for debuging or custom event-handling\n    // will be set some time after sync() is called\n    public _pouchEventEmitterObject?: PouchSyncHandler | null;\n    public _subjects = {\n        change: new Subject(),\n        docs: new Subject(),\n        denied: new Subject(),\n        active: new BehaviorSubject(false),\n        complete: new BehaviorSubject(false),\n        alive: new BehaviorSubject(false),\n        error: new Subject(),\n    };\n\n    public canceled: boolean = false;\n\n    constructor(\n        public readonly collection: RxCollection,\n        public readonly syncOptions: SyncOptions\n    ) {\n        // create getters\n        Object.keys(this._subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this._subjects[key].asObservable();\n                }\n            });\n        });\n    }\n\n    awaitInitialReplication(): Promise<void> {\n        if (this.syncOptions.options && this.syncOptions.options.live) {\n            throw newRxError('RC4', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n        if (this.collection.database.multiInstance && this.syncOptions.waitForLeadership) {\n            throw newRxError('RC5', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n\n        const that: RxCouchDBReplicationState = this as any;\n        return firstValueFrom(\n            that.complete$.pipe(\n                filter(x => !!x)\n            )\n        );\n    }\n\n    /**\n     * Returns false when the replication has already been canceled\n     */\n    cancel(): Promise<boolean> {\n        if (this.canceled) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        this.canceled = true;\n        let ret = PROMISE_RESOLVE_TRUE;\n        if (this._pouchEventEmitterObject) {\n            /**\n             * Calling cancel() does not return a promise,\n             * so we have to await the complete event\n             * to know that everything is cleaned up properly.\n             */\n            ret = new Promise<true>(res => {\n                ensureNotFalsy(this._pouchEventEmitterObject)\n                    .on('complete', () => {\n                        res(true);\n                    });\n            });\n            this._pouchEventEmitterObject.cancel();\n        }\n        this._subs.forEach(sub => sub.unsubscribe());\n        return ret;\n    }\n}\n\nexport type RxCouchDBReplicationState = RxCouchDBReplicationStateBase & {\n    change$: Observable<any>;\n    docs$: Observable<any>;\n    denied$: Observable<any>;\n    active$: Observable<any>;\n    alive$: Observable<boolean>;\n    complete$: Observable<any>;\n    error$: Observable<any>;\n};\n\nexport function setPouchEventEmitter(\n    rxRepState: RxCouchDBReplicationState,\n    evEmitter: PouchSyncHandler\n) {\n    if (rxRepState._pouchEventEmitterObject) {\n        throw newRxError('RC1');\n    }\n    rxRepState._pouchEventEmitterObject = evEmitter;\n\n    // change\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'change')\n            .subscribe(ev => {\n                rxRepState._subjects.change.next(ev);\n            })\n    );\n\n    // denied\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'denied')\n            .subscribe(ev => rxRepState._subjects.denied.next(ev))\n    );\n\n    // docs\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'change')\n            .subscribe(ev => {\n                if (\n                    rxRepState._subjects.docs.observers.length === 0 ||\n                    (ev as any).direction !== 'pull'\n                ) return;\n\n                (ev as any).change.docs\n                    .filter((doc: any) => doc.language !== 'query') // remove internal docs\n                    // do primary-swap and keycompression\n                    .forEach((doc: any) => rxRepState._subjects.docs.next(doc));\n            }));\n\n    // error\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'error')\n            .subscribe(ev => rxRepState._subjects.error.next(ev))\n    );\n\n    // active\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'active')\n            .subscribe(() => rxRepState._subjects.active.next(true))\n    );\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'paused')\n            .subscribe(() => rxRepState._subjects.active.next(false))\n    );\n\n    // complete\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'complete')\n            .subscribe(async (info: any) => {\n                /**\n                 * when complete fires, it might be that not all changeEvents\n                 * have passed throught, because of the delay of .wachtForChanges()\n                 * Therefore we have to first ensure that all previous changeEvents have been handled\n                 */\n                await promiseWait(100);\n                rxRepState._subjects.complete.next(info);\n            })\n    );\n    // auto-cancel one-time replications on complelete to not cause memory leak\n    if (\n        !rxRepState.syncOptions.options ||\n        !rxRepState.syncOptions.options.live\n    ) {\n        rxRepState._subs.push(\n            rxRepState.complete$.pipe(\n                filter(x => !!x),\n                first(),\n                mergeMap(() => {\n                    return rxRepState.collection.database\n                        .requestIdlePromise()\n                        .then(() => rxRepState.cancel());\n                })\n            ).subscribe()\n        );\n    }\n\n    function getIsAlive(emitter: any): Promise<boolean> {\n        // \"state\" will live in emitter.state if single direction replication\n        // or in emitter.push.state & emitter.pull.state when syncing for both\n        let state = emitter.state;\n        if (!state) {\n            state = [emitter.pull.state, emitter.push.state]\n                .reduce((acc, val) => {\n                    if (acc === 'active' || val === 'active') return 'active';\n                    return acc === 'stopped' ? acc : val;\n                }, '');\n        }\n\n        // If it's active, we can't determine whether the connection is active\n        // or not yet\n        if (state === 'active') {\n            return promiseWait(15).then(() => getIsAlive(emitter));\n        }\n\n        const isAlive = state !== 'stopped';\n        return Promise.resolve(isAlive);\n    }\n\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'paused')\n            .pipe(\n                skipUntil(fromEvent(evEmitter as any, 'active'))\n            ).subscribe(() => {\n                getIsAlive(rxRepState._pouchEventEmitterObject)\n                    .then(isAlive => rxRepState._subjects.alive.next(isAlive));\n            })\n    );\n}\n\nexport function createRxCouchDBReplicationState(\n    collection: RxCollection,\n    syncOptions: SyncOptions\n): RxCouchDBReplicationState {\n    return new RxCouchDBReplicationStateBase(\n        collection,\n        syncOptions\n    ) as RxCouchDBReplicationState;\n}\n\n/**\n * get the correct function-name for pouchdb-replication\n */\nexport function pouchReplicationFunction(\n    pouch: PouchDBInstance,\n    {\n        pull = true,\n        push = true\n    }\n): any {\n    if (pull && push) {\n        return pouch.sync.bind(pouch);\n    }\n    if (!pull && push) {\n        return (pouch.replicate as any).to.bind(pouch);\n    }\n    if (pull && !push) {\n        return (pouch.replicate as any).from.bind(pouch);\n    }\n    if (!pull && !push) {\n        throw newRxError('UT3', {\n            pull,\n            push\n        });\n    }\n}\n\nexport function syncCouchDB(\n    this: RxCollection,\n    {\n        remote,\n        waitForLeadership = true,\n        direction = {\n            pull: true,\n            push: true\n        },\n        options = {\n            live: true,\n            retry: true\n        },\n        query\n    }: SyncOptions) {\n    const useOptions: PouchReplicationOptions & { selector: any } = flatClone(options) as any;\n\n    // prevent #641 by not allowing internal pouchdbs as remote\n    if (\n        isInstanceOfPouchDB(remote) &&\n        INTERNAL_POUCHDBS.has(remote)\n    ) {\n        throw newRxError('RC3', {\n            database: this.database.name,\n            collection: this.name\n        });\n    }\n\n    // if remote is RxCollection, get internal pouchdb\n    if (isRxCollection(remote)) {\n        remote = (remote as RxCollection).storageInstance.internals.pouch;\n    }\n\n    if (query && this !== query.collection) {\n        throw newRxError('RC2', {\n            query\n        });\n    }\n\n    const pouch = getPouchDBOfRxCollection(this);\n    const syncFun = pouchReplicationFunction(pouch, direction);\n    if (query) {\n        useOptions.selector = query.getPreparedQuery().selector;\n    }\n\n    const repState: any = createRxCouchDBReplicationState(\n        this,\n        {\n            remote,\n            waitForLeadership,\n            direction,\n            options,\n            query\n        }\n    );\n\n    // run internal so .sync() does not have to be async\n    const waitTillRun = (\n        waitForLeadership &&\n        this.database.multiInstance // do not await leadership if not multiInstance\n    ) ? this.database.waitForLeadership() : promiseWait(0);\n    (waitTillRun as any).then(() => {\n        if (this.destroyed || repState.canceled) {\n            return;\n        }\n        const pouchSync = syncFun(remote, useOptions);\n        setPouchEventEmitter(repState, pouchSync);\n\n        this.onDestroy.push(() => repState.cancel());\n    });\n\n    return repState;\n}\n\n\n\nexport const RxDBReplicationCouchDBPlugin: RxPlugin = {\n    name: 'replication-couchdb',\n    rxdb: true,\n    init() {\n        // add pouchdb-replication-plugin\n        addPouchPlugin(PouchReplicationPlugin);\n    },\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncCouchDB = syncCouchDB;\n        }\n    },\n    hooks: {\n        createRxCollection: {\n            after: args => {\n                const collection = args.collection;\n                const pouch: PouchDBInstance | undefined = collection.storageInstance.internals.pouch;\n                if (pouch) {\n                    INTERNAL_POUCHDBS.add(collection.storageInstance.internals.pouch);\n                }\n            }\n        }\n    }\n};\n"],"mappings":"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"}