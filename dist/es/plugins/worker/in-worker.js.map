{"version":3,"file":"in-worker.js","names":["expose","getFromMapOrThrow","wrappedWorkerRxStorage","args","nextId","instanceById","Map","exposeMe","createStorageInstance","params","instanceId","storage","instance","set","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","cleanup","minDeletedTime","close","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution"],"sources":["../../../../src/plugins/worker/in-worker.ts"],"sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the worker.\n */\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult\n} from '../../types';\nimport { expose } from 'threads/worker';\nimport { getFromMapOrThrow } from '../../util';\nimport { Observable } from 'rxjs';\n\n\nexport type InWorkerStorage<RxDocType, CheckpointType> = {\n    createStorageInstance(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<number>;\n    bulkWrite(\n        instanceId: number,\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>>;\n    findDocumentsById(\n        instanceId: number,\n        ids: string[], deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>>;\n    query(\n        instanceId: number,\n        preparedQuery: any\n    ): Promise<RxStorageQueryResult<RxDocType>>;\n    count(\n        instanceId: number,\n        preparedQuery: any\n    ): Promise<RxStorageCountResult>;\n    getAttachmentData(\n        instanceId: number,\n        documentId: string,\n        attachmentId: string\n    ): Promise<string>;\n    getChangedDocumentsSince(\n        instanceId: number,\n        limit: number,\n        checkpoint?: CheckpointType\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: any;\n    }>;\n    changeStream(\n        instanceById: number\n    ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, CheckpointType>>;\n    cleanup(instanceId: number, minDeletedTime: number): Promise<boolean>;\n    close(instanceId: number): Promise<void>;\n    remove(instanceId: number): Promise<void>;\n\n    conflictResultionTasks(\n        instanceById: number\n    ): Observable<RxConflictResultionTask<RxDocType>>;\n    resolveConflictResultionTask(\n        instanceById: number,\n        taskSolution: RxConflictResultionTaskSolution<RxDocType>\n    ): Promise<void>;\n}\n\nexport function wrappedWorkerRxStorage<T, D, CheckpointType = any>(\n    args: {\n        storage: RxStorage<T, D>\n    }\n) {\n    let nextId = 0;\n    const instanceById: Map<number, any> = new Map();\n\n    const exposeMe: InWorkerStorage<any, CheckpointType> = {\n        /**\n         * RxStorageInstance\n         */\n        async createStorageInstance(params) {\n            const instanceId = nextId++;\n            const instance = await args.storage.createStorageInstance(params);\n            instanceById.set(instanceId, instance);\n            return instanceId;\n        },\n        bulkWrite<DocumentData>(\n            instanceId: number,\n            documentWrites: BulkWriteRow<DocumentData>[],\n            context: string\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkWrite(documentWrites, context);\n        },\n        findDocumentsById<DocumentData>(\n            instanceId: number,\n            ids: string[],\n            deleted: boolean\n        ): Promise<RxDocumentDataById<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.findDocumentsById(ids, deleted);\n        },\n        query<DocumentData>(\n            instanceId: number,\n            preparedQuery: any\n        ): Promise<RxStorageQueryResult<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.query(preparedQuery);\n        },\n        count(\n            instanceId: number,\n            preparedQuery: any\n        ): Promise<RxStorageCountResult> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.count(preparedQuery);\n        },\n        getAttachmentData(\n            instanceId: number,\n            documentId: string,\n            attachmentId: string\n        ): Promise<string> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getAttachmentData(\n                documentId,\n                attachmentId\n            );\n        },\n        getChangedDocumentsSince<RxDocType>(\n            instanceId: number,\n            limit: number,\n            checkpoint: any\n        ): Promise<{\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getChangedDocumentsSince(\n                limit,\n                checkpoint\n            );\n        },\n        changeStream<DocumentData>(\n            instanceId: number\n        ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>, CheckpointType>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.changeStream();\n        },\n        cleanup(\n            instanceId: number,\n            minDeletedTime: number\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.cleanup(minDeletedTime);\n        },\n        close(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.close();\n        },\n        remove(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.remove();\n        },\n\n        conflictResultionTasks<RxDocType>(\n            instanceId: number\n        ): Observable<RxConflictResultionTask<RxDocType>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask<RxDocType>(\n            instanceId: number,\n            taskSolution: RxConflictResultionTaskSolution<RxDocType>\n        ): Promise<void> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.resolveConflictResultionTask(taskSolution);\n        }\n    }\n    expose(exposeMe);\n}\n"],"mappings":"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"}