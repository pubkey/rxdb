{"version":3,"file":"non-worker.js","names":["Subject","spawn","Worker","Thread","ensureNotFalsy","getFromMapOrThrow","removeWorkerRef","instance","workerState","WORKER_BY_INSTANCE","storage","refs","size","workerPromise","then","worker","terminate","Map","RxStorageWorker","settings","statics","name","createStorageInstance","params","get","workerInput","Set","set","instanceId","RxStorageInstanceWorker","databaseName","collectionName","schema","rxStorage","options","add","internals","changes$","conflicts$","subs","closed","push","changeStream","subscribe","ev","next","conflictResultionTasks","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","remove","resolveConflictResultionTask","_taskSolution","getRxStorageWorker"],"sources":["../../../../src/plugins/worker/non-worker.ts"],"sourcesContent":["import {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport {\n    spawn,\n    Worker,\n    Thread\n} from 'threads';\nimport type {\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxDocumentData,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageQueryResult,\n    EventBulk,\n    RxStorageStatics,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow\n} from '../../util';\nimport { InWorkerStorage } from './in-worker';\n\ndeclare type WorkerStorageInternals = {\n    rxStorage: RxStorageWorker;\n    instanceId: number;\n    worker: InWorkerStorage<any, any>;\n}\ndeclare type RxStorageWorkerSettings = {\n    statics: RxStorageStatics;\n    workerInput: any;\n}\n\n\n/**\n * We have no way to detect if a worker is no longer needed.\n * So we create the worker process on the first RxStorageInstance\n * and have to close it again of no more RxStorageInstances are non-closed.\n */\nconst WORKER_BY_INSTANCE: Map<RxStorageWorker, {\n    workerPromise: Promise<InWorkerStorage<any, any>>;\n    refs: Set<RxStorageInstanceWorker<any>>;\n}> = new Map();\n\nexport class RxStorageWorker implements RxStorage<WorkerStorageInternals, any> {\n    public name = 'worker';\n\n    constructor(\n        public readonly settings: RxStorageWorkerSettings,\n        public readonly statics: RxStorageStatics\n    ) { }\n\n    createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceWorker<RxDocType>> {\n        let workerState = WORKER_BY_INSTANCE.get(this);\n        if (!workerState) {\n            workerState = {\n                workerPromise: spawn<InWorkerStorage<RxDocType, any>>(new Worker(this.settings.workerInput)) as any,\n                refs: new Set()\n            };\n            WORKER_BY_INSTANCE.set(this, workerState);\n        }\n\n        return workerState.workerPromise.then(worker => {\n            return worker.createStorageInstance(params)\n                .then(instanceId => {\n                    const instance = new RxStorageInstanceWorker(\n                        this,\n                        params.databaseName,\n                        params.collectionName,\n                        params.schema,\n                        {\n                            rxStorage: this,\n                            instanceId,\n                            worker\n                        },\n                        params.options\n                    );\n                    ensureNotFalsy(workerState).refs.add(instance);\n                    return instance;\n                });\n        });\n    }\n}\n\n\nexport class RxStorageInstanceWorker<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    WorkerStorageInternals,\n    any,\n    any\n> {\n    /**\n     * threads.js uses observable-fns instead of rxjs\n     * so we have to transform it.\n     */\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n\n    constructor(\n        public readonly storage: RxStorageWorker,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: WorkerStorageInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.subs.push(\n            this.internals.worker.changeStream(\n                this.internals.instanceId\n            ).subscribe(ev => this.changes$.next(ev as any))\n        );\n        this.subs.push(\n            this.internals.worker.conflictResultionTasks(\n                this.internals.instanceId\n            ).subscribe(ev => this.conflicts$.next(ev as any))\n        );\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.internals.worker.bulkWrite(\n            this.internals.instanceId,\n            documentWrites,\n            context\n        );\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.internals.worker.findDocumentsById(\n            this.internals.instanceId,\n            ids,\n            deleted\n        );\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.internals.worker.query(\n            this.internals.instanceId,\n            preparedQuery\n        );\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.internals.worker.getAttachmentData(\n            this.internals.instanceId,\n            documentId,\n            attachmentId\n        );\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: any;\n    }> {\n        return this.internals.worker.getChangedDocumentsSince(\n            this.internals.instanceId,\n            limit,\n            checkpoint\n        );\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number) {\n        return this.internals.worker.cleanup(\n            this.internals.instanceId,\n            minDeletedTime\n        );\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        await this.internals.worker.close(\n            this.internals.instanceId\n        );\n        await removeWorkerRef(this);\n    }\n    async remove(): Promise<void> {\n        await this.internals.worker.remove(\n            this.internals.instanceId\n        );\n        this.closed = true;\n        await removeWorkerRef(this);\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport function getRxStorageWorker(\n    settings: RxStorageWorkerSettings\n): RxStorageWorker {\n    const storage = new RxStorageWorker(settings, settings.statics);\n    return storage;\n}\n\n/**\n * TODO we have a bug.\n * When the exact same RxStorage opens and closes\n * many RxStorage instances, then it might happen\n * that some calls to createStorageInstance() time out,\n * because the worker thread is in the closing state.\n */\nexport async function removeWorkerRef(\n    instance: RxStorageInstanceWorker<any>\n) {\n    const workerState = getFromMapOrThrow(WORKER_BY_INSTANCE, instance.storage);\n    workerState.refs.delete(instance);\n    if (workerState.refs.size === 0) {\n        WORKER_BY_INSTANCE.delete(instance.storage);\n        await workerState.workerPromise\n            .then(worker => Thread.terminate(worker as any));\n    }\n}\n"],"mappings":"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"}