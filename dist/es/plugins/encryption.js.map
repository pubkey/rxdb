{"version":3,"file":"encryption.js","names":["AES","cryptoEnc","objectPath","wrapRxStorageInstance","INTERNAL_STORE_SCHEMA_TITLE","newRxError","newRxTypeError","hasEncryption","b64DecodeUnicode","b64EncodeUnicode","clone","ensureNotFalsy","flatClone","body","recover","result","e","then","MINIMUM_PASSWORD_LENGTH","encryptString","value","password","encrypted","encrypt","toString","decryptString","cipherText","args","decrypted","decrypt","ret","wrappedKeyEncryptionStorage","Object","assign","storage","createStorageInstance","params","database","databaseName","collection","collectionName","schema","schemaWithoutEncrypted","attachments","modifyToStorage","docData","cloneWithoutAttachments","forEach","path","get","stringValue","JSON","stringify","set","newAttachments","entries","_attachments","id","attachment","useAttachment","data","dataString","modifyFromStorage","decryptedParsed","parse","modifyAttachmentFromStorage","attachmentData","instance","retInstance","title","validatePassword","err","close","length","minPassLength"],"sources":["../../../src/plugins/encryption.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\nimport objectPath from 'object-path';\nimport { wrapRxStorageInstance } from '../plugin-helpers';\nimport {\n    INTERNAL_STORE_SCHEMA_TITLE\n} from '../rx-database-internal-store';\nimport { newRxError, newRxTypeError } from '../rx-error';\nimport { hasEncryption } from '../rx-storage-helper';\nimport type {\n    InternalStoreDocType,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../types';\nimport {\n    b64DecodeUnicode,\n    b64EncodeUnicode,\n    clone,\n    ensureNotFalsy,\n    flatClone\n} from '../util';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc);\n    return ret;\n}\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\nexport function wrappedKeyEncryptionStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (!hasEncryption(params.schema)) {\n                    const retInstance = await args.storage.createStorageInstance(params);\n                    if (\n                        params.schema.title === INTERNAL_STORE_SCHEMA_TITLE &&\n                        params.password\n                    ) {\n                        try {\n                            validatePassword(params.password);\n                        } catch (err) {\n                            /**\n                             * Even if the checks fail,\n                             * we have to clean up.\n                             */\n                            await retInstance.close();\n                            throw err;\n                        }\n                    }\n                    return retInstance;\n                }\n\n                if (!params.password) {\n                    throw newRxError('EN3', {\n                        database: params.databaseName,\n                        collection: params.collectionName,\n                        schema: params.schema\n                    });\n                }\n                const password = params.password;\n\n                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);\n                delete schemaWithoutEncrypted.encrypted;\n                if (schemaWithoutEncrypted.attachments) {\n                    schemaWithoutEncrypted.attachments.encrypted = false;\n                }\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: schemaWithoutEncrypted\n                        }\n                    )\n                );\n\n                function modifyToStorage(docData: RxDocumentData<RxDocType>) {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = objectPath.get(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n\n                            const stringValue = JSON.stringify(value);\n                            const encrypted = encryptString(stringValue, password);\n                            objectPath.set(docData, path, encrypted);\n                        });\n\n                    // handle attachments\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const newAttachments: typeof docData._attachments = {};\n                        Object.entries(docData._attachments).forEach(([id, attachment]) => {\n                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;\n                            if (useAttachment.data) {\n                                const dataString = useAttachment.data;\n                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));\n                            }\n                            newAttachments[id] = useAttachment;\n                        });\n                        docData._attachments = newAttachments;\n                    }\n                    return docData;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = objectPath.get(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n                            const decrypted = decryptString(value, password);\n                            const decryptedParsed = JSON.parse(decrypted);\n                            objectPath.set(docData, path, decryptedParsed);\n                        });\n                    return docData;\n                }\n\n                function modifyAttachmentFromStorage(attachmentData: string): string {\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);\n                        return decrypted;\n                    } else {\n                        return attachmentData;\n                    }\n                }\n\n                return wrapRxStorageInstance(\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage,\n                    modifyAttachmentFromStorage\n                );\n            }\n        }\n    );\n}\n\n\n\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data;\n}\n\nfunction validatePassword(password: any) {\n    if (password && typeof password !== 'string') {\n        throw newRxTypeError('EN1', {\n            password\n        });\n    }\n    if (password && password.length < MINIMUM_PASSWORD_LENGTH) {\n        throw newRxError('EN2', {\n            minPassLength: MINIMUM_PASSWORD_LENGTH,\n            password\n        });\n    }\n}\n"],"mappings":"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"}