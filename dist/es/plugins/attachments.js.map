{"version":3,"file":"attachments.js","names":["map","b64DecodeUnicode","blobBufferUtil","flatClone","PROMISE_RESOLVE_VOID","newRxError","flatCloneDocWithMeta","writeSingle","pouchHash","preMigrateDocument","data","attachments","docData","_attachments","newAttachments","Promise","all","Object","keys","attachmentId","attachment","docPrimary","oldCollection","schema","primaryPath","storageInstance","getAttachmentData","rawAttachmentData","digest","length","type","putAttachment","attachmentData","skipIfSame","ensureSchemaSupportsAttachments","dataSize","size","toBase64String","dataString","id","hashAttachmentData","then","hash","newDigest","_atomicQueue","_data","currentMeta","getAttachment","docWriteData","writeRow","previous","document","collection","writeResult","fromStorageInstanceResult","newData","_rev","_dataSync$","next","attachmentBase64String","binary","err","console","log","getAttachmentSize","atob","doc","schemaJson","jsonSchema","link","_assignMethodsToAttachment","entries","forEach","funName","fun","defineProperty","get","bind","RxAttachment","remove","getData","primary","plainDataBase64","createBlobBufferFromBase64","getStringData","toString","rxDocument","getValue","allAttachments","postMigrateDocument","_action","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","pipe","attachmentsData","overwritable","hooks","after"],"sources":["../../../src/plugins/attachments.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs/operators';\n\nimport {\n    b64DecodeUnicode,\n    blobBufferUtil,\n    flatClone,\n    PROMISE_RESOLVE_VOID\n} from './../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDocument,\n    RxPlugin,\n    BlobBuffer,\n    OldRxCollection,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData\n} from '../types';\nimport { flatCloneDocWithMeta, writeSingle } from '../rx-storage-helper';\nimport { pouchHash } from './pouchdb';\n\n\n/**\n * To be able to support PouchDB with attachments,\n * we have to use the md5 hashing here, even if the RxDatabase itself\n * has a different hashing function.\n */\nexport function hashAttachmentData(\n    attachmentBase64String: string\n): Promise<string> {\n    let binary;\n    try {\n        binary = b64DecodeUnicode(attachmentBase64String);\n    } catch (err) {\n        console.log('could not run b64DecodeUnicode() on ' + attachmentBase64String);\n        throw err;\n    }\n    return pouchHash(binary);\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\nfunction ensureSchemaSupportsAttachments(doc: any) {\n    const schemaJson = doc.collection.schema.jsonSchema;\n    if (!schemaJson.attachments) {\n        throw newRxError('AT1', {\n            link: 'https://pubkey.github.io/rxdb/rx-attachment.html'\n        });\n    }\n}\n\nconst _assignMethodsToAttachment = function (attachment: any) {\n    Object\n        .entries(attachment.doc.collection.attachments)\n        .forEach(([funName, fun]) => {\n            Object.defineProperty(attachment, funName, {\n                get: () => (fun as any).bind(attachment)\n            });\n        });\n};\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        _assignMethodsToAttachment(this);\n    }\n\n    remove(): Promise<void> {\n        this.doc._atomicQueue = this.doc._atomicQueue\n            .then(async () => {\n                const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this.doc._data);\n                docWriteData._attachments = flatClone(docWriteData._attachments);\n                delete docWriteData._attachments[this.id];\n                const writeResult: RxDocumentData<any> = await writeSingle(\n                    this.doc.collection.storageInstance,\n                    {\n                        previous: flatClone(this.doc._data), // TODO do we need a flatClone here?\n                        document: docWriteData\n                    },\n                    'attachment-remove'\n                );\n\n                const newData = flatClone(this.doc._data);\n                newData._rev = writeResult._rev;\n                newData._attachments = writeResult._attachments;\n                this.doc._dataSync$.next(newData);\n\n            });\n        return this.doc._atomicQueue;\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<BlobBuffer> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id\n        );\n        const ret = await blobBufferUtil.createBlobBufferFromBase64(\n            plainDataBase64,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobBufferUtil.toString(data);\n        return asString;\n    }\n}\n\nexport function fromStorageInstanceResult(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\nexport async function putAttachment(\n    this: RxDocument,\n    attachmentData: RxAttachmentCreator,\n    /**\n     * If set to true, the write will be skipped\n     * when the attachment already contains the same data.\n     */\n    skipIfSame: boolean = true\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n    const dataSize = blobBufferUtil.size(attachmentData.data);\n    const dataString = await blobBufferUtil.toBase64String(attachmentData.data);\n\n    const id = attachmentData.id;\n    const type = attachmentData.type;\n    const data = dataString;\n\n    const newDigest = await hashAttachmentData(\n        dataString\n    ).then(hash => 'md5-' + hash);\n\n    this._atomicQueue = this._atomicQueue\n        .then(async () => {\n            if (skipIfSame && this._data._attachments && this._data._attachments[id]) {\n                const currentMeta = this._data._attachments[id];\n                if (currentMeta.type === type && currentMeta.digest === newDigest) {\n                    // skip because same data and same type\n                    return this.getAttachment(id);\n                }\n            }\n\n            const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this._data);\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n\n            docWriteData._attachments[id] = {\n                digest: newDigest,\n                length: dataSize,\n                type,\n                data\n            };\n            const writeRow = {\n                previous: flatClone(this._data),\n                document: flatClone(docWriteData)\n            };\n\n            const writeResult = await writeSingle(\n                this.collection.storageInstance,\n                writeRow,\n                'attachment-put'\n            );\n\n            const attachmentData = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentData,\n                this\n            );\n\n            const newData = flatClone(this._data);\n            newData._rev = writeResult._rev;\n            newData._attachments = writeResult._attachments;\n            this._dataSync$.next(newData);\n\n            return attachment;\n        });\n    return this._atomicQueue;\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: OldRxCollection\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(docPrimary, attachmentId);\n                newAttachments[attachmentId] = {\n                    digest: attachment.digest,\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachments data buffers directly in the document.\n     */\n    return PROMISE_RESOLVE_VOID;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$() {\n                    return this._dataSync$\n                        .pipe(\n                            map((data: any) => {\n                                if (!data['_attachments']) {\n                                    return {};\n                                }\n                                return data['_attachments'];\n                            }),\n                            map((attachmentsData: any) => Object.entries(\n                                attachmentsData\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n"],"mappings":"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"}