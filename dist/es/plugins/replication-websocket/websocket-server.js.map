{"version":3,"file":"websocket-server.js","names":["WebSocketServer","rxStorageInstanceToReplicationHandler","PROMISE_RESOLVE_VOID","startWebsocketServer","options","wss","port","path","closed","closeServer","Promise","res","rej","clients","ws","close","err","database","onDestroy","push","replicationHandlerByCollection","Map","getReplicationHandler","collectionName","collections","Error","handler","get","collection","storageInstance","conflictHandler","hashFunction","set","on","connection","onCloseHandlers","onclose","map","fn","messageString","message","JSON","parse","method","sub","masterChangeStream$","subscribe","ev","streamResponse","id","result","send","stringify","unsubscribe","params","response","server"],"sources":["../../../../src/plugins/replication-websocket/websocket-server.ts"],"sourcesContent":["import type {\n    RxReplicationHandler\n} from '../../types';\n\nimport {\n    WebSocketServer\n} from 'isomorphic-ws';\nimport type {\n    WebsocketMessageResponseType,\n    WebsocketMessageType,\n    WebsocketServerOptions,\n    WebsocketServerState\n} from './websocket-types';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol';\nimport {\n    PROMISE_RESOLVE_VOID\n} from '../../util';\n\nexport function startWebsocketServer(options: WebsocketServerOptions): WebsocketServerState {\n    const wss = new WebSocketServer({\n        port: options.port,\n        path: options.path\n    });\n    let closed = false;\n    function closeServer() {\n        if (closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        closed = true;\n        return new Promise<void>((res, rej) => {\n            /**\n             * We have to close all client connections,\n             * otherwise wss.close() will never call the callback.\n             * @link https://github.com/websockets/ws/issues/1288#issuecomment-360594458\n             */\n            for (const ws of wss.clients) {\n                ws.close();\n            }\n            wss.close((err) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            });\n        });\n    }\n\n    const database = options.database;\n\n    // auto close when the database gets destroyed\n    database.onDestroy.push(() => closeServer());\n\n    const replicationHandlerByCollection: Map<string, RxReplicationHandler<any, any>> = new Map();\n    function getReplicationHandler(collectionName: string): RxReplicationHandler<any, any> {\n        if (!database.collections[collectionName]) {\n            throw new Error('collection ' + collectionName + ' does not exist');\n        }\n        let handler = replicationHandlerByCollection.get(collectionName);\n        if (!handler) {\n            const collection = database.collections[collectionName];\n            handler = rxStorageInstanceToReplicationHandler(\n                collection.storageInstance,\n                collection.conflictHandler,\n                database.hashFunction\n            );\n            replicationHandlerByCollection.set(collectionName, handler);\n        }\n        return handler;\n    }\n\n    wss.on('connection', function connection(ws) {\n        const onCloseHandlers: Function[] = [];\n        ws.onclose = () => {\n            onCloseHandlers.map(fn => fn())\n        }\n        ws.on('message', async (messageString: string) => {\n            const message: WebsocketMessageType = JSON.parse(messageString);\n            const handler = getReplicationHandler(message.collection);\n            const method = handler[message.method];\n\n            /**\n             * If it is not a function,\n             * it means that the client requested the masterChangeStream$\n             */\n            if (typeof method !== 'function') {\n                const sub = handler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: WebsocketMessageResponseType = {\n                        id: 'stream',\n                        collection: message.collection,\n                        result: ev\n                    };\n                    ws.send(JSON.stringify(streamResponse));\n                });\n                onCloseHandlers.push(() => sub.unsubscribe());\n                return;\n            }\n            const result = await (method as any)(...message.params);\n            const response: WebsocketMessageResponseType = {\n                id: message.id,\n                collection: message.collection,\n                result\n            };\n            ws.send(JSON.stringify(response));\n        });\n    });\n\n    return {\n        server: wss,\n        close: closeServer\n    };\n}\n"],"mappings":"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"}