{"version":3,"file":"websocket-client.js","names":["replicateRxCollection","ReconnectingWebSocket","IsomorphicWebSocket","getFromMapOrThrow","randomCouchString","filter","map","Subject","firstValueFrom","BehaviorSubject","newRxError","ensureIsWebsocket","w","is","CLOSING","console","dir","Error","replicateWithWebsocketServer","options","getWebSocket","url","collection","database","socketState","wsClient","socket","messages$","message$","requestCounter","getRequestId","count","token","requestFlag","replicationState","replicationIdentifier","pull","batchSize","stream$","pipe","msg","id","name","result","handler","lastPulledCheckpoint","requestId","request","method","params","send","JSON","stringify","push","docs","error$","subscribe","err","subjects","error","next","connected$","isConnected","reSync","streamRequest","onDestroy","removeWebSocketRef","cacheKey","has","WEBSOCKET_BY_CACHE_KEY","get","WebSocket","openPromise","Promise","res","onopen","onclose","onmessage","messageObj","message","parse","data","onerror","emitError","errors","Array","isArray","direction","refCount","set","Map","obj","complete","close"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import { replicateRxCollection, RxReplicationState } from '../replication';\nimport {\n    WebsocketClientOptions,\n    WebsocketMessageResponseType,\n    WebsocketMessageType\n} from './websocket-types';\n\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport IsomorphicWebSocket from 'isomorphic-ws';\nimport {\n    getFromMapOrThrow,\n    randomCouchString\n} from '../../util';\nimport {\n    filter,\n    map,\n    Subject,\n    firstValueFrom,\n    BehaviorSubject\n} from 'rxjs';\nimport {\n    RxDatabase,\n    RxError,\n    RxReplicationWriteToMasterRow\n} from '../../types';\nimport { newRxError } from '../../rx-error';\n\nexport type WebsocketWithRefCount = {\n    url: string;\n    socket: ReconnectingWebSocket;\n    refCount: number;\n    openPromise: Promise<void>;\n    connected$: BehaviorSubject<boolean>;\n    message$: Subject<WebsocketMessageResponseType>;\n    error$: Subject<RxError>\n};\n\n\n/**\n * Copied and adapter from the 'reconnecting-websocket' npm module.\n * Some bundlers have problems with bundling the isomorphic-ws plugin\n * so we directly check the correctness in RxDB to ensure that we can\n * throw a helpfull error.\n */\nfunction ensureIsWebsocket(w: typeof IsomorphicWebSocket) {\n    const is = typeof w !== 'undefined' && !!w && w.CLOSING === 2;\n    if (!is) {\n        console.dir(w);\n        throw new Error('websocket not valid');\n    }\n}\n\n/**\n * Reuse the same socket even when multiple\n * collection replicate with the same server at once.\n */\nexport const WEBSOCKET_BY_CACHE_KEY: Map<string, WebsocketWithRefCount> = new Map();\nexport async function getWebSocket(\n    url: string,\n    database: RxDatabase<any, any, any>\n): Promise<WebsocketWithRefCount> {\n    /**\n     * Also use the database token as cache-key\n     * to make it easier to test and debug\n     * multi-instance setups.\n     */\n    const cacheKey = url + '|||' + database.token;\n\n    let has = WEBSOCKET_BY_CACHE_KEY.get(cacheKey);\n    if (!has) {\n        ensureIsWebsocket(IsomorphicWebSocket);\n        const wsClient = new ReconnectingWebSocket(\n            url,\n            [],\n            {\n                WebSocket: IsomorphicWebSocket\n            }\n        );\n\n        const connected$ = new BehaviorSubject<boolean>(false);\n        const openPromise = new Promise<void>(res => {\n            wsClient.onopen = () => {\n                connected$.next(true);\n                res();\n            };\n        });\n        wsClient.onclose = () => {\n            connected$.next(false);\n        };\n\n        const message$ = new Subject<WebsocketMessageResponseType>();\n        wsClient.onmessage = (messageObj) => {\n            const message: WebsocketMessageResponseType = JSON.parse(messageObj.data);\n            message$.next(message);\n        };\n\n        const error$ = new Subject<any>();\n        wsClient.onerror = (err) => {\n            const emitError = newRxError('RC_STREAM', {\n                errors: Array.isArray(err) ? err as any : [err],\n                direction: 'pull'\n            });\n            error$.next(emitError);\n        }\n\n\n        has = {\n            url,\n            socket: wsClient,\n            openPromise,\n            refCount: 1,\n            connected$,\n            message$,\n            error$\n        };\n        WEBSOCKET_BY_CACHE_KEY.set(cacheKey, has);\n    } else {\n        has.refCount = has.refCount + 1;\n    }\n\n\n    await has.openPromise;\n    return has;\n}\n\nexport function removeWebSocketRef(\n    url: string,\n    database: RxDatabase\n) {\n    const cacheKey = url + '|||' + database.token;\n    const obj = getFromMapOrThrow(WEBSOCKET_BY_CACHE_KEY, cacheKey);\n    obj.refCount = obj.refCount - 1;\n    if (obj.refCount === 0) {\n        WEBSOCKET_BY_CACHE_KEY.delete(cacheKey);\n        obj.connected$.complete();\n        obj.socket.close();\n    }\n}\n\n\n\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\n    options: WebsocketClientOptions<RxDocType>\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\n    const socketState = await getWebSocket(options.url, options.collection.database);\n    const wsClient = socketState.socket;\n\n    const messages$ = socketState.message$;\n\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\n    }\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\n        collection: options.collection,\n        replicationIdentifier: 'websocket-' + options.url,\n        pull: {\n            batchSize: options.batchSize,\n            stream$: messages$.pipe(\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\n                map(msg => msg.result)\n            ),\n            async handler(lastPulledCheckpoint: CheckpointType, batchSize: number) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterChangesSince',\n                    params: [lastPulledCheckpoint, batchSize]\n                }\n                wsClient.send(JSON.stringify(request));\n                const result = await firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n                return result;\n            }\n        },\n        push: {\n            batchSize: options.batchSize,\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterWrite',\n                    params: [docs]\n                }\n                wsClient.send(JSON.stringify(request));\n                return firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n            }\n        }\n    });\n\n    socketState.error$.subscribe(err => replicationState.subjects.error.next(err));\n\n    socketState.connected$.subscribe(isConnected => {\n        if (isConnected) {\n            /**\n             * When the client goes offline and online again,\n             * we have to send a 'RESYNC' signal because the client\n             * might have missed out events while being offline.\n             */\n            replicationState.reSync();\n\n            /**\n             * Because reconnecting creates a new websocket-instance,\n             * we have to start the changestream from the remote again\n             * each time.\n             */\n            const streamRequest: WebsocketMessageType = {\n                id: 'stream',\n                collection: options.collection.name,\n                method: 'masterChangeStream$',\n                params: []\n            }\n            wsClient.send(JSON.stringify(streamRequest));\n        }\n    });\n\n    options.collection.onDestroy.push(() => removeWebSocketRef(options.url, options.collection.database));\n    return replicationState;\n}\n"],"mappings":"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"}