{"version":3,"file":"pouch-statics.js","names":["filterInMemoryFields","massageSelector","newRxError","getPouchIndexDesignDocNameByIndex","POUCHDB_CHECKPOINT_SCHEMA","pouchSwapPrimaryToId","primarySwapPouchDbQuerySelector","getPrimaryFieldOfPrimaryKey","getSchemaByObjectPath","overwritable","ensureNotFalsy","isMaybeReadonlyArray","RxStoragePouchStatics","getSortComparator","schema","query","primaryPath","primaryKey","sortOptions","sort","selector","inMemoryFields","Object","keys","filter","key","startsWith","fun","a","b","args","rows","map","doc","sortedRows","length","_id","getQueryMatcher","massagedSelector","_deleted","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","preparePouchDbQuery","checkpointSchema","forEach","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","type","$gt","isDevMode","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","k","v","Array","isArray","index","indexMaybeArray","indexArray","str","indexName","use_index"],"sources":["../../../../src/plugins/pouchdb/pouch-statics.ts"],"sourcesContent":["import {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { newRxError } from '../../rx-error';\n\nimport {\n    getPouchIndexDesignDocNameByIndex,\n    POUCHDB_CHECKPOINT_SCHEMA,\n    pouchSwapPrimaryToId,\n    primarySwapPouchDbQuerySelector\n} from './pouchdb-helper';\nimport type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport {\n    getPrimaryFieldOfPrimaryKey,\n    getSchemaByObjectPath\n} from '../../rx-schema-helper';\nimport type {\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    PreparedQuery,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageStatics,\n    StringKeys\n} from '../../types';\nimport { overwritable } from '../../overwritable';\nimport { ensureNotFalsy, isMaybeReadonlyArray } from '../../util';\n\nexport const RxStoragePouchStatics: RxStorageStatics = {\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath: StringKeys<RxDocType> = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as any;\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const selector = query.selector ? query.selector : {};\n        const inMemoryFields = Object\n            .keys(selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    },\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const selector = query.selector ? query.selector : {};\n        const massagedSelector = massageSelector(selector);\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cloned = pouchSwapPrimaryToId(primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    },\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        return preparePouchDbQuery(\n            schema,\n            mutateableQuery\n        );\n    },\n    checkpointSchema: POUCHDB_CHECKPOINT_SCHEMA\n};\n\n/**\n * pouchdb has many bugs and strange behaviors\n * this functions takes a normal mango query\n * and transforms it to one that fits for pouchdb\n */\nexport function preparePouchDbQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mutateableQuery: MangoQuery<RxDocType>\n): PreparedQuery<RxDocType> {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const query = mutateableQuery;\n\n    /**\n     * because sort wont work on unused keys we have to workaround\n     * so we add the key to the selector if necessary\n     * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n     */\n    if (query.sort) {\n        query.sort.forEach(sortPart => {\n            const key = Object.keys(sortPart)[0];\n            const comparisonOperators = ['$gt', '$gte', '$lt', '$lte', '$eq'];\n            const keyUsed = query.selector && query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op));\n\n            if (!keyUsed) {\n                const schemaObj = getSchemaByObjectPath(schema, key);\n                if (!schemaObj) {\n                    throw newRxError('QU5', {\n                        query,\n                        key,\n                        schema\n                    });\n                }\n                if (!query.selector) {\n                    query.selector = {};\n                }\n                if (!query.selector[key]) {\n                    query.selector[key] = {};\n                }\n                switch (schemaObj.type) {\n                    case 'number':\n                    case 'integer':\n                        // TODO change back to -Infinity when issue resolved\n                        // @link https://github.com/pouchdb/pouchdb/issues/6454\n                        // -Infinity does not work since pouchdb 6.2.0\n                        query.selector[key].$gt = -9999999999999999999999999999;\n                        break;\n                    case 'string':\n                        /**\n                         * strings need an empty string, see\n                         * @link https://github.com/pubkey/rxdb/issues/585\n                         */\n                        if (typeof query.selector[key] !== 'string') {\n                            query.selector[key].$gt = '';\n                        }\n                        break;\n                    default:\n                        query.selector[key].$gt = null;\n                        break;\n                }\n            }\n        });\n    }\n\n    // regex does not work over the primary key\n    if (\n        overwritable.isDevMode() &&\n        query.selector &&\n        query.selector[primaryKey as any] &&\n        query.selector[primaryKey as any].$regex\n    ) {\n        throw newRxError('QU4', {\n            path: primaryKey as any,\n            query: mutateableQuery\n        });\n    }\n\n    // primary-swap sorting\n    if (query.sort) {\n        const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n            const key = Object.keys(part)[0];\n            const direction: MangoQuerySortDirection = Object.values(part)[0];\n            const useKey = key === primaryKey ? '_id' : key;\n            const newPart = { [useKey]: direction };\n            return newPart as any;\n        });\n        query.sort = sortArray;\n    }\n\n    // strip empty selectors\n    Object.entries(ensureNotFalsy(query.selector)).forEach(([k, v]) => {\n        if (\n            typeof v === 'object' &&\n            v !== null &&\n            !Array.isArray(v) &&\n            Object.keys((v as any)).length === 0\n        ) {\n            delete ensureNotFalsy(query.selector)[k];\n        }\n    });\n\n    /**\n     * Set use_index\n     * @link https://pouchdb.com/guides/mango-queries.html#use_index\n     */\n    if (mutateableQuery.index) {\n        const indexMaybeArray = mutateableQuery.index;\n        let indexArray: string[] = isMaybeReadonlyArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n        indexArray = indexArray.map(str => {\n            if (str === primaryKey) {\n                return '_id';\n            } else {\n                return str;\n            }\n        });\n        const indexName = getPouchIndexDesignDocNameByIndex(indexArray);\n        delete mutateableQuery.index;\n        (mutateableQuery as any).use_index = indexName;\n    }\n\n    query.selector = primarySwapPouchDbQuerySelector(query.selector, primaryKey);\n\n    return query;\n}\n"],"mappings":"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"}