{"version":3,"file":"pouch-statics.js","names":["filterInMemoryFields","massageSelector","newRxError","getPouchIndexDesignDocNameByIndex","POUCHDB_CHECKPOINT_SCHEMA","pouchSwapPrimaryToId","primarySwapPouchDbQuerySelector","getPrimaryFieldOfPrimaryKey","getSchemaByObjectPath","overwritable","ensureNotFalsy","flatClone","isMaybeReadonlyArray","RxStoragePouchStatics","getSortComparator","schema","query","primaryPath","primaryKey","sortOptions","sort","selector","inMemoryFields","Object","keys","filter","key","startsWith","fun","a","b","args","rows","map","doc","sortedRows","length","_id","getQueryMatcher","massagedSelector","_deleted","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","preparePouchDbQuery","checkpointSchema","forEach","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","type","$gt","isDevMode","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","k","v","Array","isArray","index","indexMaybeArray","indexArray","str","indexName","use_index"],"sources":["../../../../src/plugins/pouchdb/pouch-statics.ts"],"sourcesContent":["import {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { newRxError } from '../../rx-error';\n\nimport {\n    getPouchIndexDesignDocNameByIndex,\n    POUCHDB_CHECKPOINT_SCHEMA,\n    pouchSwapPrimaryToId,\n    primarySwapPouchDbQuerySelector\n} from './pouchdb-helper';\nimport type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport {\n    getPrimaryFieldOfPrimaryKey,\n    getSchemaByObjectPath\n} from '../../rx-schema-helper';\nimport type {\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    PreparedQuery,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageStatics,\n    StringKeys\n} from '../../types';\nimport { overwritable } from '../../overwritable';\nimport { ensureNotFalsy, flatClone, isMaybeReadonlyArray } from '../../util';\n\nexport const RxStoragePouchStatics: RxStorageStatics = {\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath: StringKeys<RxDocType> = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as any;\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const selector = query.selector ? query.selector : {};\n        const inMemoryFields = Object\n            .keys(selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    },\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const selector = query.selector ? query.selector : {};\n        const massagedSelector = massageSelector(selector);\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cloned = pouchSwapPrimaryToId(primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    },\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        return preparePouchDbQuery(\n            schema,\n            mutateableQuery\n        );\n    },\n    checkpointSchema: POUCHDB_CHECKPOINT_SCHEMA\n};\n\n/**\n * pouchdb has many bugs and strange behaviors\n * this functions takes a normal mango query\n * and transforms it to one that fits for pouchdb\n */\nexport function preparePouchDbQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mutateableQuery: MangoQuery<RxDocType>\n): PreparedQuery<RxDocType> {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const query = flatClone(mutateableQuery);\n    if (query.selector) {\n        query.selector = flatClone(query.selector);\n    }\n\n    /**\n     * because sort won't work on unused keys we have to workaround\n     * so we add the key to the selector if necessary\n     * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n     */\n    if (query.sort) {\n        query.sort.forEach(sortPart => {\n            const key = Object.keys(sortPart)[0];\n            const comparisonOperators = ['$gt', '$gte', '$lt', '$lte', '$eq'];\n            const keyUsed = query.selector && query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op));\n\n            if (!keyUsed) {\n                const schemaObj = getSchemaByObjectPath(schema, key);\n                if (!schemaObj) {\n                    throw newRxError('QU5', {\n                        query,\n                        key,\n                        schema\n                    });\n                }\n                if (!query.selector) {\n                    query.selector = {};\n                }\n                if (!query.selector[key]) {\n                    query.selector[key] = {};\n                }\n                switch (schemaObj.type) {\n                    case 'number':\n                    case 'integer':\n                        // TODO change back to -Infinity when issue resolved\n                        // @link https://github.com/pouchdb/pouchdb/issues/6454\n                        // -Infinity does not work since pouchdb 6.2.0\n                        query.selector[key].$gt = -9999999999999999999999999999;\n                        break;\n                    case 'string':\n                        /**\n                         * strings need an empty string, see\n                         * @link https://github.com/pubkey/rxdb/issues/585\n                         */\n                        if (typeof query.selector[key] !== 'string') {\n                            query.selector[key].$gt = '';\n                        }\n                        break;\n                    default:\n                        query.selector[key].$gt = null;\n                        break;\n                }\n            }\n        });\n    }\n\n    // regex does not work over the primary key\n    if (\n        overwritable.isDevMode() &&\n        query.selector &&\n        query.selector[primaryKey as any] &&\n        query.selector[primaryKey as any].$regex\n    ) {\n        throw newRxError('QU4', {\n            path: primaryKey as any,\n            query: mutateableQuery\n        });\n    }\n\n    // primary-swap sorting\n    if (query.sort) {\n        const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n            const key = Object.keys(part)[0];\n            const direction: MangoQuerySortDirection = Object.values(part)[0];\n            const useKey = key === primaryKey ? '_id' : key;\n            const newPart = { [useKey]: direction };\n            return newPart as any;\n        });\n        query.sort = sortArray;\n    }\n\n    // strip empty selectors\n    Object.entries(ensureNotFalsy(query.selector)).forEach(([k, v]) => {\n        if (\n            typeof v === 'object' &&\n            v !== null &&\n            !Array.isArray(v) &&\n            Object.keys((v as any)).length === 0\n        ) {\n            delete ensureNotFalsy(query.selector)[k];\n        }\n    });\n\n    /**\n     * Set use_index\n     * @link https://pouchdb.com/guides/mango-queries.html#use_index\n     */\n    if (mutateableQuery.index) {\n        const indexMaybeArray = mutateableQuery.index;\n        let indexArray: string[] = isMaybeReadonlyArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n        indexArray = indexArray.map(str => {\n            if (str === primaryKey) {\n                return '_id';\n            } else {\n                return str;\n            }\n        });\n        const indexName = getPouchIndexDesignDocNameByIndex(indexArray);\n        delete query.index;\n        (query as any).use_index = indexName;\n    }\n\n    query.selector = primarySwapPouchDbQuerySelector(query.selector, primaryKey);\n\n    return query;\n}\n"],"mappings":"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"}