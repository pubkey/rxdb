{"version":3,"file":"rx-storage-instance-pouch.js","names":["ObliviousSet","Subject","newRxError","OPEN_POUCHDB_STORAGE_INSTANCES","OPEN_POUCH_INSTANCES","POUCHDB_DESIGN_PREFIX","pouchDocumentDataToRxDocumentData","pouchSwapIdToPrimary","rxDocumentDataToPouchDocumentData","writeAttachmentsToAttachments","blobBufferUtil","flatClone","getFromMapOrThrow","getFromObjectOrThrow","lastOfArray","PROMISE_RESOLVE_VOID","getCustomEventEmitterByPouch","getPrimaryFieldOfPrimaryKey","_settle","pact","state","value","s","_Pact","v","o","bind","then","observer","pouchFindDocumentsById","instance","ids","deleted","ensureNotClosed","ret","nonParallelQueue","internals","pouch","changes","live","since","doc_ids","style","viaChanges","Promise","all","results","map","result","get","id","rev","firstDoc","useFirstDoc","primaryPath","allDocs","include_docs","keys","pouchResult","rows","filter","row","doc","forEach","docData","prototype","onFulfilled","onRejected","callback","e","_this","_isSettledPact","thenable","_for","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","lastId","RxStorageInstancePouch","storage","databaseName","collectionName","schema","options","changes$","subs","closed","add","primaryKey","emitter","emittedEventBulkIds","eventSub","subject","subscribe","eventBulk","events","length","has","event","change","previous","next","push","close","sub","unsubscribe","pouchInstanceId","remove","destroy","bulkWrite","documentWrites","context","args","writeRowById","Map","insertDocsById","writeDocs","writeData","document","_meta","lwt","_rev","primary","set","storeDocumentData","previousDocsInDb","success","error","bulkDocs","new_edits","custom","resultRow","writeRow","previousDoc","err","isError","status","documentId","documentInDb","pushObj","_attachments","query","preparedQuery","find","findResult","documents","docs","pouchDoc","useDoc","getAttachmentData","attachmentId","getAttachment","attachmentData","isBuffer","Buffer","Blob","toBase64String","findDocumentsById","changeStream","asObservable","cleanup","_minimumDeletedTime","compact","getChangedDocumentsSince","limit","checkpoint","changedDocuments","documentsData","Object","sequence","lastSequence","Error","lastRow","changeRow","pouchChangesOpts","descending","first","skippedDesignDocuments","pouchResults","addChangedDocuments","isDesignDoc","startsWith","seq","concat","last_seq","conflictResultionTasks","resolveConflictResultionTask","_taskSolution"],"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"sourcesContent":["import { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive,\n    PouchCheckpoint,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    OPEN_POUCH_INSTANCES,\n    POUCHDB_DESIGN_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getFromMapOrThrow,\n    getFromObjectOrThrow,\n    lastOfArray,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\n\nlet lastId = 0;\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings,\n    PouchCheckpoint\n> {\n    public readonly id: number = lastId++;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>> = new Subject();\n    private subs: Subscription[] = [];\n    public primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed: boolean = false;\n\n\n    /**\n     * Some PouchDB operations give wrong results when they run in parallel.\n     * So we have to ensure they are queued up.\n     */\n    public nonParallelQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    constructor(\n        public readonly storage: RxStorage<PouchStorageInternals, PouchSettings>,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch<RxDocType>(this.internals.pouch);\n\n        /**\n         * Contains all eventIds that of emitted events,\n         * used because multi-instance pouchdbs often will reemit the same\n         * event on the other browser tab so we have to de-duplicate them.\n         */\n        const emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n        const eventSub = emitter.subject.subscribe((eventBulk) => {\n            if (\n                eventBulk.events.length === 0 ||\n                emittedEventBulkIds.has(eventBulk.id)\n            ) {\n                return;\n            }\n            emittedEventBulkIds.add(eventBulk.id);\n\n            // rewrite primaryPath of all events\n            eventBulk.events.forEach(event => {\n                if (event.change.doc) {\n                    event.change.doc = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.doc as any\n                    );\n                }\n                if (event.change.previous) {\n                    event.change.previous = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.previous as any\n                    );\n                }\n            });\n\n            this.changes$.next(eventBulk);\n        });\n        this.subs.push(eventSub);\n    }\n\n    close() {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        OPEN_POUCH_INSTANCES.delete(this.internals.pouchInstanceId);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        OPEN_POUCH_INSTANCES.delete(this.internals.pouchInstanceId);\n\n        await this.internals.pouch.destroy();\n    }\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        ensureNotClosed(this);\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n        const insertDocsById: Map<string, any> = new Map();\n        const writeDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n\n            /**\n             * Ensure that _meta.lwt is set correctly\n             */\n            if (\n                writeData.document._meta.lwt < 1000 ||\n                (\n                    writeData.previous &&\n                    writeData.previous._meta.lwt >= writeData.document._meta.lwt\n                )\n            ) {\n                throw newRxError('SNH', {\n                    args: writeData\n                });\n            }\n\n            /**\n             * Ensure that a revision exists,\n             * having an empty revision here would not throw\n             * but just not resolve forever.\n             */\n            if (!writeData.document._rev) {\n                throw newRxError('SNH', {\n                    args: writeData\n                });\n            }\n\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n            insertDocsById.set(primary, storeDocumentData);\n            return storeDocumentData;\n        });\n\n        const previousDocsInDb: Map<string, RxDocumentData<any>> = new Map();\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n            const pouchResult = await this.internals.pouch.bulkDocs(writeDocs, {\n                new_edits: false,\n                custom: {\n                    primaryPath: this.primaryPath,\n                    writeRowById,\n                    insertDocsById,\n                    previousDocsInDb,\n                    context\n                }\n            } as any);\n            return Promise.all(\n                pouchResult.map(async (resultRow) => {\n                    const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                    if ((resultRow as PouchWriteError).error) {\n                        const previousDoc = getFromMapOrThrow(previousDocsInDb, resultRow.id);\n                        const err: RxStorageBulkWriteError<RxDocType> = {\n                            isError: true,\n                            status: 409,\n                            documentId: resultRow.id,\n                            writeRow,\n                            documentInDb: pouchDocumentDataToRxDocumentData(\n                                this.primaryPath,\n                                previousDoc\n                            )\n                        };\n                        ret.error[resultRow.id] = err;\n                    } else {\n                        let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                        pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                        pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                        // replace the inserted attachments with their diggest\n                        pushObj._attachments = {};\n                        if (!writeRow.document._attachments) {\n                            writeRow.document._attachments = {};\n                        } else {\n                            pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                        }\n                        ret.success[resultRow.id] = pushObj;\n                    }\n                })\n            );\n        });\n        await this.nonParallelQueue;\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<string> {\n        ensureNotClosed(this);\n        let attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n\n        /**\n         * In Node.js, PouchDB works with Buffers because it is old and Node.js did\n         * not support Blob at the time is was coded.\n         * So here we have to transform the Buffer to a Blob.\n         */\n        const isBuffer = typeof Buffer !== 'undefined' && Buffer.isBuffer(attachmentData);\n        if (isBuffer) {\n            attachmentData = new Blob([attachmentData]);\n        }\n\n        const ret = await blobBufferUtil.toBase64String(attachmentData);\n        return ret;\n    }\n\n    findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        return pouchFindDocumentsById<RxDocType>(\n            this,\n            ids,\n            deleted\n        );\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    cleanup(_minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        /**\n         * PouchDB does not support purging documents.\n         * So instead we run a compaction that might at least help a bit\n         * in freeing up disc space.\n         * @link https://github.com/pouchdb/pouchdb/issues/802\n         */\n        return this.internals.pouch\n            .compact()\n            .then(() => true);\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: PouchCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: PouchCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        if (!limit || typeof limit !== 'number') {\n            throw new Error('wrong limit');\n        }\n\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: limit,\n            include_docs: false,\n            since: checkpoint ? checkpoint.sequence : 0,\n            descending: false\n        };\n\n        let lastSequence = 0;\n        let first = true;\n        let skippedDesignDocuments = 0;\n        let changedDocuments: { id: string; sequence: number; }[] = [];\n        /**\n         * Because PouchDB also returns changes of _design documents,\n         * we have to fill up the results with more changes if this happens.\n         */\n        while (first || skippedDesignDocuments > 0) {\n            first = false;\n            skippedDesignDocuments = 0;\n            const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n            const addChangedDocuments = pouchResults.results\n                .filter(row => {\n                    const isDesignDoc = row.id.startsWith(POUCHDB_DESIGN_PREFIX);\n                    if (isDesignDoc) {\n                        skippedDesignDocuments = skippedDesignDocuments + 1;\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })\n                .map(row => ({\n                    id: row.id,\n                    sequence: row.seq\n                }));\n            changedDocuments = changedDocuments.concat(addChangedDocuments);\n            lastSequence = pouchResults.last_seq;\n\n            // modify pouch options for next run of pouch.changes()\n            pouchChangesOpts.since = lastSequence;\n            pouchChangesOpts.limit = skippedDesignDocuments;\n        }\n\n        const documentsData = await pouchFindDocumentsById<RxDocType>(\n            this,\n            changedDocuments.map(o => o.id),\n            true\n        );\n\n        if (\n            Object.keys(documentsData).length > 0 &&\n            checkpoint && checkpoint.sequence === lastSequence\n        ) {\n            /**\n             * When documents are returned, it makes no sense\n             * if the sequence is equal to the one given at the checkpoint.\n             */\n            throw new Error('same sequence');\n        }\n\n        const lastRow = lastOfArray(changedDocuments);\n        const documents = changedDocuments.map(changeRow => getFromObjectOrThrow(documentsData, changeRow.id));\n\n        return {\n            documents,\n            checkpoint: lastRow ? {\n                sequence: lastRow.sequence\n            } : checkpoint ? checkpoint : {\n                sequence: -1\n            }\n        }\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstancePouch<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstancePouch is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n\n\n/**\n * Because we internally use the findDocumentsById()\n * method, it is defined here because RxStorage wrappers\n * might swap out the function.\n */\nasync function pouchFindDocumentsById<RxDocType>(\n    instance: RxStorageInstancePouch<RxDocType>,\n    ids: string[],\n    deleted: boolean\n): Promise<RxDocumentDataById<RxDocType>> {\n    ensureNotClosed(instance);\n    const ret: RxDocumentDataById<RxDocType> = {};\n\n    /**\n     * On deleted documents, PouchDB will only return the tombstone.\n     * So we have to get the properties directly for each document\n     * with the hack of getting the changes and then make one request per document\n     * with the latest revision.\n     * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n     * when one past revision was written via new_edits=false\n     * @link https://stackoverflow.com/a/63516761/3443137\n     */\n    if (deleted) {\n        instance.nonParallelQueue = instance.nonParallelQueue.then(async () => {\n            const viaChanges = await instance.internals.pouch.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n            await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await instance.internals.pouch.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            style: 'all_docs'\n                        }\n                    );\n                    const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                        instance.primaryPath,\n                        firstDoc\n                    );\n                    ret[result.id] = useFirstDoc;\n                })\n            );\n        });\n        await instance.nonParallelQueue;\n        return ret;\n    } else {\n        instance.nonParallelQueue = instance.nonParallelQueue.then(async () => {\n            const pouchResult = await instance.internals.pouch.allDocs({\n                include_docs: true,\n                keys: ids\n            });\n            pouchResult.rows\n                .filter(row => !!row.doc)\n                .forEach(row => {\n                    let docData = row.doc;\n                    docData = pouchDocumentDataToRxDocumentData(\n                        instance.primaryPath,\n                        docData\n                    );\n                    ret[row.id] = docData;\n                });\n        });\n        await instance.nonParallelQueue;\n        return ret;\n    }\n}\n"],"mappings":"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"}