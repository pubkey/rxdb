{"version":3,"file":"rx-storage-instance-pouch.js","names":["ObliviousSet","Subject","newRxError","OPEN_POUCHDB_STORAGE_INSTANCES","OPEN_POUCH_INSTANCES","POUCHDB_DESIGN_PREFIX","pouchDocumentDataToRxDocumentData","pouchSwapIdToPrimary","rxDocumentDataToPouchDocumentData","writeAttachmentsToAttachments","blobBufferUtil","flatClone","getFromMapOrThrow","getFromObjectOrThrow","lastOfArray","PROMISE_RESOLVE_VOID","getCustomEventEmitterByPouch","getPrimaryFieldOfPrimaryKey","_settle","pact","state","value","s","_Pact","v","o","bind","then","observer","pouchFindDocumentsById","instance","ids","deleted","ensureNotClosed","ret","nonParallelQueue","internals","pouch","changes","live","since","doc_ids","style","viaChanges","Promise","all","results","map","result","get","id","rev","firstDoc","useFirstDoc","primaryPath","allDocs","include_docs","keys","pouchResult","rows","filter","row","doc","forEach","docData","prototype","onFulfilled","onRejected","callback","e","_this","_isSettledPact","thenable","_for","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","lastId","RxStorageInstancePouch","storage","databaseName","collectionName","schema","options","changes$","subs","closed","add","primaryKey","emitter","emittedEventBulkIds","eventSub","subject","subscribe","eventBulk","events","length","has","event","documentData","previousDocumentData","next","push","close","sub","unsubscribe","pouchInstanceId","remove","destroy","bulkWrite","documentWrites","context","args","writeRowById","Map","insertDocsById","writeDocs","writeData","document","_meta","lwt","previous","_rev","primary","set","storeDocumentData","previousDocsInDb","success","error","bulkDocs","new_edits","custom","resultRow","writeRow","previousDoc","err","isError","status","documentId","documentInDb","pushObj","_attachments","query","preparedQuery","find","findResult","documents","docs","pouchDoc","useDoc","count","mode","getAttachmentData","attachmentId","getAttachment","attachmentData","isBuffer","Buffer","Blob","toBase64String","findDocumentsById","changeStream","asObservable","cleanup","_minimumDeletedTime","compact","getChangedDocumentsSince","limit","checkpoint","changedDocuments","documentsData","Object","sequence","lastSequence","Error","lastRow","changeRow","pouchChangesOpts","descending","first","skippedDesignDocuments","pouchResults","addChangedDocuments","isDesignDoc","startsWith","seq","concat","last_seq","conflictResultionTasks","resolveConflictResultionTask","_taskSolution"],"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"sourcesContent":["import { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive,\n    PouchCheckpoint,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstance,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    OPEN_POUCH_INSTANCES,\n    POUCHDB_DESIGN_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getFromMapOrThrow,\n    getFromObjectOrThrow,\n    lastOfArray,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\n\nlet lastId = 0;\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings,\n    PouchCheckpoint\n> {\n    public readonly id: number = lastId++;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>> = new Subject();\n    private subs: Subscription[] = [];\n    public primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed: boolean = false;\n\n\n    /**\n     * Some PouchDB operations give wrong results when they run in parallel.\n     * So we have to ensure they are queued up.\n     */\n    public nonParallelQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    constructor(\n        public readonly storage: RxStorage<PouchStorageInternals, PouchSettings>,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more reliable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch<RxDocType>(this.internals.pouch);\n\n        /**\n         * Contains all eventIds that of emitted events,\n         * used because multi-instance pouchdbs often will reemit the same\n         * event on the other browser tab so we have to de-duplicate them.\n         */\n        const emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n        const eventSub = emitter.subject.subscribe((eventBulk) => {\n            if (\n                eventBulk.events.length === 0 ||\n                emittedEventBulkIds.has(eventBulk.id)\n            ) {\n                return;\n            }\n            emittedEventBulkIds.add(eventBulk.id);\n\n            // rewrite primaryPath of all events\n            eventBulk.events.forEach(event => {\n                if (event.documentData) {\n                    event.documentData = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.documentData as any\n                    );\n                }\n                if (event.previousDocumentData) {\n                    event.previousDocumentData = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.previousDocumentData as any\n                    );\n                }\n            });\n            this.changes$.next(eventBulk);\n        });\n        this.subs.push(eventSub);\n    }\n\n    close() {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        OPEN_POUCH_INSTANCES.delete(this.internals.pouchInstanceId);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        OPEN_POUCH_INSTANCES.delete(this.internals.pouchInstanceId);\n\n        await this.internals.pouch.destroy();\n    }\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        ensureNotClosed(this);\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n        const insertDocsById: Map<string, any> = new Map();\n        const writeDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n\n            /**\n             * Ensure that _meta.lwt is set correctly\n             */\n            if (\n                writeData.document._meta.lwt < 1000 ||\n                (\n                    writeData.previous &&\n                    writeData.previous._meta.lwt >= writeData.document._meta.lwt\n                )\n            ) {\n                throw newRxError('SNH', {\n                    args: writeData\n                });\n            }\n\n            /**\n             * Ensure that a revision exists,\n             * having an empty revision here would not throw\n             * but just not resolve forever.\n             */\n            if (!writeData.document._rev) {\n                throw newRxError('SNH', {\n                    args: writeData\n                });\n            }\n\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n            insertDocsById.set(primary, storeDocumentData);\n            return storeDocumentData;\n        });\n\n        const previousDocsInDb: Map<string, RxDocumentData<any>> = new Map();\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n            const pouchResult = await this.internals.pouch.bulkDocs(writeDocs, {\n                new_edits: false,\n                custom: {\n                    primaryPath: this.primaryPath,\n                    writeRowById,\n                    insertDocsById,\n                    previousDocsInDb,\n                    context\n                }\n            } as any);\n            return Promise.all(\n                pouchResult.map(async (resultRow) => {\n                    const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                    if ((resultRow as PouchWriteError).error) {\n                        const previousDoc = getFromMapOrThrow(previousDocsInDb, resultRow.id);\n                        const err: RxStorageBulkWriteError<RxDocType> = {\n                            isError: true,\n                            status: 409,\n                            documentId: resultRow.id,\n                            writeRow,\n                            documentInDb: pouchDocumentDataToRxDocumentData(\n                                this.primaryPath,\n                                previousDoc\n                            )\n                        };\n                        ret.error[resultRow.id] = err;\n                    } else {\n                        let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                        pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                        pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                        // replace the inserted attachments with their diggest\n                        pushObj._attachments = {};\n                        if (!writeRow.document._attachments) {\n                            writeRow.document._attachments = {};\n                        } else {\n                            pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                        }\n                        ret.success[resultRow.id] = pushObj;\n                    }\n                })\n            );\n        });\n        await this.nonParallelQueue;\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n    async count(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        /**\n         * There is no count method in PouchDB,\n         * so we have to run a normal query and use the result length.\n         */\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<string> {\n        ensureNotClosed(this);\n        let attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n\n        /**\n         * In Node.js, PouchDB works with Buffers because it is old and Node.js did\n         * not support Blob at the time is was coded.\n         * So here we have to transform the Buffer to a Blob.\n         */\n        const isBuffer = typeof Buffer !== 'undefined' && Buffer.isBuffer(attachmentData);\n        if (isBuffer) {\n            attachmentData = new Blob([attachmentData]);\n        }\n\n        const ret = await blobBufferUtil.toBase64String(attachmentData);\n        return ret;\n    }\n\n    findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        return pouchFindDocumentsById<RxDocType>(\n            this,\n            ids,\n            deleted\n        );\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    cleanup(_minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        /**\n         * PouchDB does not support purging documents.\n         * So instead we run a compaction that might at least help a bit\n         * in freeing up disc space.\n         * @link https://github.com/pouchdb/pouchdb/issues/802\n         */\n        return this.internals.pouch\n            .compact()\n            .then(() => true);\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: PouchCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: PouchCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        if (!limit || typeof limit !== 'number') {\n            throw new Error('wrong limit');\n        }\n\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: limit,\n            include_docs: false,\n            since: checkpoint ? checkpoint.sequence : 0,\n            descending: false\n        };\n\n        let lastSequence = 0;\n        let first = true;\n        let skippedDesignDocuments = 0;\n        let changedDocuments: { id: string; sequence: number; }[] = [];\n        /**\n         * Because PouchDB also returns changes of _design documents,\n         * we have to fill up the results with more changes if this happens.\n         */\n        while (first || skippedDesignDocuments > 0) {\n            first = false;\n            skippedDesignDocuments = 0;\n            const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n            const addChangedDocuments = pouchResults.results\n                .filter(row => {\n                    const isDesignDoc = row.id.startsWith(POUCHDB_DESIGN_PREFIX);\n                    if (isDesignDoc) {\n                        skippedDesignDocuments = skippedDesignDocuments + 1;\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })\n                .map(row => ({\n                    id: row.id,\n                    sequence: row.seq\n                }));\n            changedDocuments = changedDocuments.concat(addChangedDocuments);\n            lastSequence = pouchResults.last_seq;\n\n            // modify pouch options for next run of pouch.changes()\n            pouchChangesOpts.since = lastSequence;\n            pouchChangesOpts.limit = skippedDesignDocuments;\n        }\n\n        const documentsData = await pouchFindDocumentsById<RxDocType>(\n            this,\n            changedDocuments.map(o => o.id),\n            true\n        );\n\n        if (\n            Object.keys(documentsData).length > 0 &&\n            checkpoint && checkpoint.sequence === lastSequence\n        ) {\n            /**\n             * When documents are returned, it makes no sense\n             * if the sequence is equal to the one given at the checkpoint.\n             */\n            throw new Error('same sequence');\n        }\n\n        const lastRow = lastOfArray(changedDocuments);\n        const documents = changedDocuments.map(changeRow => getFromObjectOrThrow(documentsData, changeRow.id));\n\n        return {\n            documents,\n            checkpoint: lastRow ? {\n                sequence: lastRow.sequence\n            } : checkpoint ? checkpoint : {\n                sequence: -1\n            }\n        }\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstancePouch<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstancePouch is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n\n\n/**\n * Because we internally use the findDocumentsById()\n * method, it is defined here because RxStorage wrappers\n * might swap out the function.\n */\nasync function pouchFindDocumentsById<RxDocType>(\n    instance: RxStorageInstancePouch<RxDocType>,\n    ids: string[],\n    deleted: boolean\n): Promise<RxDocumentDataById<RxDocType>> {\n    ensureNotClosed(instance);\n    const ret: RxDocumentDataById<RxDocType> = {};\n\n    /**\n     * On deleted documents, PouchDB will only return the tombstone.\n     * So we have to get the properties directly for each document\n     * with the hack of getting the changes and then make one request per document\n     * with the latest revision.\n     * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n     * when one past revision was written via new_edits=false\n     * @link https://stackoverflow.com/a/63516761/3443137\n     */\n    if (deleted) {\n        instance.nonParallelQueue = instance.nonParallelQueue.then(async () => {\n            const viaChanges = await instance.internals.pouch.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n            await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await instance.internals.pouch.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            style: 'all_docs'\n                        }\n                    );\n                    const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                        instance.primaryPath,\n                        firstDoc\n                    );\n                    ret[result.id] = useFirstDoc;\n                })\n            );\n        });\n        await instance.nonParallelQueue;\n        return ret;\n    } else {\n        instance.nonParallelQueue = instance.nonParallelQueue.then(async () => {\n            const pouchResult = await instance.internals.pouch.allDocs({\n                include_docs: true,\n                keys: ids\n            });\n            pouchResult.rows\n                .filter(row => !!row.doc)\n                .forEach(row => {\n                    let docData = row.doc;\n                    docData = pouchDocumentDataToRxDocumentData(\n                        instance.primaryPath,\n                        docData\n                    );\n                    ret[row.id] = docData;\n                });\n        });\n        await instance.nonParallelQueue;\n        return ret;\n    }\n}\n"],"mappings":"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"}