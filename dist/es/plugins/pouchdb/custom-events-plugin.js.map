{"version":3,"file":"custom-events-plugin.js","names":["PouchDBCore","Subject","ensureNotFalsy","flatClone","getFromMapOrThrow","now","parseRevision","PROMISE_RESOLVE_VOID","randomCouchString","newRxError","getEventKey","pouchChangeRowToChangeEvent","POUCHDB_DESIGN_PREFIX","POUCHDB_LOCAL_PREFIX","pouchDocumentDataToRxDocumentData","writeAttachmentsToAttachments","eventEmitDataToStorageEvents","pouchDBInstance","primaryPath","emitData","ret","writeOptions","custom","hasOwnProperty","new_edits","Promise","all","writeDocs","map","writeDoc","id","_id","_attachments","previousDoc","previousDocs","get","parsedRevPrevious","_rev","parsedRevNew","height","hash","_deleted","event","operation","doc","previous","args","changeEvent","changeEventToNormal","startTime","endTime","push","writeRowById","writeDocsById","Map","forEach","set","writeResult","resultRow","startsWith","rev","writeMap","error","writeRow","document","attachments","newDoc","Object","assign","addedToPouch","EVENT_EMITTER_BY_POUCH_INSTANCE","getCustomEventEmitterByPouch","pouch","key","__opts","name","adapter","join","emitter","subject","i","BULK_DOC_RUN_QUEUE","WeakMap","addCustomEventsPluginToPouch","oldBulkDocs","prototype","bulkDocs","newBulkDocs","body","options","callback","internalPouches","includes","call","err","result","queue","then","newBulkDocsInner","bind","usePouchResult","hasNonErrorWrite","docs","insertDocsById","Array","from","entries","previousRev","newRev","docInDb","previousDocsInDb","docInDbRev","status","useRevisions","start","ids","_revisions","slice","unshift","useNewRev","writeToPouchDocData","ok","deeperOptions","isDeeper","callReturn","callPromise","res","rej","docIds","Set","d","heighestSequence","changesSub","heighestSequencePromise","changes","since","live","include_docs","on","change","docId","has","seq","size","cancel","useOptsForOldBulkDocs","row","eventsPromise","emitId","runId","events","eventBulk","checkpoint","sequence","context","next","hasError","find","isArray","undefined","length","bulkGet","revs","latest","viaBulkGet","mustRefetchBecauseDeleted","results","firstDoc","reason","allDocs","keys","conflicts","deletedDocsViaAllDocs","idsWithRevs","rows","value","deletedDocsViaBulkGetWithRev","plugin","primary","storageChangeEvent","eventId","documentId"],"sources":["../../../../src/plugins/pouchdb/custom-events-plugin.ts"],"sourcesContent":["/*\n * Instead of listening to pouch.changes,\n * we overwrite pouchdbs bulkDocs()\n * and create our own event stream, this will work more reliable\n * and has less strange behaviors.\n * Also we can better define what data we need for our events.\n * @link http://jsbin.com/pagebi/1/edit?js,output\n * @link https://github.com/pubkey/rxdb/blob/1f4115b69bdacbb853af9c637d70f5f184d4e474/src/rx-storage-pouchdb.ts#L273\n * @link https://hasura.io/blog/couchdb-style-conflict-resolution-rxdb-hasura/\n */\n\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PouchBulkDocOptions,\n    PouchBulkDocResultRow,\n    PouchChangesOnChangeEvent,\n    PouchCheckpoint,\n    PouchDBInstance,\n    PouchWriteError,\n    RxDocumentData,\n    RxStorageChangeEvent\n} from '../../types';\nimport PouchDBCore from 'pouchdb-core';\nimport { Subject } from 'rxjs';\nimport {\n    ensureNotFalsy,\n    flatClone,\n    getFromMapOrThrow,\n    now,\n    parseRevision,\n    PROMISE_RESOLVE_VOID,\n    randomCouchString\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport {\n    getEventKey,\n    pouchChangeRowToChangeEvent,\n    POUCHDB_DESIGN_PREFIX,\n    POUCHDB_LOCAL_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport type { ChangeEvent } from 'event-reduce-js';\n\n// ensure only added once\nlet addedToPouch = false;\n\ndeclare type EmitData = {\n    emitId: number;\n    writeOptions: PouchBulkDocOptions;\n    writeDocs: any[];\n    writeResult: (PouchBulkDocResultRow | PouchWriteError)[];\n    // used on new_edits=false to check if the last revision has changed\n    previousDocs: Map<string, any>;\n    startTime: number;\n    endTime: number;\n};\n\n\ndeclare type Emitter<RxDocType> = {\n    subject: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>>;\n};\nexport const EVENT_EMITTER_BY_POUCH_INSTANCE: Map<string, Emitter<any>> = new Map();\n\nexport function getCustomEventEmitterByPouch<RxDocType>(\n    pouch: PouchDBInstance\n): Emitter<RxDocType> {\n    const key = [\n        pouch.__opts.name,\n        pouch.adapter\n    ].join('|');\n    let emitter = EVENT_EMITTER_BY_POUCH_INSTANCE.get(key);\n    if (!emitter) {\n        emitter = {\n            subject: new Subject()\n        };\n        EVENT_EMITTER_BY_POUCH_INSTANCE.set(key, emitter);\n    }\n    return emitter;\n}\n\n\n/**\n * Counter, used to debug stuff.\n */\nlet i = 0;\n\n\n/**\n * Because we cannot force pouchdb to await bulkDocs runs\n * inside of a transaction, like done with the other RxStorage implementations,\n * we have to ensure the calls to bulkDocs() do not run in parallel. \n * \n * TODO this is somehow a hack. Instead of doing that, inspect how\n * PouchDB runs bulkDocs internally and adapt that transaction handling.\n */\nconst BULK_DOC_RUN_QUEUE: WeakMap<PouchDBInstance, Promise<any>> = new WeakMap();\n\n/**\n * PouchDB is like a minefield,\n * where stuff randomly does not work dependend on some conditions.\n * So instead of doing plain writes,\n * we hack into the bulkDocs() function\n * and adjust the behavior accordingly.\n */\nexport function addCustomEventsPluginToPouch() {\n    if (addedToPouch) {\n        return;\n    }\n    addedToPouch = true;\n\n    const oldBulkDocs: any = PouchDBCore.prototype.bulkDocs;\n\n    /**\n     * Ensure we do not run bulkDocs() in parallel on the same PouchDB instance.\n     */\n    const newBulkDocs = function (\n        this: PouchDBInstance,\n        body: any[] | { docs: any[], new_edits?: boolean },\n        options: PouchBulkDocOptions,\n        callback: Function\n    ) {\n\n        /**\n         * Normalize inputs\n         * because there are many ways to call pouchdb.bulkDocs()\n         */\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        if (!options) {\n            options = {};\n        }\n\n\n        /**\n         * PouchDB internal requests\n         * must still be handled normally\n         * to decrease the likelyness of bugs.\n         */\n        const internalPouches = [\n            '_replicator',\n            '_users',\n            'pouch__all_dbs__'\n        ];\n        if (\n            (\n                internalPouches.includes(this.name) ||\n                this.name.includes('-mrview-')\n            )\n        ) {\n            return oldBulkDocs.call(\n                this,\n                body,\n                options,\n                (err: any, result: (PouchBulkDocResultRow | PouchWriteError)[]) => {\n                    if (err) {\n                        callback ? callback(err, null) : 0;\n                    } else {\n                        if (callback) {\n                            callback(null, result);\n                        }\n                    }\n                });\n        }\n\n\n        let queue = BULK_DOC_RUN_QUEUE.get(this);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue.then(async () => {\n            const ret = await newBulkDocsInner.bind(this)(\n                body,\n                options,\n                callback\n            );\n            return ret;\n        });\n        BULK_DOC_RUN_QUEUE.set(this, queue);\n        return queue;\n    };\n\n\n    const newBulkDocsInner = async function (\n        this: PouchDBInstance,\n        body: any[] | { docs: any[], new_edits?: boolean },\n        options: PouchBulkDocOptions,\n        callback: Function\n    ) {\n        const startTime = now();\n        const runId = i++;\n\n        /**\n         * Normalize inputs\n         * because there are many ways to call pouchdb.bulkDocs()\n         */\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        if (!options) {\n            options = {};\n        }\n\n        let docs: any[];\n        if (Array.isArray(body)) {\n            docs = body;\n        } else if (body === undefined) {\n            docs = [];\n        } else {\n            docs = body.docs;\n            if (body.hasOwnProperty('new_edits')) {\n                options.new_edits = body.new_edits;\n            }\n        }\n\n        // throw if no docs given, because RxDB should never make such a call.\n        if (docs.length === 0) {\n            throw newRxError('SNH', {\n                args: {\n                    body,\n                    options\n                }\n            });\n        }\n\n\n        /**\n         * If new_edits=false we have to first find the current state\n         * of the document and can later check if the state was changed\n         * because a new revision was written and we have to emit an event.\n         */\n        const previousDocsInDb: Map<string, RxDocumentData<any>> = options.custom ? options.custom.previousDocsInDb : new Map();\n        if (\n            options.hasOwnProperty('new_edits') &&\n            options.new_edits === false\n        ) {\n            const viaBulkGet = await this.bulkGet({\n                docs: docs.map(doc => ({ id: doc._id })),\n                revs: true,\n                latest: true\n            });\n\n            /**\n             * bulkGet() does not return deleted documents,\n             * so we must refetch them via allDocs() afterwards.\n             */\n            const mustRefetchBecauseDeleted: string[] = [];\n\n            viaBulkGet.results.forEach(resultRow => {\n                const firstDoc = resultRow.docs[0];\n                if (firstDoc.ok) {\n                    previousDocsInDb.set(firstDoc.ok._id, firstDoc.ok);\n                } else {\n                    if (firstDoc.error && firstDoc.error.reason === 'deleted') {\n                        mustRefetchBecauseDeleted.push(resultRow.id);\n                    }\n                }\n            });\n\n            if (mustRefetchBecauseDeleted.length > 0) {\n                const deletedDocsViaAllDocs = await this.allDocs({\n                    keys: mustRefetchBecauseDeleted,\n                    include_docs: true,\n                    conflicts: true,\n                });\n\n                const idsWithRevs: { id: string; rev: string; }[] = [];\n                deletedDocsViaAllDocs.rows.forEach(row => {\n                    idsWithRevs.push({\n                        id: row.id,\n                        rev: row.value.rev\n                    });\n                });\n\n                const deletedDocsViaBulkGetWithRev = await this.bulkGet({\n                    docs: idsWithRevs,\n                    revs: true,\n                    latest: true\n                });\n\n                deletedDocsViaBulkGetWithRev.results.forEach(resultRow => {\n                    const firstDoc = resultRow.docs[0];\n                    if (firstDoc.ok) {\n                        previousDocsInDb.set(firstDoc.ok._id, firstDoc.ok);\n                    } else {\n                        throw newRxError('SNH', {\n                            args: {\n                                deletedDocsViaBulkGetWithRev,\n                                resultRow\n                            }\n                        });\n                    }\n                });\n\n            }\n        }\n\n        /**\n         * Custom handling if the call came from RxDB (options.custom is set).\n         */\n        const usePouchResult: (PouchBulkDocResultRow | PouchWriteError)[] = [];\n        let hasNonErrorWrite = false;\n        if (\n            options.custom &&\n            options.hasOwnProperty('new_edits') &&\n            options.new_edits === false\n        ) {\n            /**\n             * Reset the write docs array,\n             * because we only write non-conflicting documents.\n             */\n            docs = [];\n            const writeRowById: Map<string, BulkWriteRow<any>> = options.custom.writeRowById;\n            const insertDocsById: Map<string, any> = options.custom.insertDocsById;\n\n            Array.from(writeRowById.entries()).forEach(([id, writeRow]) => {\n                const previousRev = writeRow.previous ? writeRow.previous._rev : null;\n                const newRev = parseRevision(writeRow.document._rev);\n                const docInDb = previousDocsInDb.get(id);\n                const docInDbRev: string | null = docInDb ? docInDb._rev : null;\n\n                if (\n                    docInDbRev !== previousRev\n                ) {\n                    // we have a conflict\n                    usePouchResult.push({\n                        error: true,\n                        id,\n                        status: 409\n                    });\n                } else {\n                    const useRevisions = {\n                        start: newRev.height,\n                        ids: docInDb ? docInDb._revisions.ids.slice(0) : []\n                    };\n                    useRevisions.ids.unshift(newRev.hash);\n                    const useNewRev = useRevisions.start + '-' + newRev.hash;\n\n                    hasNonErrorWrite = true;\n                    const writeToPouchDocData = Object.assign(\n                        {},\n                        insertDocsById.get(id),\n                        {\n                            _revisions: useRevisions,\n                            _rev: useNewRev\n                        }\n                    );\n                    docs.push(writeToPouchDocData);\n                    usePouchResult.push({\n                        ok: true,\n                        id,\n                        rev: writeRow.document._rev\n                    });\n                }\n            });\n\n            /**\n             * Optimization shortcut,\n             * if all document writes were conflict errors,\n             * we can skip directly.\n             */\n            if (!hasNonErrorWrite) {\n                return usePouchResult;\n            }\n        }\n\n        /**\n         * pouchdb calls this function again with transformed input.\n         * This would lead to duplicate events. So we marks the deeper calls via the options\n         * parameter and do not emit events if it is set.\n         */\n        const deeperOptions = flatClone(options);\n        deeperOptions.isDeeper = true;\n        let callReturn: any;\n        const callPromise = new Promise((res, rej) => {\n\n            /**\n             * The emitted EventBulk from the write to the pouchdb, needs to contain a checkpoint field.\n             * Because PouchDB works on sequence number to sort changes,\n             * we have to fetch the latest sequence number out of the events because it\n             * is not possible to that that from pouch.bulkDocs().\n             */\n            const docIds: Set<string> = new Set(docs.map(d => d._id));\n            let heighestSequence = 0;\n            let changesSub: PouchChangesOnChangeEvent;\n            const heighestSequencePromise = new Promise<number>(res => {\n                changesSub = this.changes({\n                    since: 'now',\n                    live: true,\n                    include_docs: true\n                }).on('change', (change: any) => {\n                    const docId: string = change.id;\n                    if (docIds.has(docId)) {\n                        docIds.delete(docId);\n                        if (heighestSequence < change.seq) {\n                            heighestSequence = change.seq;\n                        }\n\n                        if (docIds.size === 0) {\n                            (changesSub as any).cancel();\n                            res(heighestSequence);\n                        }\n                    }\n                }) as any;\n            });\n\n\n            /**\n             * We cannot send the custom here,\n             * because when a migration between different major RxDB versions is done,\n             * multiple versions of the RxDB PouchDB RxStorage might have added their\n             * custom method via PouchDBCore.plugin()\n             */\n            const useOptsForOldBulkDocs = flatClone(deeperOptions);\n            delete useOptsForOldBulkDocs.custom;\n\n            callReturn = oldBulkDocs.call(\n                this,\n                docs,\n                useOptsForOldBulkDocs,\n                (err: any, result: (PouchBulkDocResultRow | PouchWriteError)[]) => {\n                    if (err) {\n                        callback ? callback(err) : rej(err);\n                    } else {\n                        return (async () => {\n                            const hasError = result.find(row => (row as PouchWriteError).error);\n                            let heighestSequence = -1;\n                            if (!hasError) {\n                                heighestSequence = await heighestSequencePromise;\n                            } else {\n                                changesSub.cancel();\n                            }\n\n                            result.forEach(row => {\n                                usePouchResult.push(row);\n                            });\n\n                            /**\n                             * For calls that came from RxDB,\n                             * we have to ensure that the events are emitted\n                             * before the actual call resolves.\n                             */\n                            let eventsPromise = PROMISE_RESOLVE_VOID;\n                            if (!options.isDeeper) {\n                                const endTime = now();\n                                const emitData = {\n                                    emitId: runId,\n                                    writeDocs: docs,\n                                    writeOptions: options,\n                                    writeResult: usePouchResult,\n                                    previousDocs: previousDocsInDb,\n                                    startTime,\n                                    endTime\n                                };\n                                eventsPromise = eventEmitDataToStorageEvents(\n                                    this,\n                                    '_id',\n                                    emitData\n                                ).then(events => {\n                                    const eventBulk: EventBulk<any, PouchCheckpoint> = {\n                                        id: randomCouchString(10),\n                                        events,\n                                        checkpoint: {\n                                            sequence: heighestSequence\n                                        },\n                                        context: options.custom ? options.custom.context : 'pouchdb-internal'\n                                    };\n\n                                    const emitter = getCustomEventEmitterByPouch(this);\n                                    emitter.subject.next(eventBulk);\n                                });\n                            }\n\n                            if (callback) {\n                                callback(null, usePouchResult);\n                            } else {\n                                return eventsPromise.then(() => {\n                                    res(usePouchResult);\n                                    return usePouchResult;\n                                });\n                            }\n                        })();\n                    }\n                });\n        });\n\n        if (options.custom) {\n            return callPromise;\n        }\n\n\n\n        return callReturn;\n    };\n\n    PouchDBCore.plugin({\n        bulkDocs: newBulkDocs\n    } as any);\n\n}\n\nexport async function eventEmitDataToStorageEvents<RxDocType>(\n    pouchDBInstance: PouchDBInstance,\n    primaryPath: string,\n    emitData: EmitData\n): Promise<RxStorageChangeEvent<RxDocumentData<RxDocType>>[]> {\n    const ret: RxStorageChangeEvent<RxDocumentData<RxDocType>>[] = [];\n    if (\n        !emitData.writeOptions.custom &&\n        emitData.writeOptions.hasOwnProperty('new_edits') &&\n        emitData.writeOptions.new_edits === false\n    ) {\n        await Promise.all(\n            emitData.writeDocs.map(async (writeDoc) => {\n                const id = writeDoc._id;\n                writeDoc = pouchDocumentDataToRxDocumentData(\n                    primaryPath,\n                    writeDoc\n                );\n                writeDoc._attachments = await writeAttachmentsToAttachments(writeDoc._attachments);\n                let previousDoc = emitData.previousDocs.get(id);\n                if (previousDoc) {\n                    previousDoc = pouchDocumentDataToRxDocumentData(\n                        primaryPath,\n                        previousDoc\n                    );\n                }\n                if (previousDoc) {\n                    const parsedRevPrevious = parseRevision(previousDoc._rev);\n                    const parsedRevNew = parseRevision(writeDoc._rev);\n                    if (\n                        (\n                            parsedRevPrevious.height > parsedRevNew.height ||\n                            /**\n                             * If the revision height is equal,\n                             * we determine the higher hash as winner.\n                             */\n                            (\n                                parsedRevPrevious.height === parsedRevNew.height &&\n                                parsedRevPrevious.hash > parsedRevNew.hash\n                            )\n                        )\n                    ) {\n                        /**\n                         * The newly added document was not the latest revision\n                         * so we drop the write.\n                         * With plain PouchDB it makes sense to store conflicting branches of the document\n                         * but RxDB assumes that the conflict is resolved directly.\n                         */\n                        return;\n                    }\n                }\n\n                if (!previousDoc && writeDoc._deleted) {\n                    // deleted document was added as revision\n                    return;\n                }\n\n                if (previousDoc && previousDoc._deleted && writeDoc._deleted) {\n                    // delete document was deleted again\n                    return;\n                }\n\n                let event: ChangeEvent<RxDocumentData<RxDocType>>;\n                if ((!previousDoc || previousDoc._deleted) && !writeDoc._deleted) {\n                    // was insert\n                    event = {\n                        operation: 'INSERT',\n                        doc: writeDoc,\n                        id: id,\n                        previous: null\n                    };\n                } else if (writeDoc._deleted && previousDoc && !previousDoc._deleted) {\n                    // was delete\n                    previousDoc._rev = writeDoc._rev;\n                    event = {\n                        operation: 'DELETE',\n                        doc: null,\n                        id: id,\n                        previous: previousDoc\n                    };\n                } else if (\n                    previousDoc\n                ) {\n                    // was update\n                    event = {\n                        operation: 'UPDATE',\n                        doc: writeDoc,\n                        id: id,\n                        previous: previousDoc\n                    };\n                } else {\n                    throw newRxError('SNH', { args: { writeDoc } });\n                }\n\n                const changeEvent = changeEventToNormal(\n                    pouchDBInstance,\n                    primaryPath,\n                    event,\n                    emitData.startTime,\n                    emitData.endTime\n                );\n\n                ret.push(changeEvent);\n            })\n        );\n    }\n    /**\n     * There is no write map given for internal pouchdb document writes\n     * like it is done with replication.\n     */\n    else if (\n        !emitData.writeOptions.custom ||\n        (emitData.writeOptions.custom && !emitData.writeOptions.custom.writeRowById)\n    ) {\n        const writeDocsById: Map<string, any> = new Map();\n        emitData.writeDocs.forEach(writeDoc => writeDocsById.set(writeDoc._id, writeDoc));\n        await Promise.all(\n            emitData.writeResult.map(async (resultRow) => {\n                const id = resultRow.id;\n                if (\n                    id.startsWith(POUCHDB_DESIGN_PREFIX) ||\n                    id.startsWith(POUCHDB_LOCAL_PREFIX)\n                ) {\n                    return;\n                }\n                let writeDoc = getFromMapOrThrow(writeDocsById, resultRow.id);\n                writeDoc = pouchDocumentDataToRxDocumentData(\n                    primaryPath,\n                    writeDoc\n                );\n\n                writeDoc._attachments = await writeAttachmentsToAttachments(writeDoc._attachments);\n                writeDoc = flatClone(writeDoc);\n                writeDoc._rev = (resultRow as any).rev;\n                const event = pouchChangeRowToChangeEvent<RxDocType>(\n                    primaryPath as any,\n                    writeDoc\n                );\n                const changeEvent = changeEventToNormal(pouchDBInstance, primaryPath, event);\n                ret.push(changeEvent);\n            })\n        );\n    } else {\n        const writeMap: Map<string, BulkWriteRow<RxDocType>> = emitData.writeOptions.custom.writeRowById;\n        await Promise.all(\n            emitData.writeResult.map(async (resultRow) => {\n                if ((resultRow as PouchWriteError).error) {\n                    return;\n                }\n                const id = resultRow.id;\n                const writeRow = getFromMapOrThrow(writeMap, id);\n                const attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                const newDoc: RxDocumentData<RxDocType> = Object.assign(\n                    {},\n                    writeRow.document,\n                    {\n                        _attachments: attachments,\n                        _rev: (resultRow as PouchBulkDocResultRow).rev\n                    }\n                );\n\n                let event: ChangeEvent<RxDocumentData<RxDocType>>;\n                if (!writeRow.previous || writeRow.previous._deleted) {\n                    // was insert\n                    event = {\n                        operation: 'INSERT',\n                        doc: newDoc,\n                        id: id,\n                        previous: null\n                    };\n                } else if (writeRow.document._deleted) {\n                    // was delete\n\n                    // we need to add the new revision to the previous doc\n                    // so that the eventkey is calculated correctly.\n                    // Is this a hack? idk.\n                    const attachments = await writeAttachmentsToAttachments(writeRow.previous._attachments);\n                    const previousDoc = Object.assign(\n                        {},\n                        writeRow.previous,\n                        {\n                            _attachments: attachments\n                        }\n                    );\n\n                    event = {\n                        operation: 'DELETE',\n                        doc: null,\n                        id: resultRow.id,\n                        previous: previousDoc\n                    };\n                } else {\n                    // was update\n                    event = {\n                        operation: 'UPDATE',\n                        doc: newDoc,\n                        id: resultRow.id,\n                        previous: writeRow.previous\n                    };\n                }\n\n                if (\n                    writeRow.document._deleted &&\n                    (\n                        !writeRow.previous ||\n                        writeRow.previous._deleted\n                    )\n                ) {\n                    /**\n                     * A deleted document was newly added to the storage engine,\n                     * do not emit an event.\n                     */\n                } else {\n                    const changeEvent = changeEventToNormal(\n                        pouchDBInstance,\n                        ensureNotFalsy(emitData.writeOptions.custom).primaryPath,\n                        event,\n                        emitData.startTime,\n                        emitData.endTime\n                    );\n                    ret.push(changeEvent);\n                }\n            })\n        );\n    }\n\n    return ret;\n}\n\nexport function changeEventToNormal<RxDocType>(\n    pouchDBInstance: PouchDBInstance,\n    primaryPath: string,\n    change: ChangeEvent<RxDocumentData<RxDocType>>,\n    startTime?: number,\n    endTime?: number\n): RxStorageChangeEvent<RxDocumentData<RxDocType>> {\n    const doc: RxDocumentData<RxDocType> = change.operation === 'DELETE' ? change.previous as any : change.doc as any;\n    const primary: string = (doc as any)[primaryPath];\n    const storageChangeEvent: RxStorageChangeEvent<RxDocumentData<RxDocType>> = {\n        eventId: getEventKey(pouchDBInstance, primary, change),\n        documentId: primary,\n        change,\n        startTime,\n        endTime\n    };\n    return storageChangeEvent;\n}\n"],"mappings":"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"}