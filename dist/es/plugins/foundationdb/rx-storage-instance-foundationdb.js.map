{"version":3,"file":"rx-storage-instance-foundationdb.js","names":["Subject","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","CLEANUP_INDEX","getFoundationDBIndexName","newRxError","getIndexableStringMonad","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","ensureNotFalsy","lastOfArray","now","PROMISE_RESOLVE_VOID","queryFoundationDB","INDEX_MAX","attachmentMapKey","RxStorageInstanceFoundationDB","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","primaryPath","primaryKey","bulkWrite","documentWrites","context","dbsPromise","dbs","categorized","root","doTransaction","tx","ret","success","error","ids","map","row","document","mainTx","at","main","subspace","attachmentTx","attachments","docsInDB","Map","Promise","all","id","get","doc","set","errors","bulkInsertDocs","forEach","writeRow","docId","Object","values","indexes","indexMeta","indexString","getIndexableString","indexTx","db","bulkUpdateDocs","oldIndexString","previous","newIndexString","attachmentsAdd","attachment","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","result","eventBulk","events","length","lastState","checkpoint","lwt","_meta","next","findDocumentsById","withDeleted","docInDb","_deleted","query","preparedQuery","count","documents","mode","getAttachmentData","data","getChangedDocumentsSince","limit","require","keySelector","StreamingMode","index","indexName","lowerBoundString","checkpointPartialDoc","innerResult","getRangeAll","firstGreaterThan","streamingMode","Exact","range","docIds","docsData","concat","lastDoc","changeStream","asObservable","remove","clearRange","close","cleanup","minimumDeletedTime","maxDeletionTime","upperBoundString","noMoreUndeleted","batchSize","pop","subIndexDB","docData","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","reject","database","collection","complete","createFoundationDBStorageInstance","params","open","directory","encoders","connection","clusterFile","createOrOpen","dir","version","withKeyEncoding","string","withValueEncoding","json","indexDBs","useIndexes","slice","push","useIndexesFinal","indexAr","Array","isArray","unshift","indexDB","instance","resolve"],"sources":["../../../../src/plugins/foundationdb/rx-storage-instance-foundationdb.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport type {\n    FoundationDBDatabase,\n    FoundationDBIndexMeta,\n    FoundationDBPreparedQuery,\n    FoundationDBStorageInternals,\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types';\n// import {\n//     open as foundationDBOpen,\n//     directory as foundationDBDirectory,\n//     encoders as foundationDBEncoders,\n//     keySelector as foundationDBKeySelector,\n//     StreamingMode as foundationDBStreamingMode\n// } from 'foundationdb';\nimport {\n    categorizeBulkWriteRows,\n    getNewestOfDocumentStates\n} from '../../rx-storage-helper';\nimport {\n\n    CLEANUP_INDEX,\n    getFoundationDBIndexName\n} from './foundationdb-helpers';\nimport { newRxError } from '../../rx-error';\nimport {\n    getIndexableStringMonad,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport {\n    ensureNotFalsy, lastOfArray, now\n    , PROMISE_RESOLVE_VOID\n} from '../../util';\nimport { queryFoundationDB } from './foundationdb-query';\nimport { INDEX_MAX } from '../../query-planner';\nimport { attachmentMapKey } from '../memory';\n\nexport class RxStorageInstanceFoundationDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    FoundationDBStorageInternals<RxDocType>,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed = false;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageFoundationDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: FoundationDBStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageFoundationDBInstanceCreationOptions>,\n        public readonly settings: RxStorageFoundationDBSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n        const result = await dbs.root.doTransaction(async (tx: any) => {\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                success: {},\n                error: {}\n            };\n\n            const ids = documentWrites.map(row => (row.document as any)[this.primaryPath]);\n            const mainTx = tx.at(dbs.main.subspace);\n            const attachmentTx = tx.at(dbs.attachments.subspace);\n            const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n            /**\n             * TODO this might be faster if fdb\n             * any time adds a bulk-fetch-by-key method.\n             */\n            await Promise.all(\n                ids.map(async (id) => {\n                    const doc = await mainTx.get(id);\n                    docsInDB.set(id, doc);\n                })\n            );\n\n\n            categorized = categorizeBulkWriteRows<RxDocType>(\n                this,\n                this.primaryPath as any,\n                docsInDB,\n                documentWrites,\n                context\n            );\n\n            ret.error = categorized.errors;\n\n            // INSERTS\n            categorized.bulkInsertDocs.forEach(writeRow => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n                ret.success[docId] = writeRow.document;\n\n                // insert document data\n                mainTx.set(docId, writeRow.document);\n\n                // insert secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const indexString = indexMeta.getIndexableString(writeRow.document);\n                    const indexTx = tx.at(indexMeta.db.subspace);\n                    indexTx.set(indexString, docId);\n                });\n            });\n            // UPDATES\n            categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n\n                // overwrite document data\n                mainTx.set(docId, writeRow.document);\n\n                // update secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                    const newIndexString = indexMeta.getIndexableString(writeRow.document);\n                    if (oldIndexString !== newIndexString) {\n                        const indexTx = tx.at(indexMeta.db.subspace);\n                        indexTx.delete(oldIndexString);\n                        indexTx.set(newIndexString, docId);\n                    }\n                });\n                ret.success[docId] = writeRow.document;\n            });\n\n            // attachments\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsUpdate.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsRemove.forEach(attachment => {\n                attachmentTx.delete(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                );\n            });\n\n            return ret;\n        });\n        /**\n         * The events must be emitted AFTER the transaction\n         * has finished.\n         * Otherwise an observable changestream might cause a read\n         * to a document that does not already exist outside of the transaction.\n         */\n        if (ensureNotFalsy(categorized).eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates<any>(\n                this.primaryPath as any,\n                Object.values(result.success)\n            );\n            ensureNotFalsy(categorized).eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(ensureNotFalsy(categorized).eventBulk);\n        }\n        return result;\n    }\n\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        return dbs.main.doTransaction(async (tx: any) => {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            await Promise.all(\n                ids.map(async (docId) => {\n                    const docInDb = await tx.get(docId);\n                    if (\n                        docInDb &&\n                        (\n                            !docInDb._deleted ||\n                            withDeleted\n                        )\n                    ) {\n                        ret[docId] = docInDb;\n                    }\n                })\n            );\n            return ret;\n        });\n    }\n    query(preparedQuery: FoundationDBPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryFoundationDB(this, preparedQuery);\n    }\n    async count(\n        preparedQuery: FoundationDBPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2022), FoundationDB does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/apple/foundationdb/issues/5981\n         */\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    async getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        const dbs = await this.internals.dbsPromise;\n        const attachment = await dbs.attachments.get(attachmentMapKey(documentId, attachmentId));\n        return attachment.data;\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const dbs = await this.internals.dbsPromise;\n        const index = [\n            '_meta.lwt',\n            this.primaryPath as any\n        ];\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        let lowerBoundString = '';\n        if (checkpoint) {\n            const checkpointPartialDoc: any = {\n                [this.primaryPath]: checkpoint.id,\n                _meta: {\n                    lwt: checkpoint.lwt\n                }\n            };\n            lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n        }\n        const result: RxDocumentData<RxDocType>[] = await dbs.root.doTransaction(async (tx: any) => {\n            let innerResult: RxDocumentData<RxDocType>[] = [];\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                INDEX_MAX,\n                {\n                    limit,\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(\n                docIds.map((docId: string) => mainTx.get(docId))\n            );\n            innerResult = innerResult.concat(docsData);\n            return innerResult;\n        });\n        const lastDoc = lastOfArray(result);\n        return {\n            documents: result,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        const dbs = await this.internals.dbsPromise;\n        await dbs.root.doTransaction((tx: any) => {\n            tx.clearRange('', INDEX_MAX);\n            return PROMISE_RESOLVE_VOID;\n        });\n        return this.close();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const dbs = await this.internals.dbsPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ],\n            false\n        );\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ],\n            true\n        );\n        let noMoreUndeleted: boolean = true;\n        await dbs.root.doTransaction(async (tx: any) => {\n            const batchSize = ensureNotFalsy(this.settings.batchSize);\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                upperBoundString,\n                {\n                    limit: batchSize + 1, // get one more extra to detect what to return from cleanup()\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            if (range.length > batchSize) {\n                noMoreUndeleted = false;\n                range.pop();\n            }\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n\n            Object\n                .values(dbs.indexes)\n                .forEach(indexMeta => {\n                    const subIndexDB = tx.at(indexMeta.db.subspace);\n                    docsData.forEach(docData => {\n                        const indexString = indexMeta.getIndexableString(docData);\n                        subIndexDB.delete(indexString);\n                    });\n                });\n            docIds.forEach((id: string) => mainTx.delete(id));\n        });\n\n        return noMoreUndeleted;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async close() {\n        if (this.closed) {\n            return Promise.reject(newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            }));\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        const dbs = await this.internals.dbsPromise;\n        dbs.root.close();\n\n        // TODO shouldn't we close the index databases?\n        // Object.values(dbs.indexes).forEach(db => db.close());\n    }\n}\n\n\nexport function createFoundationDBStorageInstance<RxDocType>(\n    storage: RxStorageFoundationDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>,\n    settings: RxStorageFoundationDBSettings\n): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const {\n        open,\n        directory,\n        encoders\n    } = require('foundationdb');\n\n    const connection = open(settings.clusterFile);\n    const dbsPromise = (async () => {\n        const dir = await directory.createOrOpen(connection, 'rxdb');\n\n        const root = connection\n            .at(dir)\n            .at(params.databaseName + '.')\n            .at(params.collectionName + '.')\n            .at(params.schema.version + '.');\n        const main: FoundationDBDatabase<RxDocType> = root\n            .at('main.')\n            .withKeyEncoding(encoders.string) // automatically encode & decode keys using tuples\n            .withValueEncoding(encoders.json) as any; // and values using JSON\n\n\n        const events: FoundationDBDatabase<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = root\n            .at('events.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n        const attachments: FoundationDBDatabase<RxAttachmentWriteData> = root\n            .at('attachments.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n\n        const indexDBs: { [indexName: string]: FoundationDBIndexMeta<RxDocType> } = {};\n        const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n        useIndexes.push([primaryPath]);\n        const useIndexesFinal = useIndexes.map(index => {\n            const indexAr = Array.isArray(index) ? index.slice(0) : [index];\n            indexAr.unshift('_deleted');\n            return indexAr;\n        })\n        // used for `getChangedDocumentsSince()`\n        useIndexesFinal.push([\n            '_meta.lwt',\n            primaryPath\n        ]);\n        useIndexesFinal.push(CLEANUP_INDEX);\n        useIndexesFinal.forEach(indexAr => {\n            const indexName = getFoundationDBIndexName(indexAr);\n            const indexDB = root.at(indexName + '.')\n                .withKeyEncoding(encoders.string)\n                .withValueEncoding(encoders.string);\n            indexDBs[indexName] = {\n                indexName,\n                db: indexDB,\n                getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n                index: indexAr\n            };\n        });\n\n        return {\n            root,\n            main,\n            events,\n            attachments,\n            indexes: indexDBs\n        };\n    })();\n\n\n    const internals: FoundationDBStorageInternals<RxDocType> = {\n        connection,\n        dbsPromise: dbsPromise\n    };\n\n    const instance = new RxStorageInstanceFoundationDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"AAAA,SAAqBA,OAAO,QAAQ,MAAM;AAC1C,SAASC,2BAA2B,QAAQ,wBAAwB;AA6BpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIC,uBAAuB,EACvBC,yBAAyB,QACtB,yBAAyB;AAChC,SAEIC,aAAa,EACbC,wBAAwB,QACrB,wBAAwB;AAC/B,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SACIC,uBAAuB,EACvBC,iCAAiC,EACjCC,iCAAiC,QAC9B,oBAAoB;AAC3B,SACIC,cAAc,EAAEC,WAAW,EAAEC,GAAG,EAC9BC,oBAAoB,QACnB,YAAY;AACnB,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,gBAAgB,QAAQ,WAAW;AAE5C,WAAaC,6BAA6B;EAWtC,uCACoBC,OAA8B,EAC9BC,YAAoB,EACpBC,cAAsB,EACtBC,MAAyD,EACzDC,SAAkD,EAClDC,OAA+D,EAC/DC,QAAuC,EACzD;IAAA,KAXKC,MAAM,GAAG,KAAK;IAAA,KACbC,QAAQ,GAAoG,IAAI1B,OAAO,EAAE;IAAA,KAG7GkB,OAA8B,GAA9BA,OAA8B;IAAA,KAC9BC,YAAoB,GAApBA,YAAoB;IAAA,KACpBC,cAAsB,GAAtBA,cAAsB;IAAA,KACtBC,MAAyD,GAAzDA,MAAyD;IAAA,KACzDC,SAAkD,GAAlDA,SAAkD;IAAA,KAClDC,OAA+D,GAA/DA,OAA+D;IAAA,KAC/DC,QAAuC,GAAvCA,QAAuC;IAEvD,IAAI,CAACG,WAAW,GAAG1B,2BAA2B,CAAC,IAAI,CAACoB,MAAM,CAACO,UAAU,CAAC;EAC1E;EAAC;EAAA,OAEKC,SAAS,sBACXC,cAAyC,EACzCC,OAAe;IAAA,IAC+B;MAAA,aAC5B,IAAI;MAAA,uBAAJ,OAAKT,SAAS,CAACU,UAAU,iBAArCC,GAAG;QACT,IAAIC,WAAiE,GAAG,IAAW;QAAC,uBAC/DD,GAAG,CAACE,IAAI,CAACC,aAAa,WAAQC,EAAO;UAAA,IAAK;YAC3D,IAAMC,GAA0C,GAAG;cAC/CC,OAAO,EAAE,CAAC,CAAC;cACXC,KAAK,EAAE,CAAC;YACZ,CAAC;YAED,IAAMC,GAAG,GAAGX,cAAc,CAACY,GAAG,CAAC,UAAAC,GAAG;cAAA,OAAKA,GAAG,CAACC,QAAQ,CAAS,OAAKjB,WAAW,CAAC;YAAA,EAAC;YAC9E,IAAMkB,MAAM,GAAGR,EAAE,CAACS,EAAE,CAACb,GAAG,CAACc,IAAI,CAACC,QAAQ,CAAC;YACvC,IAAMC,YAAY,GAAGZ,EAAE,CAACS,EAAE,CAACb,GAAG,CAACiB,WAAW,CAACF,QAAQ,CAAC;YACpD,IAAMG,QAAQ,GAAG,IAAIC,GAAG,EAAqC;YAC7D;AACZ;AACA;AACA;YAHY,uBAIMC,OAAO,CAACC,GAAG,CACbb,GAAG,CAACC,GAAG,WAAQa,EAAE;cAAA,IAAK;gBAAA,uBACAV,MAAM,CAACW,GAAG,CAACD,EAAE,CAAC,iBAA1BE,GAAG;kBACTN,QAAQ,CAACO,GAAG,CAACH,EAAE,EAAEE,GAAG,CAAC;gBAAC;cAC1B,CAAC;gBAAA;cAAA;YAAA,EAAC,CACL;cAGDvB,WAAW,GAAGhC,uBAAuB,SAEjC,OAAKyB,WAAW,EAChBwB,QAAQ,EACRrB,cAAc,EACdC,OAAO,CACV;cAEDO,GAAG,CAACE,KAAK,GAAGN,WAAW,CAACyB,MAAM;;cAE9B;cACAzB,WAAW,CAAC0B,cAAc,CAACC,OAAO,CAAC,UAAAC,QAAQ,EAAI;gBAC3C,IAAMC,KAAa,GAAGD,QAAQ,CAAClB,QAAQ,CAAC,OAAKjB,WAAW,CAAQ;gBAChEW,GAAG,CAACC,OAAO,CAACwB,KAAK,CAAC,GAAGD,QAAQ,CAAClB,QAAQ;;gBAEtC;gBACAC,MAAM,CAACa,GAAG,CAACK,KAAK,EAAED,QAAQ,CAAClB,QAAQ,CAAC;;gBAEpC;gBACAoB,MAAM,CAACC,MAAM,CAAChC,GAAG,CAACiC,OAAO,CAAC,CAACL,OAAO,CAAC,UAAAM,SAAS,EAAI;kBAC5C,IAAMC,WAAW,GAAGD,SAAS,CAACE,kBAAkB,CAACP,QAAQ,CAAClB,QAAQ,CAAC;kBACnE,IAAM0B,OAAO,GAAGjC,EAAE,CAACS,EAAE,CAACqB,SAAS,CAACI,EAAE,CAACvB,QAAQ,CAAC;kBAC5CsB,OAAO,CAACZ,GAAG,CAACU,WAAW,EAAEL,KAAK,CAAC;gBACnC,CAAC,CAAC;cACN,CAAC,CAAC;cACF;cACA7B,WAAW,CAACsC,cAAc,CAACX,OAAO,CAAC,UAACC,QAAiC,EAAK;gBACtE,IAAMC,KAAa,GAAGD,QAAQ,CAAClB,QAAQ,CAAC,OAAKjB,WAAW,CAAQ;;gBAEhE;gBACAkB,MAAM,CAACa,GAAG,CAACK,KAAK,EAAED,QAAQ,CAAClB,QAAQ,CAAC;;gBAEpC;gBACAoB,MAAM,CAACC,MAAM,CAAChC,GAAG,CAACiC,OAAO,CAAC,CAACL,OAAO,CAAC,UAAAM,SAAS,EAAI;kBAC5C,IAAMM,cAAc,GAAGN,SAAS,CAACE,kBAAkB,CAAC3D,cAAc,CAACoD,QAAQ,CAACY,QAAQ,CAAC,CAAC;kBACtF,IAAMC,cAAc,GAAGR,SAAS,CAACE,kBAAkB,CAACP,QAAQ,CAAClB,QAAQ,CAAC;kBACtE,IAAI6B,cAAc,KAAKE,cAAc,EAAE;oBACnC,IAAML,OAAO,GAAGjC,EAAE,CAACS,EAAE,CAACqB,SAAS,CAACI,EAAE,CAACvB,QAAQ,CAAC;oBAC5CsB,OAAO,UAAO,CAACG,cAAc,CAAC;oBAC9BH,OAAO,CAACZ,GAAG,CAACiB,cAAc,EAAEZ,KAAK,CAAC;kBACtC;gBACJ,CAAC,CAAC;gBACFzB,GAAG,CAACC,OAAO,CAACwB,KAAK,CAAC,GAAGD,QAAQ,CAAClB,QAAQ;cAC1C,CAAC,CAAC;;cAEF;cACAV,WAAW,CAAC0C,cAAc,CAACf,OAAO,CAAC,UAAAgB,UAAU,EAAI;gBAC7C5B,YAAY,CAACS,GAAG,CACZ1C,gBAAgB,CAAC6D,UAAU,CAACC,UAAU,EAAED,UAAU,CAACE,YAAY,CAAC,EAChEF,UAAU,CAACG,cAAc,CAC5B;cACL,CAAC,CAAC;cACF9C,WAAW,CAAC+C,iBAAiB,CAACpB,OAAO,CAAC,UAAAgB,UAAU,EAAI;gBAChD5B,YAAY,CAACS,GAAG,CACZ1C,gBAAgB,CAAC6D,UAAU,CAACC,UAAU,EAAED,UAAU,CAACE,YAAY,CAAC,EAChEF,UAAU,CAACG,cAAc,CAC5B;cACL,CAAC,CAAC;cACF9C,WAAW,CAACgD,iBAAiB,CAACrB,OAAO,CAAC,UAAAgB,UAAU,EAAI;gBAChD5B,YAAY,UAAO,CACfjC,gBAAgB,CAAC6D,UAAU,CAACC,UAAU,EAAED,UAAU,CAACE,YAAY,CAAC,CACnE;cACL,CAAC,CAAC;cAEF,OAAOzC,GAAG;YAAC;UACf,CAAC;YAAA;UAAA;QAAA,EAAC,iBAvFI6C,MAAM;UAwFZ;AACR;AACA;AACA;AACA;AACA;UACQ,IAAIzE,cAAc,CAACwB,WAAW,CAAC,CAACkD,SAAS,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;YACzD,IAAMC,SAAS,GAAGpF,yBAAyB,CACvC,OAAKwB,WAAW,EAChBqC,MAAM,CAACC,MAAM,CAACkB,MAAM,CAAC5C,OAAO,CAAC,CAChC;YACD7B,cAAc,CAACwB,WAAW,CAAC,CAACkD,SAAS,CAACI,UAAU,GAAG;cAC/CjC,EAAE,EAAEgC,SAAS,CAAC,OAAK5D,WAAW,CAAC;cAC/B8D,GAAG,EAAEF,SAAS,CAACG,KAAK,CAACD;YACzB,CAAC;YACD,OAAK/D,QAAQ,CAACiE,IAAI,CAACjF,cAAc,CAACwB,WAAW,CAAC,CAACkD,SAAS,CAAC;UAC7D;UACA,OAAOD,MAAM;QAAC;MAAA;IAClB,CAAC;MAAA;IAAA;EAAA;EAAA,OAEKS,iBAAiB,8BAACnD,GAAa,EAAEoD,WAAoB;IAAA,IAA0C;MAAA,aAC/E,IAAI;MAAA,uBAAJ,OAAKvE,SAAS,CAACU,UAAU,iBAArCC,GAAG;QACT,OAAOA,GAAG,CAACc,IAAI,CAACX,aAAa,WAAQC,EAAO;UAAA,IAAK;YAC7C,IAAMC,GAAkC,GAAG,CAAC,CAAC;YAAC,uBACxCe,OAAO,CAACC,GAAG,CACbb,GAAG,CAACC,GAAG,WAAQqB,KAAK;cAAA,IAAK;gBAAA,uBACC1B,EAAE,CAACmB,GAAG,CAACO,KAAK,CAAC,iBAA7B+B,OAAO;kBAAA,IAETA,OAAO,KAEH,CAACA,OAAO,CAACC,QAAQ,IACjBF,WAAW,CACd;oBAEDvD,GAAG,CAACyB,KAAK,CAAC,GAAG+B,OAAO;kBAAC;gBAAA;cAE7B,CAAC;gBAAA;cAAA;YAAA,EAAC,CACL;cACD,OAAOxD,GAAG;YAAC;UACf,CAAC;YAAA;UAAA;QAAA,EAAC;MAAC;IACP,CAAC;MAAA;IAAA;EAAA;EAAA,OACD0D,KAAK,GAAL,eAAMC,aAAmD,EAA4C;IACjG,OAAOnF,iBAAiB,CAAC,IAAI,EAAEmF,aAAa,CAAC;EACjD,CAAC;EAAA,OACKC,KAAK,kBACPD,aAAmD;IAAA,IACtB;MAAA,aAMR,IAAI;MALzB;AACR;AACA;AACA;AACA;MAJQ,uBAKqB,OAAKD,KAAK,CAACC,aAAa,CAAC,iBAAxCd,MAAM;QACZ,OAAO;UACHe,KAAK,EAAEf,MAAM,CAACgB,SAAS,CAACb,MAAM;UAC9Bc,IAAI,EAAE;QACV,CAAC;MAAC;IACN,CAAC;MAAA;IAAA;EAAA;EAAA,OACKC,iBAAiB,8BAACvB,UAAkB,EAAEC,YAAoB;IAAA,IAAmB;MAAA,aAC7D,IAAI;MAAA,uBAAJ,OAAKzD,SAAS,CAACU,UAAU,iBAArCC,GAAG;QAAA,uBACgBA,GAAG,CAACiB,WAAW,CAACM,GAAG,CAACxC,gBAAgB,CAAC8D,UAAU,EAAEC,YAAY,CAAC,CAAC,iBAAlFF,UAAU;UAChB,OAAOA,UAAU,CAACyB,IAAI;QAAC;MAAA;IAC3B,CAAC;MAAA;IAAA;EAAA;EAAA,OACKC,wBAAwB,qCAACC,KAAa,EAAEhB,UAAuC;IAAA,IAAgG;MAAA,cAK/J,IAAI;MAJtB,eAGIiB,OAAO,CAAC,cAAc,CAAC;QAFvBC,WAAW,YAAXA,WAAW;QACXC,aAAa,YAAbA,aAAa;MACW,uBACV,QAAKrF,SAAS,CAACU,UAAU,iBAArCC,GAAG;QACT,IAAM2E,KAAK,GAAG,CACV,WAAW,EACX,QAAKjF,WAAW,CACnB;QACD,IAAMkF,SAAS,GAAGxG,wBAAwB,CAACuG,KAAK,CAAC;QACjD,IAAMzC,SAAS,GAAGlC,GAAG,CAACiC,OAAO,CAAC2C,SAAS,CAAC;QACxC,IAAIC,gBAAgB,GAAG,EAAE;QACzB,IAAItB,UAAU,EAAE;UAAA;UACZ,IAAMuB,oBAAyB,sDAC1B,QAAKpF,WAAW,IAAG6D,UAAU,CAACjC,EAAE,wBACjCmC,KAAK,GAAE;YACHD,GAAG,EAAED,UAAU,CAACC;UACpB,CAAC,wBACJ;UACDqB,gBAAgB,GAAG3C,SAAS,CAACE,kBAAkB,CAAC0C,oBAAoB,CAAC;QACzE;QAAC,uBACiD9E,GAAG,CAACE,IAAI,CAACC,aAAa,WAAQC,EAAO;UAAA,IAAK;YACxF,IAAI2E,WAAwC,GAAG,EAAE;YACjD,IAAM1C,OAAO,GAAGjC,EAAE,CAACS,EAAE,CAACqB,SAAS,CAACI,EAAE,CAACvB,QAAQ,CAAC;YAC5C,IAAMH,MAAM,GAAGR,EAAE,CAACS,EAAE,CAACb,GAAG,CAACc,IAAI,CAACC,QAAQ,CAAC;YAAC,uBACpBsB,OAAO,CAAC2C,WAAW,CACnCP,WAAW,CAACQ,gBAAgB,CAACJ,gBAAgB,CAAC,EAC9C/F,SAAS,EACT;cACIyF,KAAK,EAALA,KAAK;cACLW,aAAa,EAAER,aAAa,CAACS;YACjC,CAAC,CACJ,iBAPKC,KAAK;cAQX,IAAMC,MAAM,GAAGD,KAAK,CAAC3E,GAAG,CAAC,UAACC,GAAa;gBAAA,OAAKA,GAAG,CAAC,CAAC,CAAC;cAAA,EAAC;cAAC,uBACAU,OAAO,CAACC,GAAG,CAC3DgE,MAAM,CAAC5E,GAAG,CAAC,UAACqB,KAAa;gBAAA,OAAKlB,MAAM,CAACW,GAAG,CAACO,KAAK,CAAC;cAAA,EAAC,CACnD,iBAFKwD,QAAqC;gBAG3CP,WAAW,GAAGA,WAAW,CAACQ,MAAM,CAACD,QAAQ,CAAC;gBAC1C,OAAOP,WAAW;cAAC;YAAA;UACvB,CAAC;YAAA;UAAA;QAAA,EAAC,iBAlBI7B,MAAmC;UAmBzC,IAAMsC,OAAO,GAAG9G,WAAW,CAACwE,MAAM,CAAC;UACnC,OAAO;YACHgB,SAAS,EAAEhB,MAAM;YACjBK,UAAU,EAAEiC,OAAO,GAAG;cAClBlE,EAAE,EAAEkE,OAAO,CAAC,QAAK9F,WAAW,CAAQ;cACpC8D,GAAG,EAAEgC,OAAO,CAAC/B,KAAK,CAACD;YACvB,CAAC,GAAGD,UAAU,GAAGA,UAAU,GAAG;cAC1BjC,EAAE,EAAE,EAAE;cACNkC,GAAG,EAAE;YACT;UACJ,CAAC;QAAC;MAAA;IACN,CAAC;MAAA;IAAA;EAAA;EAAA,OACDiC,YAAY,GAAZ,wBAAmG;IAC/F,OAAO,IAAI,CAAChG,QAAQ,CAACiG,YAAY,EAAE;EACvC,CAAC;EAAA,OAEKC,MAAM;IAAA,IAAkB;MAAA,cACR,IAAI;MAAA,uBAAJ,QAAKtG,SAAS,CAACU,UAAU,iBAArCC,GAAG;QAAA,uBACHA,GAAG,CAACE,IAAI,CAACC,aAAa,CAAC,UAACC,EAAO,EAAK;UACtCA,EAAE,CAACwF,UAAU,CAAC,EAAE,EAAE9G,SAAS,CAAC;UAC5B,OAAOF,oBAAoB;QAC/B,CAAC,CAAC;UACF,OAAO,QAAKiH,KAAK,EAAE;QAAC;MAAA;IACxB,CAAC;MAAA;IAAA;EAAA;EAAA,OACKC,OAAO,oBAACC,kBAA0B;IAAA,IAAoB;MAAA,cAMtC,IAAI;MALtB,gBAGIvB,OAAO,CAAC,cAAc,CAAC;QAFvBC,WAAW,aAAXA,WAAW;QACXC,aAAa,aAAbA,aAAa;MAEjB,IAAMsB,eAAe,GAAGrH,GAAG,EAAE,GAAGoH,kBAAkB;MAAC,uBACjC,QAAK1G,SAAS,CAACU,UAAU,iBAArCC,GAAG;QACT,IAAM2E,KAAK,GAAGxG,aAAa;QAC3B,IAAMyG,SAAS,GAAGxG,wBAAwB,CAACuG,KAAK,CAAC;QACjD,IAAMzC,SAAS,GAAGlC,GAAG,CAACiC,OAAO,CAAC2C,SAAS,CAAC;QACxC,IAAMC,gBAAgB,GAAGtG,iCAAiC,CACtD,QAAKa,MAAM,EACXuF,KAAK,EACL,CACI,IAAI;QACJ;AAChB;AACA;AACA;QACgB,CAAC,CACJ,EACD,KAAK,CACR;QACD,IAAMsB,gBAAgB,GAAGzH,iCAAiC,CACtD,QAAKY,MAAM,EACXuF,KAAK,EACL,CACI,IAAI,EACJqB,eAAe,CAClB,EACD,IAAI,CACP;QACD,IAAIE,eAAwB,GAAG,IAAI;QAAC,uBAC9BlG,GAAG,CAACE,IAAI,CAACC,aAAa,WAAQC,EAAO;UAAA,IAAK;YAC5C,IAAM+F,SAAS,GAAG1H,cAAc,CAAC,QAAKc,QAAQ,CAAC4G,SAAS,CAAC;YACzD,IAAM9D,OAAO,GAAGjC,EAAE,CAACS,EAAE,CAACqB,SAAS,CAACI,EAAE,CAACvB,QAAQ,CAAC;YAC5C,IAAMH,MAAM,GAAGR,EAAE,CAACS,EAAE,CAACb,GAAG,CAACc,IAAI,CAACC,QAAQ,CAAC;YAAC,uBACpBsB,OAAO,CAAC2C,WAAW,CACnCP,WAAW,CAACQ,gBAAgB,CAACJ,gBAAgB,CAAC,EAC9CoB,gBAAgB,EAChB;cACI1B,KAAK,EAAE4B,SAAS,GAAG,CAAC;cAAE;cACtBjB,aAAa,EAAER,aAAa,CAACS;YACjC,CAAC,CACJ,iBAPKC,KAAK;cAQX,IAAIA,KAAK,CAAC/B,MAAM,GAAG8C,SAAS,EAAE;gBAC1BD,eAAe,GAAG,KAAK;gBACvBd,KAAK,CAACgB,GAAG,EAAE;cACf;cACA,IAAMf,MAAM,GAAGD,KAAK,CAAC3E,GAAG,CAAC,UAACC,GAAa;gBAAA,OAAKA,GAAG,CAAC,CAAC,CAAC;cAAA,EAAC;cAAC,uBACAU,OAAO,CAACC,GAAG,CAACgE,MAAM,CAAC5E,GAAG,CAAC,UAACqB,KAAa;gBAAA,OAAKlB,MAAM,CAACW,GAAG,CAACO,KAAK,CAAC;cAAA,EAAC,CAAC,iBAA3GwD,QAAqC;gBAE3CvD,MAAM,CACDC,MAAM,CAAChC,GAAG,CAACiC,OAAO,CAAC,CACnBL,OAAO,CAAC,UAAAM,SAAS,EAAI;kBAClB,IAAMmE,UAAU,GAAGjG,EAAE,CAACS,EAAE,CAACqB,SAAS,CAACI,EAAE,CAACvB,QAAQ,CAAC;kBAC/CuE,QAAQ,CAAC1D,OAAO,CAAC,UAAA0E,OAAO,EAAI;oBACxB,IAAMnE,WAAW,GAAGD,SAAS,CAACE,kBAAkB,CAACkE,OAAO,CAAC;oBACzDD,UAAU,UAAO,CAAClE,WAAW,CAAC;kBAClC,CAAC,CAAC;gBACN,CAAC,CAAC;gBACNkD,MAAM,CAACzD,OAAO,CAAC,UAACN,EAAU;kBAAA,OAAKV,MAAM,UAAO,CAACU,EAAE,CAAC;gBAAA,EAAC;cAAC;YAAA;UACtD,CAAC;YAAA;UAAA;QAAA,EAAC;UAEF,OAAO4E,eAAe;QAAC;MAAA;IAC3B,CAAC;MAAA;IAAA;EAAA;EAAA,OAEDK,sBAAsB,GAAtB,kCAAyE;IACrE,OAAO,IAAIxI,OAAO,EAAO,CAAC2H,YAAY,EAAE;EAC5C,CAAC;EAAA,OACDc,4BAA4B,GAA5B,sCAA6BC,aAAyD,EAAiB;IACnG,OAAO7H,oBAAoB;EAC/B,CAAC;EAAA,OAEKiH,KAAK;IAAA,IAAG;MAAA,cACN,IAAI;MAAR,IAAI,QAAKrG,MAAM,EAAE;QACb,OAAO4B,OAAO,CAACsF,MAAM,CAACrI,UAAU,CAAC,KAAK,EAAE;UACpCsI,QAAQ,EAAE,QAAKzH,YAAY;UAC3B0H,UAAU,EAAE,QAAKzH;QACrB,CAAC,CAAC,CAAC;MACP;MACA,QAAKK,MAAM,GAAG,IAAI;MAClB,QAAKC,QAAQ,CAACoH,QAAQ,EAAE;MAAC,uBAEP,QAAKxH,SAAS,CAACU,UAAU,iBAArCC,GAAG;QACTA,GAAG,CAACE,IAAI,CAAC2F,KAAK,EAAE;;QAEhB;QACA;MAAA;IACJ,CAAC;MAAA;IAAA;EAAA;EAAA;AAAA;AAIL,OAAO,SAASiB,iCAAiC,CAC7C7H,OAA8B,EAC9B8H,MAAgG,EAChGxH,QAAuC,EACU;EACjD,IAAMG,WAAW,GAAG1B,2BAA2B,CAAC+I,MAAM,CAAC3H,MAAM,CAACO,UAAU,CAAC;EAEzE,gBAII6E,OAAO,CAAC,cAAc,CAAC;IAHvBwC,IAAI,aAAJA,IAAI;IACJC,SAAS,aAATA,SAAS;IACTC,QAAQ,aAARA,QAAQ;EAGZ,IAAMC,UAAU,GAAGH,IAAI,CAACzH,QAAQ,CAAC6H,WAAW,CAAC;EAC7C,IAAMrH,UAAU,GAAG;IAAA,IAAa;MAAA,uBACVkH,SAAS,CAACI,YAAY,CAACF,UAAU,EAAE,MAAM,CAAC,iBAAtDG,GAAG;QAET,IAAMpH,IAAI,GAAGiH,UAAU,CAClBtG,EAAE,CAACyG,GAAG,CAAC,CACPzG,EAAE,CAACkG,MAAM,CAAC7H,YAAY,GAAG,GAAG,CAAC,CAC7B2B,EAAE,CAACkG,MAAM,CAAC5H,cAAc,GAAG,GAAG,CAAC,CAC/B0B,EAAE,CAACkG,MAAM,CAAC3H,MAAM,CAACmI,OAAO,GAAG,GAAG,CAAC;QACpC,IAAMzG,IAAqC,GAAGZ,IAAI,CAC7CW,EAAE,CAAC,OAAO,CAAC,CACX2G,eAAe,CAACN,QAAQ,CAACO,MAAM,CAAC,CAAC;QAAA,CACjCC,iBAAiB,CAACR,QAAQ,CAACS,IAAI,CAAQ,CAAC,CAAC;;QAG9C,IAAMvE,MAAoH,GAAGlD,IAAI,CAC5HW,EAAE,CAAC,SAAS,CAAC,CACb2G,eAAe,CAACN,QAAQ,CAACO,MAAM,CAAC,CAChCC,iBAAiB,CAACR,QAAQ,CAACS,IAAI,CAAQ;QAE5C,IAAM1G,WAAwD,GAAGf,IAAI,CAChEW,EAAE,CAAC,cAAc,CAAC,CAClB2G,eAAe,CAACN,QAAQ,CAACO,MAAM,CAAC,CAChCC,iBAAiB,CAACR,QAAQ,CAACS,IAAI,CAAQ;QAG5C,IAAMC,QAAmE,GAAG,CAAC,CAAC;QAC9E,IAAMC,UAAU,GAAGd,MAAM,CAAC3H,MAAM,CAAC6C,OAAO,GAAG8E,MAAM,CAAC3H,MAAM,CAAC6C,OAAO,CAAC6F,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;QAC9ED,UAAU,CAACE,IAAI,CAAC,CAACrI,WAAW,CAAC,CAAC;QAC9B,IAAMsI,eAAe,GAAGH,UAAU,CAACpH,GAAG,CAAC,UAAAkE,KAAK,EAAI;UAC5C,IAAMsD,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACxD,KAAK,CAAC,GAAGA,KAAK,CAACmD,KAAK,CAAC,CAAC,CAAC,GAAG,CAACnD,KAAK,CAAC;UAC/DsD,OAAO,CAACG,OAAO,CAAC,UAAU,CAAC;UAC3B,OAAOH,OAAO;QAClB,CAAC,CAAC;QACF;QACAD,eAAe,CAACD,IAAI,CAAC,CACjB,WAAW,EACXrI,WAAW,CACd,CAAC;QACFsI,eAAe,CAACD,IAAI,CAAC5J,aAAa,CAAC;QACnC6J,eAAe,CAACpG,OAAO,CAAC,UAAAqG,OAAO,EAAI;UAC/B,IAAMrD,SAAS,GAAGxG,wBAAwB,CAAC6J,OAAO,CAAC;UACnD,IAAMI,OAAO,GAAGnI,IAAI,CAACW,EAAE,CAAC+D,SAAS,GAAG,GAAG,CAAC,CACnC4C,eAAe,CAACN,QAAQ,CAACO,MAAM,CAAC,CAChCC,iBAAiB,CAACR,QAAQ,CAACO,MAAM,CAAC;UACvCG,QAAQ,CAAChD,SAAS,CAAC,GAAG;YAClBA,SAAS,EAATA,SAAS;YACTtC,EAAE,EAAE+F,OAAO;YACXjG,kBAAkB,EAAE9D,uBAAuB,CAACyI,MAAM,CAAC3H,MAAM,EAAE6I,OAAO,CAAC;YACnEtD,KAAK,EAAEsD;UACX,CAAC;QACL,CAAC,CAAC;QAEF,OAAO;UACH/H,IAAI,EAAJA,IAAI;UACJY,IAAI,EAAJA,IAAI;UACJsC,MAAM,EAANA,MAAM;UACNnC,WAAW,EAAXA,WAAW;UACXgB,OAAO,EAAE2F;QACb,CAAC;MAAC;IACN,CAAC;MAAA;IAAA;EAAA,GAAG;EAGJ,IAAMvI,SAAkD,GAAG;IACvD8H,UAAU,EAAVA,UAAU;IACVpH,UAAU,EAAEA;EAChB,CAAC;EAED,IAAMuI,QAAQ,GAAG,IAAItJ,6BAA6B,CAC9CC,OAAO,EACP8H,MAAM,CAAC7H,YAAY,EACnB6H,MAAM,CAAC5H,cAAc,EACrB4H,MAAM,CAAC3H,MAAM,EACbC,SAAS,EACT0H,MAAM,CAACzH,OAAO,EACdC,QAAQ,CACX;EACD,OAAO6B,OAAO,CAACmH,OAAO,CAACD,QAAQ,CAAC;AACpC"}