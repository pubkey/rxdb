{"version":3,"file":"rx-storage-instance-foundationdb.js","names":["Subject","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","CLEANUP_INDEX","getFoundationDBIndexName","newRxError","getIndexableStringMonad","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","ensureNotFalsy","lastOfArray","now","PROMISE_RESOLVE_VOID","queryFoundationDB","INDEX_MAX","attachmentMapKey","RxStorageInstanceFoundationDB","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","primaryPath","primaryKey","bulkWrite","documentWrites","context","dbsPromise","dbs","categorized","root","doTransaction","tx","ret","success","error","ids","map","row","document","mainTx","at","main","subspace","attachmentTx","attachments","docsInDB","Map","Promise","all","id","get","doc","set","errors","forEach","err","documentId","bulkInsertDocs","writeRow","docId","Object","values","indexes","indexMeta","indexString","getIndexableString","indexTx","db","bulkUpdateDocs","oldIndexString","previous","newIndexString","attachmentsAdd","attachment","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","result","eventBulk","events","length","lastState","checkpoint","lwt","_meta","next","findDocumentsById","withDeleted","docInDb","_deleted","query","preparedQuery","getAttachmentData","data","getChangedDocumentsSince","limit","require","keySelector","StreamingMode","index","indexName","lowerBoundString","checkpointPartialDoc","innerResult","getRangeAll","firstGreaterThan","streamingMode","Exact","range","docIds","docsData","concat","lastDoc","documents","changeStream","asObservable","remove","clearRange","close","cleanup","minimumDeletedTime","maxDeletionTime","upperBoundString","noMoreUndeleted","batchSize","pop","subIndexDB","docData","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","reject","database","collection","complete","createFoundationDBStorageInstance","params","open","directory","encoders","connection","clusterFile","createOrOpen","dir","version","withKeyEncoding","string","withValueEncoding","json","indexDBs","useIndexes","slice","push","useIndexesFinal","indexAr","Array","isArray","unshift","indexDB","instance","resolve"],"sources":["../../../../src/plugins/foundationdb/rx-storage-instance-foundationdb.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport type {\n    FoundationDBDatabase,\n    FoundationDBIndexMeta,\n    FoundationDBStorageInternals,\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types';\n// import {\n//     open as foundationDBOpen,\n//     directory as foundationDBDirectory,\n//     encoders as foundationDBEncoders,\n//     keySelector as foundationDBKeySelector,\n//     StreamingMode as foundationDBStreamingMode\n// } from 'foundationdb';\nimport {\n    categorizeBulkWriteRows,\n    getNewestOfDocumentStates\n} from '../../rx-storage-helper';\nimport {\n\n    CLEANUP_INDEX,\n    getFoundationDBIndexName\n} from './foundationdb-helpers';\nimport { newRxError } from '../../rx-error';\nimport {\n    getIndexableStringMonad,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport {\n    ensureNotFalsy, lastOfArray, now\n    , PROMISE_RESOLVE_VOID\n} from '../../util';\nimport { queryFoundationDB } from './foundationdb-query';\nimport { INDEX_MAX } from '../../query-planner';\nimport { attachmentMapKey } from '../memory';\n\nexport class RxStorageInstanceFoundationDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    FoundationDBStorageInternals<RxDocType>,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed = false;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageFoundationDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: FoundationDBStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageFoundationDBInstanceCreationOptions>,\n        public readonly settings: RxStorageFoundationDBSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n        const result = await dbs.root.doTransaction(async (tx: any) => {\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                success: {},\n                error: {}\n            };\n\n            const ids = documentWrites.map(row => (row.document as any)[this.primaryPath]);\n            const mainTx = tx.at(dbs.main.subspace);\n            const attachmentTx = tx.at(dbs.attachments.subspace);\n            const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n            /**\n             * TODO this might be faster if fdb\n             * any time adds a bulk-fetch-by-key method.\n             */\n            await Promise.all(\n                ids.map(async (id) => {\n                    const doc = await mainTx.get(id);\n                    docsInDB.set(id, doc);\n                })\n            );\n\n\n            categorized = categorizeBulkWriteRows<RxDocType>(\n                this,\n                this.primaryPath as any,\n                docsInDB,\n                documentWrites,\n                context\n            );\n\n            categorized.errors.forEach(err => {\n                ret.error[err.documentId] = err;\n            });\n\n            // INSERTS\n            categorized.bulkInsertDocs.forEach(writeRow => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n                ret.success[docId] = writeRow.document;\n\n                // insert document data\n                mainTx.set(docId, writeRow.document);\n\n                // insert secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const indexString = indexMeta.getIndexableString(writeRow.document);\n                    const indexTx = tx.at(indexMeta.db.subspace);\n                    indexTx.set(indexString, docId);\n                });\n            });\n            // UPDATES\n            categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n\n                // overwrite document data\n                mainTx.set(docId, writeRow.document);\n\n                // update secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                    const newIndexString = indexMeta.getIndexableString(writeRow.document);\n                    if (oldIndexString !== newIndexString) {\n                        const indexTx = tx.at(indexMeta.db.subspace);\n                        indexTx.delete(oldIndexString);\n                        indexTx.set(newIndexString, docId);\n                    }\n                });\n                ret.success[docId] = writeRow.document;\n            });\n\n            // attachments\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsUpdate.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsRemove.forEach(attachment => {\n                attachmentTx.delete(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                );\n            });\n\n            return ret;\n        });\n        /**\n         * The events must be emitted AFTER the transaction\n         * has finished.\n         * Otherwise an observable changestream might cause a read\n         * to a document that does not already exist outside of the transaction.\n         */\n        if (ensureNotFalsy(categorized).eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates<any>(\n                this.primaryPath as any,\n                Object.values(result.success)\n            );\n            ensureNotFalsy(categorized).eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(ensureNotFalsy(categorized).eventBulk);\n        }\n        return result;\n    }\n\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        return dbs.main.doTransaction(async (tx: any) => {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            await Promise.all(\n                ids.map(async (docId) => {\n                    const docInDb = await tx.get(docId);\n                    if (\n                        docInDb &&\n                        (\n                            !docInDb._deleted ||\n                            withDeleted\n                        )\n                    ) {\n                        ret[docId] = docInDb;\n                    }\n                })\n            );\n            return ret;\n        });\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryFoundationDB(this, preparedQuery);\n    }\n    async getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        const dbs = await this.internals.dbsPromise;\n        const attachment = await dbs.attachments.get(attachmentMapKey(documentId, attachmentId));\n        return attachment.data;\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const dbs = await this.internals.dbsPromise;\n        const index = [\n            '_meta.lwt',\n            this.primaryPath as any\n        ];\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        let lowerBoundString = '';\n        if (checkpoint) {\n            const checkpointPartialDoc: any = {\n                [this.primaryPath]: checkpoint.id,\n                _meta: {\n                    lwt: checkpoint.lwt\n                }\n            };\n            lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n        }\n        const result: RxDocumentData<RxDocType>[] = await dbs.root.doTransaction(async (tx: any) => {\n            let innerResult: RxDocumentData<RxDocType>[] = [];\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                INDEX_MAX,\n                {\n                    limit,\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(\n                docIds.map((docId: string) => mainTx.get(docId))\n            );\n            innerResult = innerResult.concat(docsData);\n            return innerResult;\n        });\n        const lastDoc = lastOfArray(result);\n        return {\n            documents: result,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        const dbs = await this.internals.dbsPromise;\n        await dbs.root.doTransaction((tx: any) => {\n            tx.clearRange('', INDEX_MAX);\n            return PROMISE_RESOLVE_VOID;\n        });\n        return this.close();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const dbs = await this.internals.dbsPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ]\n        );\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ]\n        );\n        let noMoreUndeleted: boolean = true;\n        await dbs.root.doTransaction(async (tx: any) => {\n            const batchSize = ensureNotFalsy(this.settings.batchSize);\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                upperBoundString,\n                {\n                    limit: batchSize + 1, // get one more extra to detect what to return from cleanup()\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            if (range.length > batchSize) {\n                noMoreUndeleted = false;\n                range.pop();\n            }\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n\n            Object\n                .values(dbs.indexes)\n                .forEach(indexMeta => {\n                    const subIndexDB = tx.at(indexMeta.db.subspace);\n                    docsData.forEach(docData => {\n                        const indexString = indexMeta.getIndexableString(docData);\n                        subIndexDB.delete(indexString);\n                    });\n                });\n            docIds.forEach((id: string) => mainTx.delete(id));\n        });\n\n        return noMoreUndeleted;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async close() {\n        if (this.closed) {\n            return Promise.reject(newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            }));\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        const dbs = await this.internals.dbsPromise;\n        dbs.root.close();\n\n        // TODO shouldnt we close the index databases?\n        // Object.values(dbs.indexes).forEach(db => db.close());\n    }\n}\n\n\nexport function createFoundationDBStorageInstance<RxDocType>(\n    storage: RxStorageFoundationDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>,\n    settings: RxStorageFoundationDBSettings\n): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const {\n        open,\n        directory,\n        encoders\n    } = require('foundationdb');\n\n    const connection = open(settings.clusterFile);\n    const dbsPromise = (async () => {\n        const dir = await directory.createOrOpen(connection, 'rxdb');\n\n        const root = connection\n            .at(dir)\n            .at(params.databaseName + '.')\n            .at(params.collectionName + '.')\n            .at(params.schema.version + '.');\n        const main: FoundationDBDatabase<RxDocType> = root\n            .at('main.')\n            .withKeyEncoding(encoders.string) // automatically encode & decode keys using tuples\n            .withValueEncoding(encoders.json) as any; // and values using JSON\n\n\n        const events: FoundationDBDatabase<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = root\n            .at('events.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n        const attachments: FoundationDBDatabase<RxAttachmentWriteData> = root\n            .at('attachments.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n\n        const indexDBs: { [indexName: string]: FoundationDBIndexMeta<RxDocType> } = {};\n        const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n        useIndexes.push([primaryPath]);\n        const useIndexesFinal = useIndexes.map(index => {\n            const indexAr = Array.isArray(index) ? index.slice(0) : [index];\n            indexAr.unshift('_deleted');\n            return indexAr;\n        })\n        // used for `getChangedDocumentsSince()`\n        useIndexesFinal.push([\n            '_meta.lwt',\n            primaryPath\n        ]);\n        useIndexesFinal.push(CLEANUP_INDEX);\n        useIndexesFinal.forEach(indexAr => {\n            const indexName = getFoundationDBIndexName(indexAr);\n            const indexDB = root.at(indexName + '.')\n                .withKeyEncoding(encoders.string)\n                .withValueEncoding(encoders.string);\n            indexDBs[indexName] = {\n                indexName,\n                db: indexDB,\n                getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n                index: indexAr\n            };\n        });\n\n        return {\n            root,\n            main,\n            events,\n            attachments,\n            indexes: indexDBs\n        };\n    })();\n\n\n    const internals: FoundationDBStorageInternals<RxDocType> = {\n        connection,\n        dbsPromise: dbsPromise\n    };\n\n    const instance = new RxStorageInstanceFoundationDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}