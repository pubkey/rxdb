{"version":3,"file":"key-compression.js","names":["createCompressionTable","compressObject","decompressObject","compressedPath","DEFAULT_COMPRESSION_FLAG","createCompressedJsonSchema","compressQuery","overwritable","wrapRxStorageInstance","getPrimaryFieldOfPrimaryKey","flatCloneDocWithMeta","flatClone","isMaybeReadonlyArray","COMPRESSION_STATE_BY_SCHEMA","WeakMap","getCompressionStateByRxJsonSchema","schema","deepFreezeWhenDevMode","compressionState","get","compressionSchema","primaryKey","table","compressedSchema","composedPrimary","newComposedPrimary","key","fields","map","field","separator","indexes","newIndexes","idx","subIdx","set","wrappedKeyCompressionStorage","args","statics","Object","assign","storage","prepareQuery","mutateableQuery","keyCompression","getSortComparator","preparedQuery","getQueryMatcher","createStorageInstance","params","modifyToStorage","docData","compressDocumentData","modifyFromStorage","decompressDocumentData","childSchema","instance","attachments","_attachments"],"sources":["../../../src/plugins/key-compression.ts"],"sourcesContent":["/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you dont use this, ensure that you set disableKeyComression to false in your schema\n */\n\nimport type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport {\n    createCompressionTable,\n    CompressionTable,\n    JsonSchema as KeyCompressionJsonSchema,\n    compressObject,\n    decompressObject,\n    compressedPath,\n    DEFAULT_COMPRESSION_FLAG,\n    createCompressedJsonSchema,\n    compressQuery\n} from 'jsonschema-key-compression';\nimport {\n    overwritable\n} from '../overwritable';\nimport { wrapRxStorageInstance } from '../plugin-helpers';\nimport { getPrimaryFieldOfPrimaryKey } from '../rx-schema-helper';\nimport { flatCloneDocWithMeta } from '../rx-storage-helper';\n\nimport type {\n    RxJsonSchema,\n    CompositePrimaryKey,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxDocumentData,\n    RxStorageStatics,\n    FilledMangoQuery,\n    PreparedQuery\n} from '../types';\nimport {\n    flatClone,\n    isMaybeReadonlyArray\n} from '../util';\n\ndeclare type CompressionState = {\n    table: CompressionTable;\n    schema: RxJsonSchema<any>;\n    compressedSchema: RxJsonSchema<any>;\n};\n\n/**\n * Cache the compression table and the compressed schema\n * by the storage instance for better performance.\n */\nconst COMPRESSION_STATE_BY_SCHEMA: WeakMap<\n    RxJsonSchema<any>,\n    CompressionState\n> = new WeakMap();\n\n\nexport function getCompressionStateByRxJsonSchema(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    /**\n     * Because we cache the state by the JsonSchema,\n     * it must be ausured that the given schema object\n     * is never mutated.\n     */\n    overwritable.deepFreezeWhenDevMode(schema);\n\n    let compressionState = COMPRESSION_STATE_BY_SCHEMA.get(schema);\n    if (!compressionState) {\n        const compressionSchema: KeyCompressionJsonSchema = flatClone(schema) as any;\n        delete (compressionSchema as any).primaryKey;\n\n        const table = createCompressionTable(\n            compressionSchema,\n            DEFAULT_COMPRESSION_FLAG,\n            [\n                /**\n                 * Do not compress the primary field\n                 * for easier debugging.\n                 */\n                getPrimaryFieldOfPrimaryKey(schema.primaryKey),\n                '_rev',\n                '_attachments',\n                '_deleted',\n                '_meta'\n            ]\n        );\n\n        delete (compressionSchema as any).primaryKey;\n        const compressedSchema: RxJsonSchema<any> = createCompressedJsonSchema(\n            table,\n            compressionSchema\n        ) as RxJsonSchema<any>;\n\n        // also compress primary key\n        if (typeof schema.primaryKey !== 'string') {\n            const composedPrimary: CompositePrimaryKey<any> = schema.primaryKey;\n            const newComposedPrimary: CompositePrimaryKey<any> = {\n                key: compressedPath(table, composedPrimary.key as string),\n                fields: composedPrimary.fields.map(field => compressedPath(table, field as string)),\n                separator: composedPrimary.separator\n            };\n            compressedSchema.primaryKey = newComposedPrimary;\n        } else {\n            compressedSchema.primaryKey = compressedPath(table, schema.primaryKey);\n        }\n\n        /**\n         * the key compression module does not know about indexes\n         * in the schema, so we have to also compress them here.\n         */\n        if (schema.indexes) {\n            const newIndexes = schema.indexes.map(idx => {\n                if (isMaybeReadonlyArray(idx)) {\n                    return idx.map(subIdx => compressedPath(table, subIdx));\n                } else {\n                    return compressedPath(table, idx);\n                }\n            });\n            compressedSchema.indexes = newIndexes;\n        }\n\n        compressionState = {\n            table,\n            schema,\n            compressedSchema\n        };\n        COMPRESSION_STATE_BY_SCHEMA.set(schema, compressionState);\n    }\n    return compressionState;\n}\n\nexport function wrappedKeyCompressionStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    const statics: RxStorageStatics = Object.assign(\n        {},\n        args.storage.statics,\n        {\n            prepareQuery<RxDocType>(\n                schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n                mutateableQuery: FilledMangoQuery<RxDocType>\n            ): PreparedQuery<RxDocType> {\n                if (schema.keyCompression) {\n                    const compressionState = getCompressionStateByRxJsonSchema(schema);\n                    mutateableQuery = compressQuery(\n                        compressionState.table,\n                        mutateableQuery as any\n                    ) as any;\n                    return args.storage.statics.prepareQuery(\n                        compressionState.compressedSchema,\n                        mutateableQuery\n                    );\n                }\n                return args.storage.statics.prepareQuery(\n                    schema,\n                    mutateableQuery\n                );\n            },\n            getSortComparator<RxDocType>(\n                schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n                preparedQuery: PreparedQuery<RxDocType>\n            ): DeterministicSortComparator<RxDocType> {\n                if (!schema.keyCompression) {\n                    return args.storage.statics.getSortComparator(schema, preparedQuery);\n                } else {\n                    const compressionState = getCompressionStateByRxJsonSchema(schema);\n                    return args.storage.statics.getSortComparator(compressionState.schema, preparedQuery);\n                }\n            },\n            getQueryMatcher<RxDocType>(\n                schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n                preparedQuery: PreparedQuery<RxDocType>\n            ): QueryMatcher<RxDocumentData<RxDocType>> {\n                if (!schema.keyCompression) {\n                    return args.storage.statics.getQueryMatcher(schema, preparedQuery);\n                } else {\n                    const compressionState = getCompressionStateByRxJsonSchema(schema);\n                    return args.storage.statics.getQueryMatcher(compressionState.schema, preparedQuery);\n                }\n            }\n        }\n    );\n\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            statics,\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (!params.schema.keyCompression) {\n                    return args.storage.createStorageInstance(params);\n                }\n\n                const compressionState = getCompressionStateByRxJsonSchema(params.schema);\n                function modifyToStorage(docData: RxDocumentData<RxDocType>) {\n                    return compressDocumentData(compressionState, docData);\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    return decompressDocumentData(compressionState, docData);\n                }\n\n                /**\n                 * Because this wrapper resolves the key-compression,\n                 * we can set the flag to false\n                 * which allows underlying storages to detect wrong conficturations\n                 * like when keyCompression is set to false but no key-compression module is used.\n                 */\n                const childSchema = flatClone(compressionState.compressedSchema);\n                childSchema.keyCompression = false;\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: childSchema\n                        }\n                    )\n                );\n\n                return wrapRxStorageInstance(\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage\n                );\n            }\n        }\n    );\n}\n\nexport function compressDocumentData(\n    compressionState: CompressionState,\n    docData: RxDocumentData<any>\n): RxDocumentData<any> {\n    /**\n     * Do not send attachments to compressObject()\n     * because it will deep clone which does not work on Blob or Buffer.\n     */\n    docData = flatCloneDocWithMeta(docData);\n    const attachments = docData._attachments;\n    delete docData._attachments;\n\n    docData = compressObject(\n        compressionState.table,\n        docData\n    );\n    docData._attachments = attachments;\n    return docData;\n}\n\nexport function decompressDocumentData(\n    compressionState: CompressionState,\n    docData: RxDocumentData<any>\n): RxDocumentData<any> {\n    return decompressObject(\n        compressionState.table,\n        docData\n    );\n}\n"],"mappings":"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"}