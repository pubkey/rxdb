{"version":3,"file":"remote.js","names":["filter","deepEqual","ensureNotFalsy","createAnswer","createErrorAnswer","exposeRxStorageRemote","settings","instanceByFullName","Map","messages$","pipe","msg","method","subscribe","customRequestHandler","send","Error","result","params","err","getRxStorageInstance","storage","createStorageInstance","database","storageInstances","Array","from","collectionName","storageInstance","find","instance","console","dir","JSON","stringify","schema","existingSchema","Promise","resolve","connectionId","isArray","fullName","databaseName","version","join","state","get","storageInstancePromise","connectionIds","Set","set","add","subs","push","changeStream","changes","message","answerTo","return","conflictResultionTasks","conflicts","connectionClosed","closeThisConnection","forEach","sub","unsubscribe","delete","collection","collections","onDestroy","subMsg","plainMessage","size"],"sources":["../../../../src/plugins/storage-remote/remote.ts"],"sourcesContent":["import { filter, Subscription } from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    deepEqual,\n    ensureNotFalsy\n} from '../../plugins/utils';\nimport { createAnswer, createErrorAnswer } from './storage-remote-helpers';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RxStorageRemoteExposeSettings,\n    RxStorageRemoteExposeSettingsRxDatabase,\n    RxStorageRemoteExposeSettingsRxStorage,\n    RxStorageRemoteExposeType\n} from './storage-remote-types';\n\n/**\n * Run this on the 'remote' part,\n * so that RxStorageMessageChannel can connect to it.\n */\nexport function exposeRxStorageRemote(settings: RxStorageRemoteExposeSettings): RxStorageRemoteExposeType {\n    type InstanceState = {\n        storageInstancePromise: Promise<RxStorageInstance<any, any, any>>;\n        connectionIds: Set<string>;\n        params: RxStorageInstanceCreationParams<any, any>;\n    };\n    const instanceByFullName: Map<string, InstanceState> = new Map();\n\n\n    settings.messages$.pipe(\n        filter(msg => msg.method === 'custom')\n    ).subscribe(async (msg) => {\n        if (!settings.customRequestHandler) {\n            settings.send(createErrorAnswer(\n                msg,\n                new Error('Remote storage: cannot resolve custom request because settings.customRequestHandler is not set')\n            ));\n        } else {\n            try {\n                const result = await settings.customRequestHandler(msg.params);\n                settings.send(createAnswer(msg, result));\n            } catch (err: any) {\n                settings.send(createErrorAnswer(\n                    msg,\n                    err\n                ));\n            }\n        }\n    });\n\n\n    function getRxStorageInstance<RxDocType>(params: any): Promise<RxStorageInstance<RxDocType, any, any, any>> {\n        if ((settings as RxStorageRemoteExposeSettingsRxStorage).storage) {\n            return (settings as RxStorageRemoteExposeSettingsRxStorage).storage.createStorageInstance(params);\n        } else if ((settings as RxStorageRemoteExposeSettingsRxDatabase).database) {\n            const storageInstances = Array.from((settings as RxStorageRemoteExposeSettingsRxDatabase).database.storageInstances);\n            const collectionName = params.collectionName;\n            const storageInstance = storageInstances.find(instance => instance.collectionName === collectionName);\n            if (!storageInstance) {\n                console.dir(storageInstances);\n                throw new Error('storageInstance does not exist ' + JSON.stringify({\n                    collectionName\n                }));\n            }\n            const schema = params.schema;\n            if (!deepEqual(schema, storageInstance.schema)) {\n                throw new Error('Wrong schema ' + JSON.stringify({\n                    schema,\n                    existingSchema: storageInstance.schema\n                }));\n            }\n            return Promise.resolve(storageInstance);\n        } else {\n            throw new Error('no base given');\n        }\n    }\n\n    settings.messages$.pipe(\n        filter(msg => msg.method === 'create')\n    ).subscribe(async (msg) => {\n        const connectionId = msg.connectionId;\n\n        /**\n         * Do an isArray check here\n         * for runtime check types to ensure we have\n         * instance creation params and not method input params.\n        */\n        if (Array.isArray(msg.params)) {\n            return;\n        }\n        const params = msg.params;\n        const collectionName = params.collectionName;\n\n        /**\n         * We de-duplicate the storage instances.\n         * This makes sense in many environments like\n         * electron where on main process contains the storage\n         * for multiple renderer processes. Same goes for SharedWorkers etc.\n         */\n        const fullName = [\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        ].join('|');\n        let state = instanceByFullName.get(fullName);\n        if (!state) {\n            try {\n                state = {\n                    /**\n                     * We work with a promise here to ensure\n                     * that parallel create-calls will still end up\n                     * with exactly one instance and not more.\n                     */\n                    storageInstancePromise: getRxStorageInstance(params),\n                    connectionIds: new Set(),\n                    params\n                };\n                instanceByFullName.set(fullName, state);\n            } catch (err: any) {\n                settings.send(createErrorAnswer(msg, err));\n                return;\n            }\n        } else {\n            // if instance already existed, ensure that the schema is equal\n            if (!deepEqual(params.schema, state.params.schema)) {\n                settings.send(createErrorAnswer(msg, new Error('Remote storage: schema not equal to existing storage')));\n                return;\n            }\n        }\n        state.connectionIds.add(msg.connectionId);\n        const subs: Subscription[] = [];\n\n        const storageInstance = await state.storageInstancePromise;\n        /**\n         * Automatically subscribe to the changeStream()\n         * because we always need them.\n         */\n        subs.push(\n            storageInstance.changeStream().subscribe(changes => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'changestream',\n                    method: 'changeStream',\n                    return: changes\n                };\n                settings.send(message);\n            })\n        );\n        subs.push(\n            storageInstance.conflictResultionTasks().subscribe(conflicts => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'conflictResultionTasks',\n                    method: 'conflictResultionTasks',\n                    return: conflicts\n                };\n                settings.send(message);\n            })\n        );\n\n\n        let connectionClosed = false;\n        function closeThisConnection() {\n            if (connectionClosed) {\n                return;\n            }\n            connectionClosed = true;\n            subs.forEach(sub => sub.unsubscribe());\n            ensureNotFalsy(state).connectionIds.delete(connectionId);\n            instanceByFullName.delete(fullName);\n            /**\n             * TODO how to notify the other ports on remove() ?\n             */\n        }\n\n        // also close the connection when the collection gets destroyed\n        if ((settings as RxStorageRemoteExposeSettingsRxDatabase).database) {\n            const database = (settings as RxStorageRemoteExposeSettingsRxDatabase).database;\n            const collection = database.collections[collectionName];\n            if (collection) {\n                collection.onDestroy.push(() => closeThisConnection());\n            } else {\n                database.onDestroy.push(() => closeThisConnection());\n            }\n        }\n\n        subs.push(\n            settings.messages$.pipe(\n                filter(subMsg => (subMsg as MessageToRemote).connectionId === connectionId)\n            ).subscribe(async (plainMessage) => {\n                const message: MessageToRemote = plainMessage as any;\n                if (\n                    message.method === 'create' ||\n                    message.method === 'custom'\n                ) {\n                    return;\n                }\n                if (!Array.isArray(message.params)) {\n                    return;\n                }\n                let result;\n                try {\n                    if (\n                        message.method === 'close' &&\n                        (settings as RxStorageRemoteExposeSettingsRxDatabase).database\n                    ) {\n                        /**\n                         * Do not close the storageInstance if it was taken from\n                         * a running RxDatabase.\n                         * In that case we only close the instance\n                         * when the RxDatabase gets destroyed.\n                         */\n                        settings.send(createAnswer(message, null));\n                        return;\n                    }\n                    /**\n                     * On calls to 'close()',\n                     * we only close the main instance if there are no other\n                     * ports connected.\n                     */\n                    if (\n                        message.method === 'close' &&\n                        ensureNotFalsy(state).connectionIds.size > 1\n                    ) {\n                        settings.send(createAnswer(message, null));\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        subs.forEach(sub => sub.unsubscribe());\n                        return;\n                    }\n                    result = await (storageInstance as any)[message.method](\n                        message.params[0],\n                        message.params[1],\n                        message.params[2],\n                        message.params[3]\n                    );\n                    if (\n                        message.method === 'close' ||\n                        message.method === 'remove'\n                    ) {\n                        closeThisConnection();\n                    }\n                    settings.send(createAnswer(message, result));\n                } catch (err: any) {\n                    settings.send(createErrorAnswer(message, err));\n                }\n            })\n        );\n\n        settings.send(createAnswer(msg, 'ok'));\n    });\n\n    return {\n        instanceByFullName\n    };\n}\n"],"mappings":"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"}