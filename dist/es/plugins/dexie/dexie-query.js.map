{"version":3,"file":"dexie-query.js","names":["dexieReplaceIfStartsWithPipe","DEXIE_DOCS_TABLE_NAME","fromDexieToStorage","RxStorageDexieStatics","dexieCount","instance","preparedQuery","internals","state","queryPlan","queryPlanFields","index","keyRange","getKeyRangeByQueryPlan","dexieDb","_options","IDBKeyRange","count","transaction","dexieTable","dexieTx","tx","idbtrans","store","objectStore","length","primaryPath","indexName","map","field","join","request","Promise","res","rej","onsuccess","result","onerror","err","dexieQuery","query","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","schema","rows","cursorReq","openCursor","e","cursor","target","docData","value","_deleted","push","sortFieldsSameAsIndexFields","sortComparator","getSortComparator","sort","slice","documents","window","Error","ret","bound","startKeys","endKeys","inclusiveStart","inclusiveEnd"],"sources":["../../../../src/plugins/dexie/dexie-query.ts"],"sourcesContent":["import { QueryMatcher } from 'event-reduce-js';\nimport type {\n    DexiePreparedQuery,\n    RxDocumentData,\n    RxQueryPlan,\n    RxStorageQueryResult\n} from '../../types';\nimport {\n    dexieReplaceIfStartsWithPipe,\n    DEXIE_DOCS_TABLE_NAME,\n    fromDexieToStorage\n} from './dexie-helper';\nimport { RxStorageDexieStatics } from './rx-storage-dexie';\nimport type { RxStorageInstanceDexie } from './rx-storage-instance-dexie';\n\n\nexport function getKeyRangeByQueryPlan(\n    queryPlan: RxQueryPlan,\n    IDBKeyRange?: any\n) {\n    if (!IDBKeyRange) {\n        if (typeof window === 'undefined') {\n            throw new Error('IDBKeyRange missing');\n        } else {\n            IDBKeyRange = window.IDBKeyRange;\n        }\n    }\n\n    let ret: any;\n    /**\n     * If index has only one field,\n     * we have to pass the keys directly, not the key arrays.\n     */\n    if (queryPlan.index.length === 1) {\n        ret = IDBKeyRange.bound(\n            queryPlan.startKeys[0],\n            queryPlan.endKeys[0],\n            queryPlan.inclusiveStart,\n            queryPlan.inclusiveEnd\n        );\n    } else {\n        ret = IDBKeyRange.bound(\n            queryPlan.startKeys,\n            queryPlan.endKeys,\n            queryPlan.inclusiveStart,\n            queryPlan.inclusiveEnd\n        );\n    }\n    return ret;\n}\n\n\n/**\n * Runs mango queries over the Dexie.js database.\n */\nexport async function dexieQuery<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: DexiePreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const state = await instance.internals;\n    const query = preparedQuery.query;\n\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlan = preparedQuery.queryPlan;\n\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n    if (!queryPlan.selectorSatisfiedByIndex) {\n        queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n            instance.schema,\n            preparedQuery\n        );\n    }\n\n    const keyRange = getKeyRangeByQueryPlan(\n        queryPlan,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n\n    const queryPlanFields: string[] = queryPlan.index;\n\n    let rows: any[] = [];\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            /**\n             * TODO here we use the native IndexedDB transaction\n             * to get the cursor.\n             * Instead we should not leave Dexie.js API and find\n             * a way to create the cursor with Dexie.js.\n             */\n            const tx = (dexieTx as any).idbtrans;\n\n            // const nativeIndexedDB = state.dexieDb.backendDB();\n            // const trans = nativeIndexedDB.transaction([DEXIE_DOCS_TABLE_NAME], 'readonly');\n\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            if (\n                queryPlanFields.length === 1 &&\n                queryPlanFields[0] === instance.primaryPath\n            ) {\n                index = store;\n            } else {\n                let indexName: string;\n                if (queryPlanFields.length === 1) {\n                    indexName = dexieReplaceIfStartsWithPipe(queryPlanFields[0]);\n                } else {\n                    indexName = '[' +\n                        queryPlanFields\n                            .map(field => dexieReplaceIfStartsWithPipe(field))\n                            .join('+')\n                        + ']';\n                }\n                index = store.index(indexName);\n            }\n            const cursorReq = index.openCursor(keyRange);\n            await new Promise<void>(res => {\n                cursorReq.onsuccess = function (e: any) {\n                    const cursor = e.target.result;\n                    if (cursor) {\n                        // We have a record in cursor.value\n                        const docData = fromDexieToStorage(cursor.value);\n                        if (\n                            !docData._deleted &&\n                            (!queryMatcher || queryMatcher(docData))\n                        ) {\n                            rows.push(docData);\n                        }\n\n                        /**\n                         * If we do not have to manually sort\n                         * and have enough documents,\n                         * we can abort iterating over the cursor\n                         * because we already have every relevant document.\n                         */\n                        if (\n                            queryPlan.sortFieldsSameAsIndexFields &&\n                            rows.length === skipPlusLimit\n                        ) {\n                            res();\n                        } else {\n                            cursor.continue();\n                        }\n                    } else {\n                        // Iteration complete\n                        res();\n                    }\n                };\n            });\n\n\n        }\n    );\n\n\n    if (!queryPlan.sortFieldsSameAsIndexFields) {\n        const sortComparator = RxStorageDexieStatics.getSortComparator(instance.schema, preparedQuery);\n        rows = rows.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    rows = rows.slice(skip, skipPlusLimit);\n\n    /**\n     * Comment this in for debugging to check all fields in the database.\n     */\n    // const docsInDb = await state.dexieTable.filter(queryMatcher).toArray();\n    // let documents = docsInDb\n    //     .map(docData => stripDexieKey(docData))\n    //     .sort(sortComparator);\n    // if (preparedQuery.skip) {\n    //     documents = documents.slice(preparedQuery.skip);\n    // }\n    // if (preparedQuery.limit && documents.length > preparedQuery.limit) {\n    //     documents = documents.slice(0, preparedQuery.limit);\n    // }\n\n\n\n    return {\n        documents: rows\n    };\n}\n\n\nexport async function dexieCount<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: DexiePreparedQuery<RxDocType>\n): Promise<number> {\n    const state = await instance.internals;\n    const queryPlan = preparedQuery.queryPlan;\n    const queryPlanFields: string[] = queryPlan.index;\n\n    const keyRange = getKeyRangeByQueryPlan(\n        queryPlan,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n    let count: number = -1;\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            const tx = (dexieTx as any).idbtrans;\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            if (\n                queryPlanFields.length === 1 &&\n                queryPlanFields[0] === instance.primaryPath\n            ) {\n                index = store;\n            } else {\n                let indexName: string;\n                if (queryPlanFields.length === 1) {\n                    indexName = dexieReplaceIfStartsWithPipe(queryPlanFields[0]);\n                } else {\n                    indexName = '[' +\n                        queryPlanFields\n                            .map(field => dexieReplaceIfStartsWithPipe(field))\n                            .join('+')\n                        + ']';\n                }\n                index = store.index(indexName);\n            }\n\n            const request = index.count(keyRange);\n            count = await new Promise<number>((res, rej) => {\n                request.onsuccess = function () {\n                    const count = request.result;\n                    res(count);\n                }\n                request.onerror = (err: any) => rej(err);\n            });\n        }\n    );\n    return count;\n}\n"],"mappings":"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"}