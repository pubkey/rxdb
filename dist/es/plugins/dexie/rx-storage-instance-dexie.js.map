{"version":3,"file":"rx-storage-instance-dexie.js","names":["Subject","now","randomCouchString","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","sortDocumentsByLastWriteTime","lastOfArray","newRxError","closeDexieDb","fromDexieToStorage","fromStorageToDexie","getDexieDbWithTables","getDocsInDb","RX_STORAGE_NAME_DEXIE","dexieQuery","getPrimaryFieldOfPrimaryKey","getNewestOfDocumentStates","getUniqueDeterministicEventKey","addRxStorageMultiInstanceSupport","instanceId","RxStorageInstanceDexie","storage","databaseName","collectionName","schema","internals","options","settings","changes$","closed","primaryPath","primaryKey","bulkWrite","documentWrites","context","ensureNotClosed","state","ret","success","error","eventBulk","id","events","checkpoint","documentKeys","map","writeRow","document","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDb","d","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","changesIds","forEach","docIndex","startTime","documentInDb","insertedIsDeleted","_deleted","writeDoc","Object","assign","_attachments","push","eventId","documentId","change","doc","operation","previous","endTime","revInDb","_rev","err","isError","status","isDeleted","args","Promise","all","length","bulkPut","bulkDelete","lastState","values","lwt","_meta","event","next","findDocumentsById","ids","deleted","idx","bulkGet","query","preparedQuery","getChangedDocumentsSince","limit","sinceLwt","sinceId","table","where","above","toArray","changedDocuments","changedDocsNormal","changedDocsDeleted","changedDocs","concat","slice","lastDoc","documents","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","below","toRemove","removeIds","getAttachmentData","_documentId","_attachmentId","Error","complete","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","instance","resolve"],"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    randomCouchString,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint\n} from '../../types';\nimport {\n    DexiePreparedQuery,\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper';\nimport { dexieQuery } from './dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { getNewestOfDocumentStates, getUniqueDeterministicEventKey } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint> = {\n            id: randomCouchString(10),\n            events: [],\n            checkpoint: null as any,\n            context\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDb = docsInDb.map(d => d ? fromDexieToStorage(d) : d);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documentWrites.forEach((writeRow, docIndex) => {\n                    const id: string = writeRow.document[this.primaryPath] as any;\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    if (!documentInDb) {\n                        /**\n                         * It is possible to insert already deleted documents,\n                         * this can happen on replication.\n                         */\n                        const insertedIsDeleted = writeRow.document._deleted ? true : false;\n                        const writeDoc = Object.assign(\n                            {},\n                            writeRow.document,\n                            {\n                                _deleted: insertedIsDeleted,\n                                // TODO attachments are currently not working with dexie.js\n                                _attachments: {} as any\n                            }\n                        );\n                        changesIds.push(id);\n                        if (insertedIsDeleted) {\n                            bulkPutDeletedDocs.push(writeDoc);\n                        } else {\n                            bulkPutDocs.push(writeDoc);\n                            eventBulk.events.push({\n                                eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                documentId: id,\n                                change: {\n                                    doc: writeDoc,\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null\n                                },\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                        }\n\n                        ret.success[id] = writeDoc;\n                    } else {\n                        // update existing document\n                        const revInDb: string = documentInDb._rev;\n\n                        if (\n                            (\n                                !writeRow.previous\n                            ) ||\n                            (\n                                !!writeRow.previous &&\n                                revInDb !== writeRow.previous._rev\n                            )\n                        ) {\n                            // conflict error\n                            const err: RxStorageBulkWriteError<RxDocType> = {\n                                isError: true,\n                                status: 409,\n                                documentId: id,\n                                writeRow: writeRow,\n                                documentInDb\n                            };\n                            ret.error[id] = err;\n                        } else {\n                            const isDeleted = !!writeRow.document._deleted;\n                            const writeDoc: any = Object.assign(\n                                {},\n                                writeRow.document,\n                                {\n                                    _deleted: isDeleted,\n                                    // TODO attachments are currently not working with lokijs\n                                    _attachments: {}\n                                }\n                            );\n                            changesIds.push(id);\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Insert document that was deleted before.\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                bulkRemoveDeletedDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Update existing non-deleted document\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: writeRow.previous,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                                /**\n                                 * Set non-deleted document to deleted.\n                                 */\n                                bulkPutDeletedDocs.push(writeDoc);\n                                bulkRemoveDocs.push(id);\n\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous: writeRow.previous,\n                                    doc: null\n                                };\n                            } else if (\n                                writeRow.previous && writeRow.previous._deleted &&\n                                writeRow.document._deleted\n                            ) {\n                                // deleted doc was overwritten with other deleted doc\n                                bulkPutDeletedDocs.push(writeDoc);\n                            }\n                            if (!change) {\n                                if (\n                                    writeRow.previous && writeRow.previous._deleted &&\n                                    writeRow.document._deleted\n                                ) {\n                                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                                } else {\n                                    throw newRxError('SNH', { args: { writeRow } });\n                                }\n                            } else {\n                                eventBulk.events.push({\n                                    eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                    documentId: id,\n                                    change,\n                                    startTime,\n                                    // will be filled up before the event is pushed into the changestream\n                                    endTime: startTime\n                                });\n                            }\n                            ret.success[id] = writeDoc;\n                        }\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        if (eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            eventBulk.checkpoint = {\n                id: (lastState as any)[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n\n            const endTime = now();\n            eventBulk.events.forEach(event => event.endTime = endTime);\n            this.changes$.next(eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentDataById<RxDocType> = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DexiePreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.concat(changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        ensureNotClosed(this);\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    close(): Promise<void> {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}