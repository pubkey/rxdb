{"version":3,"file":"rx-storage-dexie.js","names":["Query","MingoQuery","getDexieSortComparator","RX_STORAGE_NAME_DEXIE","createDexieStorageInstance","newRxError","getQueryPlan","ensureRxStorageInstanceParamsAreCorrect","DEFAULT_CHECKPOINT_SCHEMA","RxStorageDexieStatics","prepareQuery","schema","mutateableQuery","sort","query","queryPlan","getSortComparator","preparedQuery","getQueryMatcher","_schema","mingoQuery","selector","fun","doc","_deleted","cursor","find","next","checkpointSchema","RxStorageDexie","settings","name","statics","createStorageInstance","params","getRxStorageDexie","storage"],"sources":["../../../../src/plugins/dexie/rx-storage-dexie.ts"],"sourcesContent":["import type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport type {\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageStatics,\n    DexiePreparedQuery,\n    FilledMangoQuery\n} from '../../types';\nimport {\n    Query as MingoQuery\n} from 'mingo';\nimport { getDexieSortComparator, RX_STORAGE_NAME_DEXIE } from './dexie-helper';\nimport type {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport {\n    createDexieStorageInstance,\n    RxStorageInstanceDexie\n} from './rx-storage-instance-dexie';\nimport { newRxError } from '../../rx-error';\nimport { getQueryPlan } from '../../query-planner';\nimport { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper';\nimport { DEFAULT_CHECKPOINT_SCHEMA } from '../../rx-schema-helper';\n\n\nexport const RxStorageDexieStatics: RxStorageStatics = {\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: FilledMangoQuery<RxDocType>\n    ): DexiePreparedQuery<RxDocType> {\n\n        if (!mutateableQuery.sort) {\n            throw newRxError('SNH', {\n                query: mutateableQuery\n            });\n        }\n\n        /**\n         * Store the query plan together with the\n         * prepared query to save performance.\n         */\n        const queryPlan = getQueryPlan(\n            schema,\n            mutateableQuery\n        );\n\n        return {\n            query: mutateableQuery,\n            queryPlan\n        };\n    },\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        return getDexieSortComparator(schema, preparedQuery.query);\n    },\n\n    getQueryMatcher<RxDocType>(\n        _schema: RxJsonSchema<RxDocType>,\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): QueryMatcher<RxDocumentData<RxDocType>> {\n        const query = preparedQuery.query;\n        const mingoQuery = new MingoQuery(query.selector);\n        const fun: QueryMatcher<RxDocumentData<RxDocType>> = (doc: RxDocumentData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cursor = mingoQuery.find([doc]);\n            const next = cursor.next();\n            if (next) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return fun;\n    },\n\n    checkpointSchema: DEFAULT_CHECKPOINT_SCHEMA\n\n}\n\n\nexport class RxStorageDexie implements RxStorage<DexieStorageInternals, DexieSettings> {\n    public name = RX_STORAGE_NAME_DEXIE;\n    public statics = RxStorageDexieStatics;\n\n    constructor(\n        public settings: DexieSettings\n    ) { }\n\n    public createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>\n    ): Promise<RxStorageInstanceDexie<RxDocType>> {\n        ensureRxStorageInstanceParamsAreCorrect(params);\n        return createDexieStorageInstance(this, params, this.settings);\n    }\n}\n\n\nexport function getRxStorageDexie(\n    settings: DexieSettings = {}\n): RxStorageDexie {\n    const storage = new RxStorageDexie(settings);\n    return storage;\n}\n"],"mappings":"AAaA,SACIA,KAAK,IAAIC,UADb,QAEO,OAFP;AAGA,SAASC,sBAAT,EAAiCC,qBAAjC,QAA8D,gBAA9D;AAKA,SACIC,0BADJ,QAGO,6BAHP;AAIA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,uCAAT,QAAwD,yBAAxD;AACA,SAASC,yBAAT,QAA0C,wBAA1C;AAGA,OAAO,IAAMC,qBAAuC,GAAG;EACnDC,YADmD,wBAE/CC,MAF+C,EAG/CC,eAH+C,EAIlB;IAE7B,IAAI,CAACA,eAAe,CAACC,IAArB,EAA2B;MACvB,MAAMR,UAAU,CAAC,KAAD,EAAQ;QACpBS,KAAK,EAAEF;MADa,CAAR,CAAhB;IAGH;IAED;AACR;AACA;AACA;;;IACQ,IAAMG,SAAS,GAAGT,YAAY,CAC1BK,MAD0B,EAE1BC,eAF0B,CAA9B;IAKA,OAAO;MACHE,KAAK,EAAEF,eADJ;MAEHG,SAAS,EAATA;IAFG,CAAP;EAIH,CAzBkD;EA2BnDC,iBA3BmD,6BA4B/CL,MA5B+C,EA6B/CM,aA7B+C,EA8BT;IACtC,OAAOf,sBAAsB,CAACS,MAAD,EAASM,aAAa,CAACH,KAAvB,CAA7B;EACH,CAhCkD;EAkCnDI,eAlCmD,2BAmC/CC,OAnC+C,EAoC/CF,aApC+C,EAqCR;IACvC,IAAMH,KAAK,GAAGG,aAAa,CAACH,KAA5B;IACA,IAAMM,UAAU,GAAG,IAAInB,UAAJ,CAAea,KAAK,CAACO,QAArB,CAAnB;;IACA,IAAMC,GAA4C,GAAG,SAA/CA,GAA+C,CAACC,GAAD,EAAoC;MACrF,IAAIA,GAAG,CAACC,QAAR,EAAkB;QACd,OAAO,KAAP;MACH;;MACD,IAAMC,MAAM,GAAGL,UAAU,CAACM,IAAX,CAAgB,CAACH,GAAD,CAAhB,CAAf;MACA,IAAMI,IAAI,GAAGF,MAAM,CAACE,IAAP,EAAb;;MACA,IAAIA,IAAJ,EAAU;QACN,OAAO,IAAP;MACH,CAFD,MAEO;QACH,OAAO,KAAP;MACH;IACJ,CAXD;;IAYA,OAAOL,GAAP;EACH,CArDkD;EAuDnDM,gBAAgB,EAAEpB;AAvDiC,CAAhD;AA4DP,WAAaqB,cAAb;EAII,wBACWC,QADX,EAEE;IAAA,KALKC,IAKL,GALY5B,qBAKZ;IAAA,KAJK6B,OAIL,GAJevB,qBAIf;IAAA,KADSqB,QACT,GADSA,QACT;EAAG;;EANT;;EAAA,OAQWG,qBARX,GAQI,+BACIC,MADJ,EAE8C;IAC1C3B,uCAAuC,CAAC2B,MAAD,CAAvC;IACA,OAAO9B,0BAA0B,CAAC,IAAD,EAAO8B,MAAP,EAAe,KAAKJ,QAApB,CAAjC;EACH,CAbL;;EAAA;AAAA;AAiBA,OAAO,SAASK,iBAAT,GAEW;EAAA,IADdL,QACc,uEADY,EACZ;EACd,IAAMM,OAAO,GAAG,IAAIP,cAAJ,CAAmBC,QAAnB,CAAhB;EACA,OAAOM,OAAP;AACH"}