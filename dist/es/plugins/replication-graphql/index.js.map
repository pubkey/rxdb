{"version":3,"file":"index.js","names":["ensureNotFalsy","getProperty","graphQLRequest","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","removeGraphQLWebSocketRef","getGraphQLWebSocket","Subject","RxGraphQLReplicationState","url","clientState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","setHeaders","headers","setCredentials","credentials","queryParams","http","replicateGraphQL","waitForLeadership","mutateableClientState","pullStream$","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","pullGraphQL","queryBuilder","result","graphqlReplicationState","errors","dataPath","Object","keys","data","responseModifier","docsData","documents","newCheckpoint","checkpoint","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","database","hashFunction","ws","mustUseSocket","streamQueryBuilder","startBefore","start","bind","wsClient","on","next","query","subscribe","streamResponse","firstField","error","complete","cancelBefore","cancel"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with a remote graphql endpoint.\n */\nimport {\n    ensureNotFalsy,\n    getProperty\n} from '../../plugins/utils';\n\nimport {\n    graphQLRequest,\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem,\n    RxGraphQLReplicationQueryBuilderResponseObject,\n    RxGraphQLReplicationClientState\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket';\nimport { Subject } from 'rxjs';\n\n\n\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: RxGraphQLReplicationClientState,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: { [k: string]: string; }): void {\n        this.clientState.headers = headers;\n    }\n\n    setCredentials(credentials: RequestCredentials | undefined) {\n        this.clientState.credentials = credentials;\n    }\n\n    graphQLRequest(\n        queryParams: RxGraphQLReplicationQueryBuilderResponseObject\n    ) {\n        return graphQLRequest(\n            ensureNotFalsy(this.url.http),\n            this.clientState,\n            queryParams\n        );\n    }\n}\n\nexport function replicateGraphQL<RxDocType, CheckpointType>(\n    {\n        collection,\n        url,\n        headers = {},\n        credentials,\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        credentials\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await graphqlReplicationState.graphQLRequest(pullGraphQL);\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                let data: any = getProperty(result, dataPath);\n                if (pull.responseModifier) {\n                    data = await pull.responseModifier(\n                        data,\n                        'handler',\n                        lastPulledCheckpoint\n                    );\n                }\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                };\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await graphqlReplicationState.graphQLRequest(pushObj);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = push.dataPath || Object.keys(result.data)[0];\n                let data: any = getProperty(result.data, dataPath);\n\n                if (push.responseModifier) {\n                    data = await push.responseModifier(\n                        data,\n                    );\n                }\n\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + collection.database.hashFunction(url.http ? url.http : url.ws as any),\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws));\n\n            wsClient.on('connected', () => {\n                pullStream$.next('RESYNC');\n            });\n\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\n\n            wsClient.subscribe(\n                query,\n                {\n                    next: async (streamResponse: any) => {\n                        const firstField = Object.keys(streamResponse.data)[0];\n                        let data = streamResponse.data[firstField];\n                        if (pull.responseModifier) {\n                            data = await pull.responseModifier(\n                                data,\n                                'stream'\n                            );\n                        }\n                        pullStream$.next(data);\n                    },\n                    error: (error: any) => {\n                        pullStream$.error(error);\n                    },\n                    complete: () => {\n                        pullStream$.complete();\n                    }\n                });\n        }\n        return startBefore();\n    };\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        pullStream$.complete();\n        if (mustUseSocket) {\n            removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n        }\n        return cancelBefore();\n    };\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\nexport * from './graphql-websocket';\n"],"mappings":"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"}