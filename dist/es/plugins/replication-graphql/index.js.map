{"version":3,"file":"index.js","names":["GraphQLClient","objectPath","ensureNotFalsy","fastUnsecureHash","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","removeGraphQLWebSocketRef","getGraphQLWebSocket","Subject","RxGraphQLReplicationState","url","clientState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","setHeaders","headers","client","http","syncGraphQL","waitForLeadership","mutateableClientState","pullStream$","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","queryBuilder","pullGraphQL","query","variables","result","errors","dataPath","Object","keys","data","get","docsData","documents","newCheckpoint","checkpoint","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","graphqlReplicationState","ws","mustUseSocket","streamQueryBuilder","startBefore","start","bind","wsClient","clientRequest","request","subscribe","next","firstField","error","onReconnected","cancelBefore","cancel","complete","RxDBReplicationGraphQLPlugin","name","init","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\n\nimport GraphQLClient from 'graphql-client';\nimport objectPath from 'object-path';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash\n} from '../../util';\n\nimport {\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    RxPlugin,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket';\nimport { Subject } from 'rxjs';\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: { headers: any; client: any },\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: { [k: string]: string }): void {\n        this.clientState.headers = headers;\n        this.clientState.client = GraphQLClient({\n            url: this.url.http,\n            headers\n        });\n    }\n}\n\nexport function syncGraphQL<RxDocType, CheckpointType>(\n    this: RxCollection,\n    {\n        url,\n        headers = {},\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    const collection = this;\n\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        client: GraphQLClient({\n            url: url.http,\n            headers\n        })\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await mutateableClientState.client.query(pullGraphQL.query, pullGraphQL.variables);\n                if (result.errors) {\n                    throw result.errors;\n                }\n\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                const data: any = objectPath.get(result, dataPath);\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                }\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        }\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await mutateableClientState.client.query(pushObj.query, pushObj.variables);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = Object.keys(result.data)[0];\n                const data: any = objectPath.get(result.data, dataPath);\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(url.http ? url.http : url.ws as any),\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws));\n            const clientRequest = wsClient.request(ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers));\n            clientRequest.subscribe({\n                next(data: any) {\n                    const firstField = Object.keys(data.data)[0];\n                    pullStream$.next(data.data[firstField]);\n                },\n                error(error: any) {\n                    pullStream$.error(error);\n                }\n            });\n            wsClient.onReconnected(() => {\n                pullStream$.next('RESYNC');\n            });\n        }\n        return startBefore();\n    }\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        pullStream$.complete();\n        if (mustUseSocket) {\n            removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n        }\n        return cancelBefore();\n    }\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\nexport * from './graphql-websocket';\n\nexport const RxDBReplicationGraphQLPlugin: RxPlugin = {\n    name: 'replication-graphql',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncGraphQL = syncGraphQL;\n        }\n    }\n};\n"],"mappings":"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"}