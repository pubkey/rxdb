{"version":3,"file":"data-migrator.js","names":["Subject","deepEqual","clone","toPromise","flatClone","getHeightOfRevision","createRevision","PROMISE_RESOLVE_VOID","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","getDefaultRxDocumentMeta","now","createRxSchema","newRxError","runAsyncPluginHooks","runPluginHooks","getPreviousVersions","getMigrationStateByDatabase","map","getWrappedStorageInstance","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","normalizeMangoQuery","_migrateDocuments","oldCollection","documentsData","Promise","all","docData","migrateDocumentData","migratedDocuments","actions","action","bulkDeleteInputData","writeDeleted","_deleted","_attachments","previous","document","length","storageInstance","bulkWrite","bulkWriteToStorageInput","forEach","idx","migratedDocData","res","type","migrated","doc","newestCollection","push","isDocumentDataWithoutRevisionEqual","_rev","newHeight","newRevision","database","hashFunction","attachmentsBefore","saveData","_meta","lwt","originalStorageInstance","_getOldCollections","dataMigrator","getOldCollectionDocs","oldColDocs","colDoc","createOldCollection","data","schema","version","filter","schemaObj","storageInstanceCreationParams","databaseInstanceToken","token","databaseName","name","collectionName","options","instanceCreationOptions","multiInstance","storage","createStorageInstance","ret","DataMigrator","migrationStrategies","_migrated","nonMigratedOldCollections","allOldCollections","currentSchema","migrate","batchSize","state","done","total","handled","success","deleted","percent","stateSubject","allSubject","allList","getValue","slice","asObservable","next","then","getAllDocuments","getAllQueryPrepared","statics","prepareQuery","query","queryResult","allDocs","documents","countAll","oldCol","jsonSchema","totalCount","reduce","cur","prev","collection","currentCol","shift","currentPromise","migrationState$","migrateOldCollection","sub","subscribe","subState","Math","round","error","e","unsubscribe","c","close","complete","pipe","withCollection","migratePromise","_migratePromise","mustMigrate","must","rej","state$","err","collectionDocKeys","internalStore","findDocumentsById","key","docsObj","Object","values","runStrategyIfNotNull","docOrNull","retPromise","getBatchOfOldCollection","preparedQuery","selector","sort","primaryPath","limit","skip","result","mutateableDocData","nextVersion","resolve","doc1","doc2","doc1NoRev","assign","undefined","doc2NoRev","deleteOldCollection","remove","removeCollectionDoc","_migrate","observer","allBatchesDone","handleOneBatch","batch"],"sources":["../../../../src/plugins/migration/data-migrator.ts"],"sourcesContent":["/**\n * The DataMigrator handles the documents from collections with older schemas\n * and transforms/saves them into the newest collection\n */\n/**\n * TODO this should be completely rewritten because:\n * - This could have been done in much less code which would be easier to uderstand\n *\n */\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport deepEqual from 'fast-deep-equal';\nimport {\n    clone,\n    toPromise,\n    flatClone,\n    getHeightOfRevision,\n    createRevision,\n    PROMISE_RESOLVE_VOID,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    getDefaultRxDocumentMeta,\n    now\n} from '../../util';\nimport {\n    createRxSchema\n} from '../../rx-schema';\nimport {\n    newRxError\n} from '../../rx-error';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from '../../hooks';\nimport type {\n    RxCollection,\n    RxDatabase,\n    MigrationState,\n    NumberFunctionMap,\n    OldRxCollection,\n    WithAttachmentsData,\n    RxJsonSchema,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    InternalStoreCollectionDocType,\n    RxStorageInstance\n} from '../../types';\nimport {\n    RxSchema,\n    getPreviousVersions\n} from '../../rx-schema';\nimport {\n    getMigrationStateByDatabase,\n    MigrationStateWithCollection\n} from './migration-state';\nimport { map } from 'rxjs/operators';\nimport {\n    getWrappedStorageInstance\n} from '../../rx-storage-helper';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION\n} from '../../rx-database-internal-store';\nimport { normalizeMangoQuery } from '../../rx-query-helper';\n\nexport class DataMigrator {\n\n    constructor(\n        public newestCollection: RxCollection,\n        public migrationStrategies: NumberFunctionMap\n    ) {\n        this.currentSchema = newestCollection.schema;\n        this.database = newestCollection.database;\n        this.name = newestCollection.name;\n    }\n\n    public currentSchema: RxSchema;\n    public database: RxDatabase;\n    public name: string;\n\n\n    private _migrated: boolean = false;\n    private _migratePromise?: Promise<any>;\n    private nonMigratedOldCollections: OldRxCollection[] = [];\n    private allOldCollections: OldRxCollection[] = [];\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        if (this._migrated) {\n            throw newRxError('DM1');\n        }\n        this._migrated = true;\n\n        const state = {\n            done: false, // true if finished\n            total: 0, // will be the doc-count\n            handled: 0, // amount of handled docs\n            success: 0, // handled docs which succeeded\n            deleted: 0, // handled docs which got deleted\n            percent: 0 // percentage\n        };\n\n        const stateSubject: Subject<MigrationStateWithCollection> = new Subject();\n\n        /**\n         * Add to output of RxDatabase.migrationStates\n         */\n        const allSubject = getMigrationStateByDatabase(this.newestCollection.database);\n        const allList = allSubject.getValue().slice(0);\n        allList.push(stateSubject.asObservable());\n        allSubject.next(allList);\n\n        /**\n         * TODO this is a side-effect which might throw\n         * We did this because it is not possible to create new Observer(async(...))\n         * @link https://github.com/ReactiveX/rxjs/issues/4074\n         * In the future the whole migration plugin should be rewritten without rxjs\n         * so we do not have this problem.\n         */\n        (() => {\n            return _getOldCollections(this)\n                .then(ret => {\n                    this.nonMigratedOldCollections = ret;\n                    this.allOldCollections = this.nonMigratedOldCollections.slice(0);\n\n                    const getAllDocuments = async (\n                        storageInstance: RxStorageInstance<any, any, any>,\n                        schema: RxJsonSchema<any>\n                    ): Promise<RxDocumentData<any>[]> => {\n                        const storage = this.database.storage;\n                        const getAllQueryPrepared = storage.statics.prepareQuery(\n                            storageInstance.schema,\n                            normalizeMangoQuery(\n                                schema,\n                                {}\n                            )\n                        );\n                        const queryResult = await storageInstance.query(getAllQueryPrepared);\n                        const allDocs = queryResult.documents;\n                        return allDocs;\n                    }\n\n                    const countAll: Promise<number[]> = Promise.all(\n                        this.nonMigratedOldCollections\n                            .map(oldCol => getAllDocuments(\n                                oldCol.storageInstance,\n                                oldCol.schema.jsonSchema\n                            ).then(allDocs => allDocs.length))\n                    );\n                    return countAll;\n                })\n                .then(countAll => {\n                    const totalCount: number = countAll\n                        .reduce((cur, prev) => prev = cur + prev, 0);\n                    state.total = totalCount;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    let currentCol = this.nonMigratedOldCollections.shift();\n                    let currentPromise = PROMISE_RESOLVE_VOID;\n                    while (currentCol) {\n                        const migrationState$ = migrateOldCollection(\n                            currentCol,\n                            batchSize\n                        );\n                        currentPromise = currentPromise.then(() => {\n                            return new Promise(res => {\n                                const sub = migrationState$.subscribe({\n                                    next: (subState: any) => {\n                                        state.handled++;\n                                        (state as any)[subState.type] = (state as any)[subState.type] + 1;\n                                        state.percent = Math.round(state.handled / state.total * 100);\n                                        stateSubject.next({\n                                            collection: this.newestCollection,\n                                            state: flatClone(state)\n                                        });\n                                    },\n                                    error: (e: any) => {\n                                        sub.unsubscribe();\n                                        // TODO we should not have to catch here.\n                                        this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                        stateSubject.error(e);\n                                    },\n                                    complete: () => {\n                                        if (currentCol) {\n                                            // TODO we should not have to catch here.\n                                            currentCol.storageInstance.close().catch(() => { });\n                                        }\n                                        sub.unsubscribe();\n                                        res();\n                                    }\n                                });\n                            });\n                        });\n                        currentCol = this.nonMigratedOldCollections.shift();\n                    }\n                    return currentPromise;\n                })\n                .then(() => {\n                    state.done = true;\n                    state.percent = 100;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    stateSubject.complete();\n                });\n        })();\n\n\n        return stateSubject.pipe(\n            map(withCollection => withCollection.state)\n        );\n    }\n\n    migratePromise(batchSize: number): Promise<any> {\n        if (!this._migratePromise) {\n            this._migratePromise = mustMigrate(this)\n                .then(must => {\n                    if (!must) {\n                        return PROMISE_RESOLVE_FALSE;\n                    } else {\n                        return new Promise((res, rej) => {\n                            const state$ = this.migrate(batchSize);\n                            (state$ as any).subscribe(null, rej, res);\n                            this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                        })\n                            .catch(err => {\n                                this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                throw err;\n                            });\n                    }\n                });\n        }\n        return this._migratePromise;\n    }\n}\n\nexport async function createOldCollection(\n    version: number,\n    schemaObj: RxJsonSchema<any>,\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection> {\n    const database = dataMigrator.newestCollection.database;\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: dataMigrator.newestCollection.name,\n        schema: schemaObj,\n        options: dataMigrator.newestCollection.instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    const storageInstance = await database.storage.createStorageInstance(\n        storageInstanceCreationParams\n    );\n    const ret: OldRxCollection = {\n        version,\n        dataMigrator,\n        newestCollection: dataMigrator.newestCollection,\n        database,\n        schema: createRxSchema(schemaObj, false),\n        storageInstance\n    };\n\n    ret.storageInstance = getWrappedStorageInstance(\n        ret.database,\n        storageInstance,\n        schemaObj\n    );\n\n    return ret;\n}\n\n\nexport function getOldCollectionDocs(\n    dataMigrator: DataMigrator\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n\n    const collectionDocKeys = getPreviousVersions(dataMigrator.currentSchema.jsonSchema)\n        .map(version => dataMigrator.name + '-' + version);\n\n    return dataMigrator.database.internalStore.findDocumentsById(\n        collectionDocKeys.map(key => getPrimaryKeyOfInternalDocument(\n            key,\n            INTERNAL_CONTEXT_COLLECTION\n        )),\n        false\n    ).then(docsObj => Object.values(docsObj));\n}\n\n/**\n * get an array with OldCollection-instances from all existing old storage-instances\n */\nexport async function _getOldCollections(\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection[]> {\n    const oldColDocs = await getOldCollectionDocs(dataMigrator);\n\n    return Promise.all(\n        oldColDocs\n            .map(colDoc => {\n                if (!colDoc) {\n                    return null as any;\n                }\n                return createOldCollection(\n                    colDoc.data.schema.version,\n                    colDoc.data.schema,\n                    dataMigrator\n                );\n            })\n            .filter(colDoc => colDoc !== null)\n    );\n}\n\n\n/**\n * returns true if a migration is needed\n */\nexport function mustMigrate(dataMigrator: DataMigrator): Promise<boolean> {\n    if (dataMigrator.currentSchema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    return getOldCollectionDocs(dataMigrator)\n        .then(oldColDocs => {\n            if (oldColDocs.length === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n}\n\nexport function runStrategyIfNotNull(\n    oldCollection: OldRxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = oldCollection.dataMigrator.migrationStrategies[version](docOrNull, oldCollection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\nexport function getBatchOfOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize: number\n): Promise<any[]> {\n    const storage = oldCollection.database.storage;\n    const storageInstance = oldCollection.storageInstance;\n    const preparedQuery = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [oldCollection.schema.primaryPath]: 'asc' } as any],\n            limit: batchSize,\n            skip: 0\n        }\n    );\n\n    return storageInstance\n        .query(preparedQuery)\n        .then(result => result.documents\n            .map(doc => {\n                doc = flatClone(doc);\n                return doc;\n            })\n        );\n}\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    oldCollection: OldRxCollection,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = oldCollection.version + 1;\n\n    // run the document through migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= oldCollection.newestCollection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            oldCollection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n\n        /**\n         * Add _meta field if missing.\n         * We need this to migration documents from pre-12.0.0 state\n         * to version 12.0.0. Therefore we need to add the _meta field if it is missing.\n         * TODO remove this in the major version 13.0.0 \n         */\n        if (!doc._meta) {\n            doc._meta = getDefaultRxDocumentMeta();\n        }\n        return doc;\n    });\n}\n\n\nexport function isDocumentDataWithoutRevisionEqual<T>(doc1: T, doc2: T): boolean {\n    const doc1NoRev = Object.assign({}, doc1, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    const doc2NoRev = Object.assign({}, doc2, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    return deepEqual(doc1NoRev, doc2NoRev);\n}\n\n/**\n * transform documents data and save them to the new collection\n * @return status-action with status and migrated document\n */\nexport async function _migrateDocuments(\n    oldCollection: OldRxCollection,\n    documentsData: any[]\n): Promise<{ type: string, doc: any }[]> {\n\n    // run hooks that might mutate documentsData\n    await Promise.all(\n        documentsData.map(docData => runAsyncPluginHooks(\n            'preMigrateDocument',\n            {\n                docData,\n                oldCollection\n            }\n        ))\n    );\n    // run the migration strategies on each document\n    const migratedDocuments: (any | null)[] = await Promise.all(\n        documentsData.map(docData => migrateDocumentData(oldCollection, docData))\n    );\n\n\n    const bulkWriteToStorageInput: RxDocumentData<any>[] = [];\n    const actions: any[] = [];\n\n    documentsData.forEach((docData, idx) => {\n        const migratedDocData: any | null = migratedDocuments[idx];\n        const action = {\n            res: null as any,\n            type: '',\n            migrated: migratedDocData,\n            doc: docData,\n            oldCollection,\n            newestCollection: oldCollection.newestCollection\n        };\n        actions.push(action);\n\n        /**\n         * Determiniticly handle the revision\n         * so migrating the same data on multiple instances\n         * will result in the same output.\n         */\n        if (isDocumentDataWithoutRevisionEqual(docData, migratedDocData)) {\n            /**\n             * Data not changed by migration strategies, keep the same revision.\n             * This ensures that other replicated instances that did not migrate already\n             * will still have the same document.\n             */\n            migratedDocData._rev = docData._rev;\n        } else if (migratedDocData !== null) {\n            /**\n             * data changed, increase revision height\n             * so replicating instances use our new document data\n             */\n            const newHeight = getHeightOfRevision(docData._rev) + 1;\n            const newRevision = newHeight + '-' + createRevision(\n                oldCollection.newestCollection.database.hashFunction,\n                migratedDocData\n            );\n            migratedDocData._rev = newRevision;\n        }\n\n\n        if (migratedDocData) {\n            /**\n             * save to newest collection\n             * notice that this data also contains the attachments data\n             */\n            const attachmentsBefore = migratedDocData._attachments;\n            const saveData: WithAttachmentsData<any> = migratedDocData;\n            saveData._attachments = attachmentsBefore;\n            saveData._meta.lwt = now();\n            bulkWriteToStorageInput.push(saveData);\n            action.res = saveData;\n            action.type = 'success';\n        } else {\n            /**\n             * Migration strategy returned null\n             * which means we should not migrate this document,\n             * just drop it.\n             */\n            action.type = 'deleted';\n        }\n    });\n\n    /**\n     * Write the documents to the newest collection.\n     * We need to add as revision\n     * because we provide the _rev by our own\n     * to have deterministic revisions in case the migration\n     * runs on multiple nodes which must lead to the equal storage state.\n     */\n    if (bulkWriteToStorageInput.length) {\n        /**\n         * To ensure that we really keep that revision, we\n         * hackly insert this document via the RxStorageInstance.originalStorageInstance\n         * so that getWrappedStorageInstance() does not overwrite its own revision.\n         */\n        const originalStorageInstance: RxStorageInstance<any, any, any> = (oldCollection.newestCollection.storageInstance as any).originalStorageInstance;\n        await originalStorageInstance.bulkWrite(\n            bulkWriteToStorageInput.map(document => ({ document })),\n            'data-migrator-import'\n        );\n    }\n\n    // run hooks\n    await Promise.all(\n        actions.map(action => runAsyncPluginHooks(\n            'postMigrateDocument',\n            action\n        ))\n    );\n\n    // remove the documents from the old collection storage instance\n    const bulkDeleteInputData = documentsData.map(docData => {\n        const writeDeleted = flatClone(docData);\n        writeDeleted._deleted = true;\n        writeDeleted._attachments = {};\n        return {\n            previous: docData,\n            document: writeDeleted\n        };\n    });\n\n    if (bulkDeleteInputData.length) {\n        await oldCollection.storageInstance.bulkWrite(\n            bulkDeleteInputData,\n            'data-migrator-delete'\n        );\n    }\n\n    return actions;\n}\n\n\n/**\n * deletes this.storageInstance and removes it from the database.collectionsCollection\n */\nexport function deleteOldCollection(\n    oldCollection: OldRxCollection\n): Promise<void> {\n    return oldCollection.storageInstance.remove()\n        .then(\n            () => oldCollection.database.removeCollectionDoc(\n                oldCollection.dataMigrator.name,\n                oldCollection.schema\n            )\n        );\n}\n\n/**\n * runs the migration on all documents and deletes the storage instance afterwards\n */\nexport function migrateOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize = 10\n): Observable<any> {\n    if (oldCollection._migrate) {\n        // already running\n        throw newRxError('DM3');\n    }\n    oldCollection._migrate = true;\n\n    const observer = new Subject();\n\n    /**\n     * TODO this is a side-effect which might throw\n     * @see DataMigrator.migrate()\n     */\n    (() => {\n        let error: any;\n        const allBatchesDone = () => {\n            // remove this oldCollection\n            return deleteOldCollection(oldCollection)\n                .then(() => observer.complete());\n        };\n        const handleOneBatch = () => {\n            return getBatchOfOldCollection(oldCollection, batchSize)\n                .then(batch => {\n                    if (batch.length === 0) {\n                        allBatchesDone();\n                        return false;\n                    } else {\n                        return _migrateDocuments(oldCollection, batch)\n                            .then((actions: any[]) => actions.forEach(action => observer.next(action)))\n                            .catch(e => error = e)\n                            .then(() => true);\n                    }\n                })\n                .then(next => {\n                    if (!next) {\n                        return;\n                    }\n                    if (error) {\n                        observer.error(error);\n                    } else {\n                        handleOneBatch();\n                    }\n                });\n        };\n        handleOneBatch();\n    })();\n\n    return observer.asObservable();\n}\n\nexport function migratePromise(\n    oldCollection: OldRxCollection,\n    batchSize?: number\n): Promise<any> {\n    if (!oldCollection._migratePromise) {\n        oldCollection._migratePromise = new Promise((res, rej) => {\n            const state$ = migrateOldCollection(oldCollection, batchSize);\n            (state$ as any).subscribe(null, rej, res);\n        });\n    }\n    return oldCollection._migratePromise;\n}\n"],"mappings":"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"}