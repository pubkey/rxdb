{"version":3,"file":"rx-storage-instance-loki.js","names":["Subject","flatClone","now","ensureNotFalsy","isMaybeReadonlyArray","getFromMapOrThrow","getSortDocumentsByLastWriteTimeComparator","RX_META_LWT_MINIMUM","lastOfArray","newRxError","closeLokiCollections","getLokiDatabase","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLokiSortComparator","getLokiLeaderElector","requestRemoteInstance","mustUseLocalState","handleRemoteRequest","RX_STORAGE_NAME_LOKIJS","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","addRxStorageMultiInstanceSupport","removeBroadcastChannelReference","createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseInstanceToken","databaseName","collectionName","schema","internals","options","leaderElector","broadcastChannel","undefined","multiInstance","closeBefore","close","bind","broadcastChannelRefObject","removeBefore","remove","awaitLeadership","then","closed","localState","createLokiLocalState","databaseState","indices","indexes","forEach","idx","push","primaryKey","lokiCollectionName","version","collectionOptions","Object","assign","unique","collection","database","addCollection","collections","ret","instanceId","changes$","primaryPath","add","copiedSelf","bulkWrite","changeStream","cleanup","query","findDocumentsById","conflictResultionTasks","getAttachmentData","getChangedDocumentsSince","resolveConflictResultionTask","addEventListener","msg","documentWrites","context","length","args","success","error","docsInDb","Map","docsInDbWithLokiKey","writeRow","id","document","documentInDb","by","set","categorized","bulkInsertDocs","docId","insert","bulkUpdateDocs","documentInDbWithLokiKey","writeDoc","$loki","update","errors","err","documentId","saveQueue","addWrite","eventBulk","events","lastState","values","checkpoint","lwt","_meta","next","ids","deleted","_deleted","preparedQuery","chain","find","selector","sort","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","_documentId","_attachmentId","Error","sinceLwt","$gte","changedDocs","first","shift","slice","lastDoc","docData","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","complete","dbState","run","removeCollection","name","_taskSolution"],"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM,\n    lastOfArray\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows, getNewestOfDocumentStates } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                getChangedDocumentsSince: this.getChangedDocumentsSince.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            }\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.errors.forEach(err => {\n            ret.error[err.documentId] = err;\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentDataById<RxDocType> = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint | null\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs.map(docData => stripLokiKey(docData)),\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath],\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance)\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}