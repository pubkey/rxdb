{"version":3,"file":"incremental-write.js","names":["_rxError","require","_utils","IncrementalWriteQueue","exports","storageInstance","primaryPath","preWrite","postWrite","queueByDocId","Map","isRunning","_proto","prototype","addWrite","lastKnownDocumentState","modifier","docId","ar","getFromMapOrCreate","ret","Promise","resolve","reject","item","ensureNotFalsy","push","triggerRun","size","writeRows","itemsById","all","Array","from","entries","map","_docId","items","oldData","findNewestOfDocumentStates","i","newData","clone","err","forEach","previous","document","writeResult","length","bulkWrite","error","success","Object","result","getFromMapOrThrow","isConflict","isBulkWriteConflictError","reverse","documentInDb","unshift","rxError","rxStorageWriteErrorToRxError","modifierFromPublicToInternal","publicModifier","docData","withoutMeta","stripMetaDataFromDocument","_deleted","modified","reattachedMeta","assign","_meta","_attachments","_rev","docs","newest","newestRevisionHeight","parseRevision","height","doc"],"sources":["../../src/incremental-write.ts"],"sourcesContent":["import {\n    isBulkWriteConflictError,\n    rxStorageWriteErrorToRxError\n} from './rx-error';\nimport type {\n    ModifyFunction,\n    BulkWriteRow,\n    MaybePromise,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxError,\n    RxStorageBulkWriteResponse,\n    RxStorageInstance,\n    StringKeys,\n    WithDeleted\n} from './types';\nimport {\n    clone,\n    ensureNotFalsy,\n    getFromMapOrCreate,\n    getFromMapOrThrow,\n    parseRevision,\n    stripMetaDataFromDocument\n} from './plugins/utils';\n\n\n\nexport type IncrementalWriteModifier<RxDocType> = (\n    doc: RxDocumentData<RxDocType>\n) => MaybePromise<RxDocumentData<RxDocType>> | MaybePromise<RxDocumentWriteData<RxDocType>>;\n\n\ntype IncrementalWriteQueueItem<RxDocType> = {\n    lastKnownDocumentState: RxDocumentData<RxDocType>;\n    modifier: IncrementalWriteModifier<RxDocType>;\n    resolve: (d: RxDocumentData<RxDocType>) => void;\n    reject: (error: RxError) => void;\n};\n\n/**\n * The incremental write queue\n * batches up all incremental writes to a collection\n * so that performance can be improved by:\n * - Running only one write even when there are multiple modifications to the same document.\n * - Run all writes ins a single bulkWrite() call even when there are writes to many documents.\n */\nexport class IncrementalWriteQueue<RxDocType> {\n    public queueByDocId = new Map<string, IncrementalWriteQueueItem<RxDocType>[]>();\n    public isRunning: boolean = false;\n\n    constructor(\n        public readonly storageInstance: RxStorageInstance<RxDocType, any, any>,\n        public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>,\n        // can be used to run hooks etc.\n        public readonly preWrite: (newData: RxDocumentData<RxDocType>, oldData: RxDocumentData<RxDocType>) => MaybePromise<void>,\n        public readonly postWrite: (docData: RxDocumentData<RxDocType>) => void\n\n    ) { }\n\n    addWrite(\n        lastKnownDocumentState: RxDocumentData<RxDocType>,\n        modifier: IncrementalWriteModifier<RxDocType>\n    ): Promise<RxDocumentData<RxDocType>> {\n        const docId: string = lastKnownDocumentState[this.primaryPath] as any;\n        const ar = getFromMapOrCreate(this.queueByDocId, docId, () => []);\n        const ret = new Promise<RxDocumentData<RxDocType>>((resolve, reject) => {\n            const item: IncrementalWriteQueueItem<RxDocType> = {\n                lastKnownDocumentState,\n                modifier,\n                resolve,\n                reject\n            };\n            ensureNotFalsy(ar).push(item);\n            this.triggerRun();\n        });\n        return ret;\n    }\n\n    async triggerRun(): Promise<void> {\n        if (\n            this.isRunning === true ||\n            this.queueByDocId.size === 0\n        ) {\n            // already running\n            return;\n        }\n        this.isRunning = true;\n        const writeRows: BulkWriteRow<RxDocType>[] = [];\n\n        /**\n         * 'take over' so that while the async functions runs,\n         * new incremental updates could be added from the outside.\n         */\n        const itemsById = this.queueByDocId;\n        this.queueByDocId = new Map();\n        await Promise.all(\n            Array.from(itemsById.entries())\n                .map(async ([_docId, items]) => {\n                    const oldData = findNewestOfDocumentStates(\n                        items.map(i => i.lastKnownDocumentState)\n                    );\n                    let newData = oldData;\n                    for (const item of items) {\n                        try {\n                            newData = await item.modifier(\n                                /**\n                                 * We have to clone() each time because the modifier\n                                 * might throw while it already changed some properties\n                                 * of the document.\n                                 */\n                                clone(newData)\n                            ) as any;\n                        } catch (err: any) {\n                            item.reject(err);\n                            item.reject = () => { };\n                            item.resolve = () => { };\n                        }\n                    }\n\n                    try {\n                        await this.preWrite(newData, oldData);\n                    } catch (err: any) {\n                        /**\n                         * If the before-hooks fail,\n                         * we reject all of the writes because it is\n                         * not possible to determine which one is to blame.\n                         */\n                        items.forEach(item => item.reject(err));\n                        return;\n                    }\n                    writeRows.push({\n                        previous: oldData,\n                        document: newData\n                    });\n                })\n        );\n        const writeResult: RxStorageBulkWriteResponse<RxDocType> = writeRows.length > 0 ?\n            await this.storageInstance.bulkWrite(writeRows, 'incremental-write') :\n            { error: {}, success: {} };\n\n        // process success\n        await Promise.all(\n            Array\n                .from(Object.entries(writeResult.success))\n                .map(([docId, result]) => {\n                    this.postWrite(result);\n                    const items = getFromMapOrThrow(itemsById, docId);\n                    items.forEach(item => item.resolve(result));\n                })\n        );\n\n        // process errors\n        Array\n            .from(Object.entries(writeResult.error))\n            .forEach(([docId, error]) => {\n                const items = getFromMapOrThrow(itemsById, docId);\n                const isConflict = isBulkWriteConflictError<RxDocType>(error);\n                if (isConflict) {\n                    // had conflict -> retry afterwards\n                    const ar = getFromMapOrCreate(this.queueByDocId, docId, () => []);\n                    /**\n                     * Add the items back to this.queueByDocId\n                     * by maintaining the original order.\n                     */\n                    items\n                        .reverse()\n                        .forEach(item => {\n                            item.lastKnownDocumentState = ensureNotFalsy(isConflict.documentInDb);\n                            ensureNotFalsy(ar).unshift(item);\n                        });\n                } else {\n                    // other error -> must be thrown\n                    const rxError = rxStorageWriteErrorToRxError(error);\n                    items.forEach(item => item.reject(rxError));\n                }\n            });\n        this.isRunning = false;\n\n        /**\n         * Always trigger another run\n         * because in between there might be new items\n         * been added to the queue.\n         */\n        return this.triggerRun();\n    }\n}\n\n\nexport function modifierFromPublicToInternal<RxDocType>(\n    publicModifier: ModifyFunction<RxDocType>\n): IncrementalWriteModifier<RxDocType> {\n    const ret = async (docData: RxDocumentData<RxDocType>) => {\n        const withoutMeta: WithDeleted<RxDocType> = stripMetaDataFromDocument(docData) as any;\n        withoutMeta._deleted = docData._deleted;\n        const modified = await publicModifier(withoutMeta);\n        const reattachedMeta: RxDocumentData<RxDocType> = Object.assign({}, modified, {\n            _meta: docData._meta,\n            _attachments: docData._attachments,\n            _rev: docData._rev,\n            _deleted: typeof (modified as WithDeleted<RxDocType>)._deleted !== 'undefined' ?\n                (modified as WithDeleted<RxDocType>)._deleted :\n                docData._deleted\n        });\n        if (typeof reattachedMeta._deleted === 'undefined') {\n            reattachedMeta._deleted = false;\n        }\n        return reattachedMeta;\n    };\n    return ret;\n}\n\n\nexport function findNewestOfDocumentStates<RxDocType>(\n    docs: RxDocumentData<RxDocType>[]\n): RxDocumentData<RxDocType> {\n\n    let newest = docs[0];\n    let newestRevisionHeight = parseRevision(newest._rev).height;\n    docs.forEach(doc => {\n        const height = parseRevision(doc._rev).height;\n        if (height > newestRevisionHeight) {\n            newest = doc;\n            newestRevisionHeight = height;\n        }\n    });\n    return newest;\n}\n"],"mappings":"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"}