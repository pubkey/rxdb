{"version":3,"file":"rx-storage-multiinstance.js","names":["BROADCAST_CHANNEL_BY_TOKEN","Map","getBroadcastChannelReference","databaseInstanceToken","databaseName","refObject","state","get","bc","BroadcastChannel","refs","Set","set","add","removeBroadcastChannelReference","size","close","addRxStorageMultiInstanceSupport","storageName","instanceCreationParams","instance","providedBroadcastChannel","multiInstance","broadcastChannel","changesFromOtherInstances$","Subject","eventListener","msg","collectionName","version","schema","next","eventBulk","addEventListener","oldChangestream$","changeStream","closed","sub","subscribe","postMessage","asObservable","pipe","mergeWith","oldClose","bind","unsubscribe","removeEventListener","oldRemove","remove"],"sources":["../../src/rx-storage-multiinstance.ts"],"sourcesContent":["/**\n * When a persistend RxStorage is used in more the one JavaScript process,\n * the even stream of the changestream() function must be broadcasted to the other\n * RxStorageInstances of the same databaseName+collectionName.\n * \n * In the past this was done by RxDB but it makes more sense to do this\n * at the RxStorage level so that the broadcasting etc can all happen inside of a WebWorker\n * and not on the main thread.\n * Also it makes it less complex to stack up different RxStorages onto each other\n * like what we do with the in-memory plugin.\n * \n * This is intened to be used inside of createStorageInstance() of a storage.\n * Do not use this if the storage anyway broadcasts the events like when using MongoDB\n * or in the future W3C might introduce a way to listen to IndexedDB changes.\n */\n\nimport { Observable, Subject } from 'rxjs';\nimport { mergeWith } from 'rxjs/operators';\nimport type {\n    EventBulk,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\n\nimport {\n    BroadcastChannel\n} from 'broadcast-channel';\n\n/**\n * The broadcast-channel is reused by the databaseInstanceToken.\n * This is required so that it is easy to simulate multi-tab usage\n * in the test where different instances of the same RxDatabase must\n * have different broadcast channels.\n * But also it ensures that for each RxDatabase we only create a single\n * broadcast channel that can even be reused in the leader election plugin.\n * \n * TODO at the end of the unit tests,\n * we should ensure that all channels are closed and cleaned up.\n * Otherwise we have forgot something.\n */\nexport const BROADCAST_CHANNEL_BY_TOKEN: Map<string, {\n    bc: BroadcastChannel<RxStorageMultiInstanceBroadcastType>;\n    /**\n     * Contains all context objects that currently use the channel.\n     * If this becomes empty, we can close the channel\n     */\n    refs: Set<any>;\n}> = new Map();\n\n\nexport type RxStorageMultiInstanceBroadcastType = {\n    storageName: string;\n    collectionName: string;\n    /**\n     * collection.schema.version\n     */\n    version: number;\n    databaseName: string;\n    eventBulk: EventBulk<any, any>;\n}\n\nexport function getBroadcastChannelReference(\n    databaseInstanceToken: string,\n    databaseName: string,\n    refObject: any\n): BroadcastChannel<RxStorageMultiInstanceBroadcastType> {\n    let state = BROADCAST_CHANNEL_BY_TOKEN.get(databaseInstanceToken);\n    if (!state) {\n        state = {\n            /**\n             * We have to use the databaseName instead of the databaseInstanceToken\n             * in the BroadcastChannel name because different instances must end with the same\n             * channel name to be able to broadcast messages between each other.\n             */\n            bc: new BroadcastChannel('RxDB:' + databaseName),\n            refs: new Set<any>()\n        };\n        BROADCAST_CHANNEL_BY_TOKEN.set(databaseInstanceToken, state);\n    }\n    state.refs.add(refObject);\n    return state.bc;\n}\n\nexport function removeBroadcastChannelReference(\n    databaseInstanceToken: string,\n    refObject: any\n) {\n    const state = BROADCAST_CHANNEL_BY_TOKEN.get(databaseInstanceToken);\n    if (!state) {\n        return;\n    }\n    state.refs.delete(refObject);\n    if (state.refs.size === 0) {\n        BROADCAST_CHANNEL_BY_TOKEN.delete(databaseInstanceToken);\n        return state.bc.close();\n    }\n}\n\n\nexport function addRxStorageMultiInstanceSupport<RxDocType>(\n    storageName: string,\n    instanceCreationParams: RxStorageInstanceCreationParams<RxDocType, any>,\n    instance: RxStorageInstance<RxDocType, any, any>,\n    /**\n     * If provided, that channel will be used\n     * instead of an own one.\n     */\n    providedBroadcastChannel?: BroadcastChannel<any>\n) {\n    if (!instanceCreationParams.multiInstance) {\n        return;\n    }\n\n    type Emit = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n\n    const broadcastChannel = providedBroadcastChannel ?\n        providedBroadcastChannel :\n        getBroadcastChannelReference(\n            instanceCreationParams.databaseInstanceToken,\n            instance.databaseName,\n            instance\n        );\n\n    const changesFromOtherInstances$: Subject<Emit> = new Subject();\n\n\n    const eventListener = (msg: RxStorageMultiInstanceBroadcastType) => {\n        if (\n            msg.storageName === storageName &&\n            msg.databaseName === instanceCreationParams.databaseName &&\n            msg.collectionName === instanceCreationParams.collectionName &&\n            msg.version === instanceCreationParams.schema.version\n        ) {\n            changesFromOtherInstances$.next(msg.eventBulk);\n        }\n    };\n    broadcastChannel.addEventListener('message', eventListener);\n\n    const oldChangestream$ = instance.changeStream();\n\n    let closed = false;\n    const sub = oldChangestream$.subscribe(eventBulk => {\n        if (closed) {\n            return;\n        }\n        broadcastChannel.postMessage({\n            storageName: storageName,\n            databaseName: instanceCreationParams.databaseName,\n            collectionName: instanceCreationParams.collectionName,\n            version: instanceCreationParams.schema.version,\n            eventBulk\n        });\n    });\n\n    instance.changeStream = function (): Observable<Emit> {\n        return changesFromOtherInstances$.asObservable().pipe(\n            mergeWith(oldChangestream$)\n        );\n    }\n\n    const oldClose = instance.close.bind(instance);\n    instance.close = async function () {\n        closed = true;\n        sub.unsubscribe();\n        broadcastChannel.removeEventListener('message', eventListener);\n        if (!providedBroadcastChannel) {\n            await removeBroadcastChannelReference(\n                instanceCreationParams.databaseInstanceToken,\n                instance\n            );\n        }\n        return oldClose();\n    }\n\n    const oldRemove = instance.remove.bind(instance);\n    instance.remove = async function () {\n        closed = true;\n        sub.unsubscribe();\n        broadcastChannel.removeEventListener('message', eventListener);\n        if (!providedBroadcastChannel) {\n            await removeBroadcastChannelReference(\n                instanceCreationParams.databaseInstanceToken,\n                instance\n            );\n        }\n        return oldRemove();\n    }\n}\n"],"mappings":"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"}