{"version":3,"file":"rx-query.js","names":["_rxjs","require","_operators","_utils","_rxError","_hooks","_eventReduce","_queryCache","_rxQueryHelper","_queryCount","newQueryID","RxQueryBase","exports","op","mangoQuery","collection","other","id","_execOverDatabaseCount","_creationTime","now","_lastEnsureEqual","uncached","refCount$","BehaviorSubject","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_limitBufferSize","_limitBufferResults","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_proto","prototype","_setResultData","newResultData","docsData","docsMap","Map","docsDataMap","count","docs","time","Array","from","values","map","docData","_docCache","getCachedRxDocument","doc","set","primary","_data","length","_execOverDatabase","preparedQuery","getPreparedQuery","result","storageInstance","mode","database","allowSlowCount","newRxError","queryObj","ids","ensureNotFalsy","selector","$in","ret","mustBeQueried","forEach","getLatestDocumentDataIfExists","_deleted","push","findDocumentsById","Object","docsPromise","queryCollection","then","exec","throwIfMissing","name","query","_ensureEqual","firstValueFrom","$","toString","stringObj","sortObject","value","JSON","stringify","stringifyFilter","hookInput","rxQuery","normalizeMangoQuery","jsonSchema","limit","runPluginHooks","storage","statics","prepareQuery","doesDocumentDataMatch","queryMatcher","remove","isArray","Promise","all","update","_updateObj","pluginMissing","where","_queryObj","sort","_params","skip","_amount","enableLimitBuffer","bufferSize","console","error","_createClass2","default","key","get","_$","results$","pipe","filter","changeEvent","isLocal","startWith","mergeMap","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","distinctUntilChanged","prev","curr","useResult","slice","merge","normalizedQuery","overwriteGetterForCaching","getQueryMatcher","tunnelQueryCache","getByQuery","createRxQuery","triggerCacheReplacement","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","_loop","cE","find","documentId","previousCount","newCount","didMatchBefore","previousDocumentData","doesMatchNow","documentData","eventReduceResult","calculateNewResults","runFullQueryAgain","changed","newResults","latestAfter","areRxDocumentArraysEqual","resolve","docIds","docId","hasOwnProperty","queryResult","documents","splice","keys","$eq","r","isRxQuery","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    ensureNotFalsy,\n    areRxDocumentArraysEqual\n} from './plugins/utils';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    RxDocumentData,\n    QueryMatcher\n} from './types';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport { getQueryMatcher, normalizeMangoQuery } from './rx-query-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocType,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocType>[] | RxDocument<RxDocType>\n> {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string | string[];\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: {\n        docsData: RxDocumentData<RxDocType>[];\n        // A key->document map, used in the event reduce optimization.\n        docsDataMap: Map<string, RxDocType>;\n        docsMap: Map<string, RxDocument<RxDocType>>;\n        docs: RxDocument<RxDocType>[];\n        count: number;\n        /**\n         * Time at which the current _result state was created.\n         * Used to determine if the result set has changed since X\n         * so that we do not emit the same result multiple times on subscription.\n         */\n        time: number;\n    } | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery<RxDocType>>,\n        public collection: RxCollection<RxDocType>,\n        // used by some plugins\n        public other: any = {}\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'count') {\n                        return useResult.count;\n                    } else if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.docs.length === 0 ? null : useResult.docs[0];\n                    } else if (this.op === 'findByIds') {\n                        return useResult.docsMap;\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it won't matter if the user modifies it.\n                        return useResult.docs.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    // Fields used for the Limit Buffer when enabled:\n    public _limitBufferSize: number | null = null;\n    public _limitBufferResults: RxDocumentData<RxDocType>[] | null = null;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from the storage\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocType>[] | number | Map<string, RxDocumentData<RxDocType>>): void {\n        if (typeof newResultData === 'number') {\n            this._result = {\n                docsData: [],\n                docsMap: new Map(),\n                docsDataMap: new Map(),\n                count: newResultData,\n                docs: [],\n                time: now()\n            };\n            return;\n        } else if (newResultData instanceof Map) {\n            newResultData = Array.from((newResultData as Map<string, RxDocumentData<RxDocType>>).values());\n        }\n\n        const docsDataMap = new Map();\n        const docsMap = new Map();\n\n\n        const docs = newResultData.map(docData => this.collection._docCache.getCachedRxDocument(docData));\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const docsData = docs.map(doc => {\n            docsDataMap.set(doc.primary, doc._data);\n            docsMap.set(doc.primary, doc);\n            return doc._data;\n        });\n\n        this._result = {\n            docsData,\n            docsMap,\n            docsDataMap,\n            count: docsData.length,\n            docs,\n            time: now()\n        };\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    async _execOverDatabase(): Promise<RxDocumentData<RxDocType>[] | number> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n\n        if (this.op === 'count') {\n            const preparedQuery = this.getPreparedQuery();\n            const result = await this.collection.storageInstance.count(preparedQuery);\n            if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n                throw newRxError('QU14', {\n                    collection: this.collection,\n                    queryObj: this.mangoQuery\n                });\n            } else {\n                return result.count;\n            }\n        }\n\n        if (this.op === 'findByIds') {\n            const ids: string[] = ensureNotFalsy(this.mangoQuery.selector as any)[this.collection.schema.primaryPath].$in;\n            const ret = new Map<string, RxDocument<RxDocType>>();\n            const mustBeQueried: string[] = [];\n            // first try to fill from docCache\n            ids.forEach(id => {\n                const docData = this.collection._docCache.getLatestDocumentDataIfExists(id);\n                if (docData) {\n                    if (!docData._deleted) {\n                        const doc = this.collection._docCache.getCachedRxDocument(docData);\n                        ret.set(id, doc);\n                    }\n                } else {\n                    mustBeQueried.push(id);\n                }\n            });\n            // everything which was not in docCache must be fetched from the storage\n            if (mustBeQueried.length > 0) {\n                const docs = await this.collection.storageInstance.findDocumentsById(mustBeQueried, false);\n                Object.values(docs).forEach(docData => {\n                    const doc = this.collection._docCache.getCachedRxDocument(docData);\n                    ret.set(doc.primary, doc);\n                });\n            }\n            return ret as any;\n        }\n\n\n        const docsPromise = queryCollection<RxDocType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const schema = this.collection.schema.jsonSchema;\n        const normalizedQuery = normalizeMangoQuery(\n            this.collection.schema.jsonSchema,\n            this.mangoQuery\n        );\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            getQueryMatcher(\n                schema,\n                normalizedQuery\n            ) as any\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocType>(\n                this.collection.schema.jsonSchema,\n                this.mangoQuery\n            )\n        };\n\n        if (this._limitBufferSize !== null && hookInput.mangoQuery.limit) {\n            hookInput.mangoQuery.limit = hookInput.mangoQuery.limit + this._limitBufferSize;\n        }\n\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        return this\n            .exec()\n            .then(docs => {\n                if (Array.isArray(docs)) {\n                    // TODO use a bulk operation instead of running .remove() on each document\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            });\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocType> | keyof RxDocType | string): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocType>): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n\n    enableLimitBuffer(bufferSize: number) {\n        if (this._lastExecStart !== 0) {\n            console.error('Can\\'t use limit buffer if query has already executed');\n            return this;\n        }\n        if (this.mangoQuery.skip || !this.mangoQuery.limit) {\n            console.error('Right now, limit buffer only works on non-skip, limit queries.');\n            return this;\n        }\n        this._limitBufferSize = bufferSize;\n        return this;\n    }\n}\n\nexport function _getDefaultQuery<RxDocType>(): MangoQuery<RxDocType> {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery<RxDocType>(\n    op: RxQueryOP,\n    queryObj: MangoQuery<RxDocType>,\n    collection: RxCollection<RxDocType>,\n    other?: any\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection,\n        other\n    });\n\n    let ret = new RxQueryBase<RxDocType>(op, queryObj, collection, other);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase<any>): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase<any>): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual<RxDocType>(rxQuery: RxQueryBase<RxDocType>): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happened since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            if (rxQuery._limitBufferResults !== null) {\n                // Check if any item in our limit buffer was modified by a change event\n                for (const cE of runChangeEvents) {\n                    if (rxQuery._limitBufferResults.find((doc) => doc[rxQuery.collection.schema.primaryPath] === cE.documentId)) {\n                        // If so, the limit buffer is potential invalid -- let's just blow it up\n                        // TODO: could we instead update the documents in the limit buffer?\n                        rxQuery._limitBufferResults = null;\n                        break;\n                    }\n                }\n            }\n\n            if (rxQuery.op === 'count') {\n                // 'count' query\n                const previousCount = ensureNotFalsy(rxQuery._result).count;\n                let newCount = previousCount;\n                runChangeEvents.forEach(cE => {\n                    const didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n                    const doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n\n                    if (!didMatchBefore && doesMatchNow) {\n                        newCount++;\n                    }\n                    if (didMatchBefore && !doesMatchNow) {\n                        newCount--;\n                    }\n                });\n                if (newCount !== previousCount) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newCount as any);\n                }\n            } else {\n                // 'find' or 'findOne' query\n                const eventReduceResult = calculateNewResults(\n                    rxQuery as any,\n                    runChangeEvents\n                );\n                if (eventReduceResult.runFullQueryAgain) {\n                    // could not calculate the new results, execute must be done\n                    mustReExec = true;\n                } else if (eventReduceResult.changed) {\n                    // we got the new results, we do not have to re-execute, mustReExec stays false\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(eventReduceResult.newResults as any);\n                }\n            }\n        }\n    }\n\n\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n\n                // A count query needs a different has-changed check.\n                if (typeof newResultData === 'number') {\n                    if (\n                        !rxQuery._result ||\n                        newResultData !== rxQuery._result.count\n                    ) {\n                        ret = true;\n                        rxQuery._setResultData(newResultData as any);\n                    }\n                    return ret;\n                }\n                if (\n                    !rxQuery._result ||\n                    !areRxDocumentArraysEqual(\n                        rxQuery.collection.schema.primaryPath,\n                        newResultData,\n                        rxQuery._result.docsData\n                    )\n                ) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensure findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType>\n): Promise<RxDocumentData<RxDocType>[]> {\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        if (Array.isArray(rxQuery.isFindOneByIdQuery)) {\n            let docIds = rxQuery.isFindOneByIdQuery;\n            docIds = docIds.filter(docId => {\n                // first try to fill from docCache\n                const docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n                if (docData) {\n                    if (!docData._deleted) {\n                        docs.push(docData);\n                    }\n                    return false;\n                } else {\n                    return true;\n                }\n            });\n            // otherwise get from storage\n            if (docIds.length > 0) {\n                const docsMap = await collection.storageInstance.findDocumentsById(docIds, false);\n                Object.values(docsMap).forEach(docData => {\n                    docs.push(docData);\n                });\n            }\n        } else {\n            const docId = rxQuery.isFindOneByIdQuery;\n\n            // first try to fill from docCache\n            let docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n            if (!docData) {\n                // otherwise get from storage\n                const docsMap = await collection.storageInstance.findDocumentsById([docId], false);\n                if (docsMap.hasOwnProperty(docId)) {\n                    docData = docsMap[docId];\n                }\n            }\n            if (docData && !docData._deleted) {\n                docs.push(docData);\n            }\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        if (rxQuery._limitBufferSize !== null && rxQuery.mangoQuery.limit && queryResult.documents.length > rxQuery.mangoQuery.limit) {\n            // If there are more than query.limit results, we pull out our buffer items from the\n            // last rxQuery._limitBufferSize items of the results.\n            rxQuery._limitBufferResults = queryResult.documents.splice(rxQuery.mangoQuery.limit);\n        }\n        docs = queryResult.documents;\n    }\n    return docs;\n\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string | string[] {\n    // must have exactly one operator which must be $eq || $in\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        const value: any = query.selector[primaryPath];\n        if (typeof value === 'string') {\n            return value;\n        } else if (\n            Object.keys(value).length === 1 &&\n            typeof value.$eq === 'string'\n        ) {\n            return value.$eq;\n        }\n\n        // same with $in string arrays\n        if (\n            Object.keys(value).length === 1 &&\n            Array.isArray(value.$eq) &&\n            // must only contain strings\n            !(value.$eq as any[]).find(r => typeof r !== 'string')\n        ) {\n            return value.$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isRxQuery(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":"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"}