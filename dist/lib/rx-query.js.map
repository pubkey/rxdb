{"version":3,"file":"rx-query.js","names":["queryCollection","rxQuery","docs","collection","isFindOneByIdQuery","docId","storageInstance","findDocumentsById","docsMap","docData","push","preparedQuery","getPreparedQuery","query","queryResult","documents","_queryCount","newQueryID","RxQueryBase","op","mangoQuery","id","_execOverDatabaseCount","_creationTime","now","_lastEnsureEqual","other","uncached","refCount$","BehaviorSubject","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","schema","primaryPath","_setResultData","newResultData","docsData","docsDataMap","Map","count","time","createRxDocuments","primPath","map","doc","_dataSync$","getValue","set","length","_execOverDatabase","then","result","mode","database","allowSlowCount","newRxError","queryObj","docsPromise","exec","throwIfMissing","name","_ensureEqual","firstValueFrom","$","toString","stringObj","sortObject","value","JSON","stringify","stringifyFilter","hookInput","normalizeMangoQuery","jsonSchema","clone","runPluginHooks","storage","statics","prepareQuery","doesDocumentDataMatch","_deleted","queryMatcher","remove","ret","Array","isArray","Promise","all","update","_updateObj","pluginMissing","where","_queryObj","sort","_params","skip","_amount","limit","_$","results$","pipe","filter","changeEvent","isLocal","startWith","mergeMap","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","distinctUntilChanged","prev","curr","ensureNotFalsy","useResult","slice","merge","usePreparedQuery","overwriteGetterForCaching","getQueryMatcher","selector","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","triggerCacheReplacement","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","previousCount","newCount","forEach","cE","didMatchBefore","previousDocumentData","doesMatchNow","documentData","eventReduceResult","calculateNewResults","runFullQueryAgain","changed","newResults","latestAfter","deepEqual","resolve","Object","keys","$eq","isInstanceOf","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    clone,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    ensureNotFalsy\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    RxDocumentData\n} from './types';\n\nimport {\n    createRxDocuments\n} from './rx-document-prototype-merge';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport type { QueryMatcher } from 'event-reduce-js';\nimport { normalizeMangoQuery } from './rx-query-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocumentType = any,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocumentType>[] | RxDocument<RxDocumentType>\n> {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    // used by some plugins\n    public other: any = {};\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string;\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: {\n        docsData: RxDocumentType[];\n        // A key->document map, used in the event reduce optimization.\n        docsDataMap: Map<string, RxDocumentType>;\n        docs: RxDocument<RxDocumentType>[];\n        count: number;\n        /**\n         * Time at which the current _result state was created.\n         * Used to determine if the result set has changed since X\n         * so that we do not emit the same result multiple times on subscription.\n         */\n        time: number;\n    } | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery>,\n        public collection: RxCollection<RxDocumentType>\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'count') {\n                        return useResult.count;\n                    } else if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.docs.length === 0 ? null : useResult.docs[0];\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it won't matter if the user modifies it.\n                        return useResult.docs.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from pouchdb\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocumentType[]> | number): void {\n\n        if (typeof newResultData === 'number') {\n            this._result = {\n                docsData: [],\n                docsDataMap: new Map(),\n                count: newResultData,\n                docs: [],\n                time: now()\n            }\n            return;\n        }\n\n        const docs = createRxDocuments<RxDocumentType, {}>(\n            this.collection,\n            newResultData\n        );\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const primPath = this.collection.schema.primaryPath;\n        const docsDataMap = new Map();\n        const docsData = docs.map(doc => {\n            const docData: RxDocumentData<RxDocumentType> = doc._dataSync$.getValue() as any;\n            const id: string = docData[primPath] as any;\n            docsDataMap.set(id, docData);\n            return docData;\n        });\n\n        this._result = {\n            docsData,\n            docsDataMap,\n            count: docsData.length,\n            docs,\n            time: now()\n        }\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    _execOverDatabase(): Promise<RxDocumentData<RxDocumentType>[] | number> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n\n        if (this.op === 'count') {\n            const preparedQuery = this.getPreparedQuery();\n            return this.collection.storageInstance.count(preparedQuery).then(result => {\n                if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n                    throw newRxError('QU14', {\n                        collection: this.collection,\n                        queryObj: this.mangoQuery\n                    });\n                } else {\n                    return result.count;\n                }\n\n            });\n        }\n\n        const docsPromise = queryCollection<RxDocumentType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocumentType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocumentType>> {\n        const schema = this.collection.schema.jsonSchema;\n\n\n        /**\n         * Instead of calling this.getPreparedQuery(),\n         * we have to prepare the query for the query matcher\n         * so that it does not contain modifications from the hooks\n         * like the key compression.\n         */\n        const usePreparedQuery = this.collection.database.storage.statics.prepareQuery(\n            schema,\n            normalizeMangoQuery(\n                this.collection.schema.jsonSchema,\n                clone(this.mangoQuery)\n            )\n        );\n\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            this.collection.database.storage.statics.getQueryMatcher(\n                schema,\n                usePreparedQuery\n            )\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocumentType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocumentType>(\n                this.collection.schema.jsonSchema,\n                clone(this.mangoQuery)\n            )\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocumentType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        let ret: any;\n        return this\n            .exec()\n            .then(docs => {\n                ret = docs;\n                if (Array.isArray(docs)) {\n                    // TODO use a bulk operation instead of running .remove() on each document\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            })\n            .then(() => ret);\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocumentType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocumentType> | keyof RxDocumentType | string): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocumentType>): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery(): MangoQuery {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery(\n    op: RxQueryOP,\n    queryObj: MangoQuery,\n    collection: RxCollection\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection\n    });\n\n    let ret = new RxQueryBase(op, queryObj, collection);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happened since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            if (rxQuery.op === 'count') {\n                // 'count' query\n                const previousCount = ensureNotFalsy(rxQuery._result).count;\n                let newCount = previousCount;\n                runChangeEvents.forEach(cE => {\n                    const didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n                    const doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n\n                    if (!didMatchBefore && doesMatchNow) {\n                        newCount++;\n                    }\n                    if (didMatchBefore && !doesMatchNow) {\n                        newCount--;\n                    }\n                });\n                if (newCount !== previousCount) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newCount as any);\n                }\n            } else {\n                // 'find' or 'findOne' query\n                const eventReduceResult = calculateNewResults(\n                    rxQuery as any,\n                    runChangeEvents\n                );\n                if (eventReduceResult.runFullQueryAgain) {\n                    // could not calculate the new results, execute must be done\n                    mustReExec = true;\n                } else if (eventReduceResult.changed) {\n                    // we got the new results, we do not have to re-execute, mustReExec stays false\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(eventReduceResult.newResults as any);\n                }\n            }\n        }\n    }\n\n\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n                if (!rxQuery._result || !deepEqual(newResultData, rxQuery._result.docsData)) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensuer findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType>\n): Promise<RxDocumentData<RxDocType>[]> {\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        const docId = rxQuery.isFindOneByIdQuery;\n        const docsMap = await collection.storageInstance.findDocumentsById([docId], false);\n        const docData = docsMap[docId];\n        if (docData) {\n            docs.push(docData);\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        docs = queryResult.documents;\n    }\n    return docs;\n\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string {\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        if (typeof query.selector[primaryPath] === 'string') {\n            return query.selector[primaryPath];\n        } else if (\n            Object.keys(query.selector[primaryPath]).length === 1 &&\n            typeof query.selector[primaryPath].$eq === 'string'\n        ) {\n            return query.selector[primaryPath].$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":"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"}