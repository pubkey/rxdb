{"version":3,"file":"replication-couchdb.d.js","names":[],"sources":["../../../../src/types/plugins/replication-couchdb.d.ts"],"sourcesContent":["import { Observable } from 'rxjs';\n\nimport type {\n    RxQuery,\n    RxCollection\n} from '../../types';\nimport type {\n    PouchReplicationOptions,\n    PouchSyncHandler\n} from '../pouch';\nimport type { RxCouchDBReplicationStateBase } from '../../plugins/replication-couchdb';\n\nexport declare class RxCouchDBReplicationState extends RxCouchDBReplicationStateBase {\n    collection: RxCollection;\n\n    change$: Observable<any>;\n    docs$: Observable<any>;\n    denied$: Observable<any>;\n    active$: Observable<any>;\n    alive$: Observable<boolean>;\n    complete$: Observable<any>;\n    error$: Observable<any>;\n\n    /**\n     * waits until the initial replication is done\n     * and the client can be expected to have the same data as the server\n     */\n    awaitInitialReplication(): Promise<void>;\n\n    // can be used for debugging or custom event-handling\n    // will be set some time after sync() is called\n    _pouchEventEmitterObject: PouchSyncHandler | null;\n\n    // if you do a custom sync, put the thing you get back from pouch here\n    setPouchEventEmitter(pouchSyncState: any): void;\n}\n\nexport type SyncOptions = {\n    remote: string | any;\n    waitForLeadership?: boolean;\n    direction?: {\n        push?: boolean,\n        pull?: boolean\n    };\n    // for options see https://pouchdb.com/api.html#replication\n    options?: PouchReplicationOptions;\n    query?: RxQuery<any, any>;\n}\n"],"mappings":""}