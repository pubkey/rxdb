{"version":3,"file":"rx-collection.js","names":["HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","conflictHandler","defaultConflictHandler","storageInstance","timeouts","Set","_atomicUpsertQueues","Map","synced","hooks","_subs","_docCache","DocCache","_queryCache","createQueryCache","$","_changeEventBuffer","onDestroy","destroyed","_applyHookFunctions","asRxCollection","prepare","getWrappedStorageInstance","jsonSchema","eventBulks$","pipe","filter","changeEventBulk","collectionName","mergeMap","events","createChangeEventBuffer","storageToken","databaseStorageToken","subDocs","changeStream","subscribe","eventBulk","id","internal","map","ev","storageChangeEventToRxChangeEvent","databaseToken","token","checkpoint","context","$emit","push","cE","isLocal","doc","get","documentId","_handleChangeEvent","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","PROMISE_RESOLVE_VOID","migrationNeeded","pluginMissing","getDataMigrator","migrate","batchSize","migratePromise","insert","json","useJson","fillObjectDataBeforeInsert","bulkInsert","writeResult","isError","error","throwIfIsStorageWriteError","primaryPath","insertResult","ensureNotFalsy","success","docsData","docs","docsMap","insertRows","set","docData","Object","assign","_attachments","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_deleted","row","document","bulkWrite","results","rxDocuments","values","successDocData","writtenDocData","createRxDocument","hasHooks","Promise","all","_runHooks","primary","length","useDocs","useDocData","bulkRemove","ids","findByIds","rxDocumentMap","Array","from","forEach","rxDocument","data","clone","toJSON","removeDocs","writeDoc","flatClone","previous","successIds","keys","bulkUpsert","insertData","useJsonByDocId","newRxError","ret","slice","writeData","getFromMapOrThrow","docDataInDb","documentInDb","atomicUpdate","updatedDocs","concat","upsert","result","atomicUpsert","queue","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","find","queryObj","_getDefaultQuery","query","createRxQuery","findOne","selector","limit","isArray","newRxTypeError","count","mustBeQueried","findDocumentsById","findByIds$","currentValue","lastChangeEvent","initialPromise","counter","firstEmitDone","startWith","changeEvent","includes","missedChangeEvents","getFrom","newResult","resultHasChanged","rxChangeEvent","docId","op","operation","documentData","has","x","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","syncCouchDB","_syncOptions","syncGraphQL","_options","addHook","when","key","fun","parallel","boundFun","bind","runName","series","getHooks","instance","tasks","hook","promiseSeries","_runHooksSync","promiseWait","time","res","timeout","setTimeout","add","destroy","PROMISE_RESOLVE_FALSE","clearTimeout","requestIdlePromise","fn","close","sub","unsubscribe","collections","runAsyncPluginHooks","remove","removeCollectionStorages","storage","internalStore","hashFunction","collection","colProto","getPrototypeOf","fnName","ucfirst","_innerDoc","nextTick","rxCollection","docFromCache","resolve","exec","newDoc","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","password","runPluginHooks","createRxCollectionStorageInstance","entries","funName","defineProperty","version","creator","err","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    startWith,\n    mergeMap,\n    shareReplay\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    clone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    getDefaultRxDocumentMeta,\n    getDefaultRevision,\n    nextTick\n} from './util';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    DocCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCouchDBReplicationState,\n    MigrationState,\n    SyncOptions,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageBulkWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise,\n    CRDTEntry,\n    MangoQuerySelectorAndIndex\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nimport {\n    createRxDocument\n} from './rx-document-prototype-merge';\nimport {\n    getWrappedStorageInstance,\n    storageChangeEventToRxChangeEvent,\n    throwIfIsStorageWriteError\n} from './rx-storage-helper';\nimport { defaultConflictHandler } from './replication-protocol';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any }\n> {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _atomicUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocCache<\n        RxDocument<RxDocumentType, OrmMethods>\n    > = new DocCache();\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n\n\n    /**\n     * When the collection is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed = false;\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n\n        this.$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * When a write happens to the collection\n         * we find the changed document in the docCache\n         * and tell it that it has to change its data.\n         */\n        this._subs.push(\n            this.$\n                .pipe(\n                    filter((cE: RxChangeEvent<RxDocumentType>) => !cE.isLocal)\n                )\n                .subscribe(cE => {\n                    // when data changes, send it to RxDocument in docCache\n                    const doc = this._docCache.get(cE.documentId);\n                    if (doc) {\n                        doc._handleChangeEvent(cE);\n                    }\n                })\n        );\n\n        /**\n         * Resolve the conflict tasks\n         * of the RxStorageInstance\n         */\n        this._subs.push(\n            this.storageInstance\n                .conflictResultionTasks()\n                .subscribe(task => {\n                    this\n                        .conflictHandler(task.input, task.context)\n                        .then(output => {\n                            this.storageInstance.resolveConflictResultionTask({\n                                id: task.id,\n                                output\n                            });\n                        });\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n\n        // TODO do we need fillObjectDataBeforeInsert() here because it is also run at bulkInsert() later\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this.schema, json);\n\n        const writeResult = await this.bulkInsert([useJson]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, useJson[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n            return useDocData;\n        });\n        const docs = this.hasHooks('pre', 'insert') ?\n            await Promise.all(\n                useDocs.map(doc => {\n                    return this._runHooks('pre', 'insert', doc)\n                        .then(() => {\n                            return doc;\n                        });\n                })\n            ) : useDocs;\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        const insertRows: BulkWriteRow<RxDocumentType>[] = docs.map(doc => {\n            docsMap.set((doc as any)[this.schema.primaryPath] as any, doc);\n            const docData = Object.assign(doc, {\n                _attachments: {},\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _deleted: false\n            });\n            const row: BulkWriteRow<RxDocumentType> = { document: docData };\n            return row;\n        });\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n        // create documents\n        const successDocData: RxDocumentData<RxDocumentType>[] = Object.values(results.success);\n        const rxDocuments: any[] = successDocData\n            .map((writtenDocData) => {\n                const doc = createRxDocument(this as any, writtenDocData);\n                return doc;\n            });\n\n        if (this.hasHooks('post', 'insert')) {\n            await Promise.all(\n                rxDocuments.map(doc => {\n                    return this._runHooks(\n                        'post', 'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids);\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = clone(rxDocument.toJSON(true)) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments: any[] = successIds.map(id => {\n            return rxDocumentMap.get(id);\n        });\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<RxDocument<RxDocumentType, OrmMethods>[]> {\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        let ret = insertResult.success.slice(0);\n        const updatedDocs = await Promise.all(\n            insertResult.error.map(error => {\n                const id = error.documentId;\n                const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                const docDataInDb = ensureNotFalsy(error.documentInDb);\n                const doc = createRxDocument(this.asRxCollection, docDataInDb);\n                return doc.atomicUpdate(() => writeData);\n            })\n        );\n        ret = ret.concat(updatedDocs);\n        return ret;\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        return this.bulkUpsert([json]).then(result => result[0]);\n    }\n\n    /**\n     * upserts to a RxDocument, uses atomicUpdate if document already exists\n     */\n    atomicUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it won't try 2 parallel runs\n        let queue = this._atomicUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _atomicUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _atomicUpsertUpdate(wasInserted.doc, useJson)\n                        .then(() => wasInserted.doc);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._atomicUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this.asRxCollection);\n        return query as any;\n    }\n\n    findOne(queryObj?: MangoQueryNoLimit<RxDocumentType> | string): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>\n        | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritte\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery('findOne', queryObj, this.asRxCollection);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        number\n    > {\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n        const query = createRxQuery('count', queryObj, this.asRxCollection);\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    async findByIds(\n        ids: string[]\n    ): Promise<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n\n        const ret = new Map();\n        const mustBeQueried: string[] = [];\n\n        // first try to fill from docCache\n        ids.forEach(id => {\n            const doc = this._docCache.get(id);\n            if (doc) {\n                ret.set(id, doc);\n            } else {\n                mustBeQueried.push(id);\n            }\n        });\n\n        // find everything which was not in docCache\n        if (mustBeQueried.length > 0) {\n            const docs = await this.storageInstance.findDocumentsById(mustBeQueried, false);\n            Object.values(docs).forEach(docData => {\n                const doc = createRxDocument<RxDocumentType, OrmMethods>(this as any, docData);\n                ret.set(doc.primary, doc);\n            });\n        }\n        return ret;\n    }\n\n    /**\n     * like this.findByIds but returns an observable\n     * that always emits the current state\n     */\n    findByIds$(\n        ids: string[]\n    ): Observable<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        let currentValue: Map<string, RxDocument<RxDocumentType, OrmMethods>> | null = null;\n        let lastChangeEvent: number = -1;\n\n        /**\n         * Ensure we do not process events in parallel\n         */\n        let queue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n        const initialPromise = this.findByIds(ids).then(docsMap => {\n            lastChangeEvent = this._changeEventBuffer.counter;\n            currentValue = docsMap;\n        });\n        let firstEmitDone = false;\n\n        return this.$.pipe(\n            startWith(null),\n            /**\n             * Optimization shortcut.\n             * Do not proceed if the emitted RxChangeEvent\n             * is not relevant for the query.\n             */\n            filter(changeEvent => {\n                if (\n                    // first emit has no event\n                    changeEvent &&\n                    (\n                        // local documents are not relevant for the query\n                        changeEvent.isLocal ||\n                        // document of the change is not in the ids list.\n                        !ids.includes(changeEvent.documentId)\n                    )\n                ) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }),\n            mergeMap(() => initialPromise),\n            /**\n             * Because shareReplay with refCount: true\n             * will often subscribe/unsusbscribe\n             * we always ensure that we handled all missed events\n             * since the last subscription.\n             */\n            mergeMap(() => {\n                queue = queue.then(async () => {\n                    /**\n                     * We first have to clone the Map\n                     * to ensure we do not create side effects by mutating\n                     * a Map that has already been returned before.\n                     */\n                    currentValue = new Map(ensureNotFalsy(currentValue));\n                    const missedChangeEvents = this._changeEventBuffer.getFrom(lastChangeEvent + 1);\n                    lastChangeEvent = this._changeEventBuffer.counter;\n                    if (missedChangeEvents === null) {\n                        /**\n                         * changeEventBuffer is of bounds -> we must re-execute over the database\n                         * because we cannot calculate the new results just from the events.\n                         */\n                        const newResult = await this.findByIds(ids);\n                        lastChangeEvent = this._changeEventBuffer.counter;\n                        return newResult;\n                    } else {\n                        let resultHasChanged = false;\n                        missedChangeEvents\n                            .forEach(rxChangeEvent => {\n                                const docId = rxChangeEvent.documentId;\n                                if (!ids.includes(docId)) {\n                                    // document is not relevant for the result set\n                                    return;\n                                }\n                                const op = rxChangeEvent.operation;\n                                if (op === 'INSERT' || op === 'UPDATE') {\n                                    resultHasChanged = true;\n                                    const rxDocument = createRxDocument(\n                                        this.asRxCollection,\n                                        rxChangeEvent.documentData\n                                    );\n                                    ensureNotFalsy(currentValue).set(docId, rxDocument);\n                                } else {\n                                    if (ensureNotFalsy(currentValue).has(docId)) {\n                                        resultHasChanged = true;\n                                        ensureNotFalsy(currentValue).delete(docId);\n                                    }\n                                }\n                            });\n\n                        // nothing happened that affects the result -> do not emit\n                        if (!resultHasChanged && firstEmitDone) {\n                            return false as any;\n                        }\n                    }\n                    firstEmitDone = true;\n                    return currentValue;\n                });\n                return queue;\n            }),\n            filter(x => !!x),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\n        throw pluginMissing('crdt');\n    }\n\n    /**\n     * sync with a CouchDB endpoint\n     */\n    syncCouchDB(_syncOptions: SyncOptions): RxCouchDBReplicationState {\n        throw pluginMissing('replication');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL<CheckpointType = any>(_options: SyncOptionsGraphQL<RxDocumentType, CheckpointType>): RxGraphQLReplicationState<RxDocumentType, CheckpointType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.destroy();\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _atomicUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.atomicUpdate((_innerDoc: RxDocumentData<RxDocType>) => {\n        return json;\n    })\n        .then(() => nextTick())\n        .then(() => {\n            return doc;\n        });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _atomicUpsertEnsureRxDocumentExists(\n    rxCollection: RxCollection,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument,\n        inserted: boolean\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docFromCache = rxCollection._docCache.get(primary);\n    if (docFromCache) {\n        return Promise.resolve({\n            doc: docFromCache,\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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"}