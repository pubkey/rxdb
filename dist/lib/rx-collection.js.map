{"version":3,"file":"rx-collection.js","names":["_operators","require","_utils","_rxCollectionHelper","_rxQuery","_rxError","_docCache","_queryCache","_changeEventBuffer","_hooks","_rxDocumentPrototypeMerge","_rxStorageHelper","_replicationProtocol","_incrementalWrite","_rxDocument","_overwritable","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","exports","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","conflictHandler","defaultConflictHandler","storageInstance","timeouts","Set","incrementalWriteQueue","_incrementalUpsertQueues","Map","synced","hooks","_subs","createQueryCache","$","checkpoint$","onDestroy","destroyed","_applyHookFunctions","asRxCollection","_proto","prototype","prepare","getWrappedStorageInstance","jsonSchema","IncrementalWriteQueue","primaryPath","newData","oldData","beforeDocumentUpdateWrite","result","_runHooks","collectionEventBulks$","eventBulks$","pipe","filter","changeEventBulk","collectionName","mergeMap","events","map","checkpoint","createChangeEventBuffer","DocumentCache","cE","isLocal","docData","createNewRxDocument","databaseStorageToken","storageToken","subDocs","changeStream","subscribe","eventBulk","id","internal","ev","storageChangeEventToRxChangeEvent","databaseToken","token","context","$emit","push","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","PROMISE_RESOLVE_VOID","migrationNeeded","pluginMissing","getDataMigrator","migrate","batchSize","migratePromise","insert","json","writeResult","bulkInsert","isError","error","throwIfIsStorageWriteError","insertResult","ensureNotFalsy","success","docsData","length","useDocs","useDocData","fillObjectDataBeforeInsert","docs","hasHooks","Promise","all","doc","docsMap","insertRows","set","row","document","results","bulkWrite","rxDocuments","Object","values","writtenDocData","getCachedRxDocument","get","primary","bulkRemove","ids","rxDocumentMap","findByIds","exec","Array","from","forEach","rxDocument","data","toMutableJSON","removeDocs","writeDoc","flatClone","_deleted","previous","successIds","keys","getFromMapOrThrow","bulkUpsert","insertData","useJsonByDocId","useJson","newRxError","ret","slice","updatedDocs","status","collection","writeError","documentId","writeData","docDataInDb","documentInDb","newDoc","incrementalModify","appendToArray","upsert","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","find","queryObj","_getDefaultQuery","query","createRxQuery","findOne","selector","limit","isArray","newRxTypeError","count","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addHook","when","key","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","promiseSeries","_runHooksSync","promiseWait","time","res","timeout","setTimeout","delete","add","destroy","PROMISE_RESOLVE_FALSE","clearTimeout","requestIdlePromise","fn","close","sub","unsubscribe","collections","runAsyncPluginHooks","remove","removeCollectionStorages","storage","internalStore","hashFunction","_createClass2","default","operation","colProto","getPrototypeOf","fnName","ucfirst","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","password","devMode","overwritable","isDevMode","runPluginHooks","createRxCollectionStorageInstance","entries","funName","defineProperty","version","creator","catch","err","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    map,\n    mergeMap\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    appendToArray\n} from './plugins/utils';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    DocumentCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    MigrationState,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageWriteError,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise,\n    CRDTEntry,\n    MangoQuerySelectorAndIndex\n} from './types';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nimport {\n    createNewRxDocument\n} from './rx-document-prototype-merge';\nimport {\n    getWrappedStorageInstance,\n    storageChangeEventToRxChangeEvent,\n    throwIfIsStorageWriteError,\n    WrappedRxStorageInstance\n} from './rx-storage-helper';\nimport { defaultConflictHandler } from './replication-protocol';\nimport { IncrementalWriteQueue } from './incremental-write';\nimport { beforeDocumentUpdateWrite } from './rx-document';\nimport { overwritable } from './overwritable';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any; },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any; }\n> {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public checkpoint$: Observable<any> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n\n\n    /**\n     * When the collection is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed = false;\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\n            this.storageInstance,\n            this.schema.primaryPath,\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\n            result => this._runHooks('post', 'save', result)\n        );\n\n        const collectionEventBulks$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n        );\n        this.$ = collectionEventBulks$.pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this.checkpoint$ = collectionEventBulks$.pipe(\n            map(changeEventBulk => changeEventBulk.checkpoint),\n        );\n\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n        this._docCache = new DocumentCache(\n            this.schema.primaryPath,\n            this.$.pipe(filter(cE => !cE.isLocal)),\n            docData => createNewRxDocument(this.asRxCollection, docData)\n        );\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * Resolve the conflict tasks\n         * of the RxStorageInstance\n         */\n        this._subs.push(\n            this.storageInstance\n                .conflictResultionTasks()\n                .subscribe(task => {\n                    this\n                        .conflictHandler(task.input, task.context)\n                        .then(output => {\n                            this.storageInstance.resolveConflictResultionTask({\n                                id: task.id,\n                                output\n                            });\n                        });\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    // overwritten by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const writeResult = await this.bulkInsert([json as any]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, (json as any)[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n        */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const primaryPath = this.schema.primaryPath;\n        const useDocs = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n            return useDocData;\n        });\n        const docs = this.hasHooks('pre', 'insert') ?\n            await Promise.all(\n                useDocs.map(doc => {\n                    return this._runHooks('pre', 'insert', doc)\n                        .then(() => {\n                            return doc;\n                        });\n                })\n            ) : useDocs;\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        const insertRows: BulkWriteRow<RxDocumentType>[] = docs.map(doc => {\n            docsMap.set((doc as any)[primaryPath] as any, doc);\n            const row: BulkWriteRow<RxDocumentType> = { document: doc };\n            return row;\n        });\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n        // create documents\n        const rxDocuments = Object.values(results.success)\n            .map((writtenDocData) => this._docCache.getCachedRxDocument(writtenDocData));\n\n        if (this.hasHooks('post', 'insert')) {\n            await Promise.all(\n                rxDocuments.map(doc => {\n                    return this._runHooks(\n                        'post', 'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids).exec();\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments = successIds.map(id => getFromMapOrThrow(rxDocumentMap, id));\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<RxDocument<RxDocumentType, OrmMethods>[]> {\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        const ret = insertResult.success.slice(0);\n        const updatedDocs = await Promise.all(\n            insertResult.error.map(async (error) => {\n                if (error.status !== 409) {\n                    throw newRxError('VD2', {\n                        collection: this.name,\n                        writeError: error\n                    });\n                }\n                const id = error.documentId;\n                const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                const docDataInDb = ensureNotFalsy(error.documentInDb);\n                const doc = this._docCache.getCachedRxDocument(docDataInDb);\n                const newDoc = await doc.incrementalModify(() => writeData);\n                return newDoc;\n            })\n        );\n        appendToArray(ret, updatedDocs);\n        return ret;\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        return this.bulkUpsert([json]).then(result => result[0]);\n    }\n\n    /**\n     * upserts to a RxDocument, uses incrementalModify if document already exists\n     */\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it won't try 2 parallel runs\n        let queue = this._incrementalUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._incrementalUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\n    ): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods> | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritten\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        number\n    > {\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n        const query = createRxQuery('count', queryObj, this as any);\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    findByIds(\n        ids: string[]\n    ): RxQuery<RxDocumentType, Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        const mangoQuery: MangoQuery<RxDocumentType> = {\n            selector: {\n                [this.schema.primaryPath]: {\n                    $in: ids.slice(0)\n                }\n            } as any\n        };\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\n        return query as any;\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\n        throw pluginMissing('crdt');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.destroy();\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _incrementalUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.incrementalModify((_innerDoc) => {\n        return json;\n    });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\n    rxCollection: RxCollection<RxDocType>,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument<RxDocType>;\n        inserted: boolean;\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\n    if (docDataFromCache) {\n        return Promise.resolve({\n            doc: rxCollection._docCache.getCachedRxDocument(docDataFromCache),\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password,\n        devMode: overwritable.isDevMode()\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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"}