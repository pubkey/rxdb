{"version":3,"file":"rx-database.js","names":["ensureNoStartupErrors","rxDatabase","storageToken","startupErrors","isRxDatabaseFirstTimeInstantiated","database","storageTokenDocument","tokenDoc","data","instanceToken","token","removeRxDatabase","databaseName","storage","databaseInstanceToken","randomCouchString","createRxDatabaseStorageInstance","dbInternalsStorageInstance","getAllCollectionDocuments","statics","collectionDocs","collectionNames","Set","forEach","doc","add","name","removedCollectionNames","Array","from","Promise","all","map","collectionName","removeCollectionStorages","runAsyncPluginHooks","remove","options","multiInstance","password","createStorageInstance","INTERNAL_STORAGE_NAME","schema","INTERNAL_STORE_SCHEMA","USED_DATABASE_NAMES","DB_COUNT","RxDatabaseBase","instanceCreationOptions","eventReduce","internalStore","hashFunction","cleanupPolicy","allowSlowCount","idleQueue","IdleQueue","_subs","onDestroy","destroyed","collections","eventBulks$","Subject","observable$","pipe","mergeMap","changeEventBulk","events","PROMISE_RESOLVE_FALSE","emittedEventBulkIds","ObliviousSet","getWrappedStorageInstance","asRxDatabase","ensureStorageTokenDocumentExists","err","push","then","$emit","has","id","next","removeCollectionDoc","getSingleDocument","getPrimaryKeyOfInternalDocument","_collectionNamePrimary","INTERNAL_CONTEXT_COLLECTION","newRxError","writeDoc","flatCloneDocWithMeta","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","args","rxJsonSchema","createRxSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","useArgs","assign","hookData","flatClone","runPluginHooks","conflictHandler","putDocsResult","error","_id","docInDb","ensureNotFalsy","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","createRxCollection","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","pluginMissing","importJSON","_exportedJSON","serverCouchDB","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","destroy","complete","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","createRxDatabase","ignoreDuplicate","localDocuments","defaultHashFunction","storageInstance","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    CouchDBServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    CouchDBServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashFunction\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA,\n    _collectionNamePrimary\n} from './rx-database-internal-store';\nimport { removeCollectionStorages } from './rx-collection-helper';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n> {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>,\n        public readonly allowSlowCount?: boolean\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         * \n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             * \n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Beceause having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                    connectedStorages: []\n                },\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs: any = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n            useArgs.conflictHandler = hookData.conflictHandler;\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    serverCouchDB(_options?: CouchDBServerOptions): Promise<CouchDBServerResponse> {\n        throw pluginMissing('server-couchdb');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections as any)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        allowSlowCount = false,\n        localDocuments = false,\n        hashFunction = defaultHashFunction\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance,\n        password\n    )\n        /**\n         * Creating the internal store might fail\n         * if some RxStorage wrapper is used that does some checks\n         * and then throw.\n         * In that case we have to properly clean up the database.\n         */\n        .catch(err => {\n            USED_DATABASE_NAMES.delete(name);\n            throw err;\n        })\n        .then(storageInstance => {\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n                name,\n                databaseInstanceToken,\n                storage,\n                instanceCreationOptions,\n                password,\n                multiInstance,\n                eventReduce,\n                options,\n                storageInstance,\n                hashFunction,\n                cleanupPolicy,\n                allowSlowCount\n            ) as any;\n\n            return runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }).then(() => rxDatabase);\n        });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storage.statics,\n        dbInternalsStorageInstance\n    );\n\n    const collectionNames = new Set<string>();\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\n    const removedCollectionNames: string[] = Array.from(collectionNames);\n\n    await Promise.all(\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\n            storage,\n            dbInternalsStorageInstance,\n            databaseInstanceToken,\n            databaseName,\n            collectionName\n        ))\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n * \n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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"}