{"version":3,"file":"event-reduce.js","names":["getSortFieldsOfQuery","primaryKey","query","sort","length","map","part","Object","keys","RXQUERY_QUERY_PARAMS_CACHE","WeakMap","getQueryParams","rxQuery","has","collection","preparedQuery","getPreparedQuery","normalizedMangoQuery","normalizeMangoQuery","storageInstance","schema","clone","mangoQuery","primaryPath","sortComparator","database","storage","statics","getSortComparator","jsonSchema","useSortComparator","docA","docB","sortComparatorData","queryMatcher","getQueryMatcher","useQueryMatcher","doc","queryMatcherData","ret","skip","limit","sortFields","set","get","calculateNewResults","rxChangeEvents","eventReduce","runFullQueryAgain","queryParams","previousResults","ensureNotFalsy","_result","docsData","slice","previousResultsMap","docsDataMap","changed","foundNonOptimizeable","find","cE","eventReduceEvent","rxChangeEventToEventReduceChangeEvent","stateResolveFunctionInput","changeEvent","keyDocumentMap","actionName","calculateActionName","runAction","newResults"],"sources":["../../src/event-reduce.ts"],"sourcesContent":["import {\n    ActionName,\n    calculateActionName,\n    runAction,\n    QueryParams,\n    QueryMatcher,\n    DeterministicSortComparator,\n    StateResolveFunctionInput\n} from 'event-reduce-js';\nimport type {\n    RxQuery,\n    MangoQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    PreparedQuery,\n    StringKeys,\n    RxDocumentData\n} from './types';\nimport { rxChangeEventToEventReduceChangeEvent } from './rx-change-event';\nimport { clone, ensureNotFalsy } from './util';\nimport { normalizeMangoQuery } from './rx-query-helper';\n\nexport type EventReduceResultNeg = {\n    runFullQueryAgain: true,\n};\nexport type EventReduceResultPos<RxDocumentType> = {\n    runFullQueryAgain: false,\n    changed: boolean,\n    newResults: RxDocumentType[];\n};\nexport type EventReduceResult<RxDocumentType> = EventReduceResultNeg | EventReduceResultPos<RxDocumentType>;\n\n\nexport function getSortFieldsOfQuery<RxDocType>(\n    primaryKey: StringKeys<RxDocumentData<RxDocType>>,\n    query: MangoQuery<RxDocType>\n): (string | StringKeys<RxDocType>)[] {\n    if (!query.sort || query.sort.length === 0) {\n        return [primaryKey];\n    } else {\n        return query.sort.map(part => Object.keys(part)[0]);\n    }\n}\n\n\n\nexport const RXQUERY_QUERY_PARAMS_CACHE: WeakMap<RxQuery, QueryParams<any>> = new WeakMap();\nexport function getQueryParams<RxDocType>(\n    rxQuery: RxQuery<RxDocType>\n): QueryParams<RxDocType> {\n    if (!RXQUERY_QUERY_PARAMS_CACHE.has(rxQuery)) {\n        const collection = rxQuery.collection;\n        const preparedQuery: PreparedQuery<RxDocType> = rxQuery.getPreparedQuery();\n        const normalizedMangoQuery = normalizeMangoQuery(\n            collection.storageInstance.schema,\n            clone(rxQuery.mangoQuery)\n        );\n        const primaryKey = collection.schema.primaryPath;\n\n        /**\n         * Create a custom sort comparator\n         * that uses the hooks to ensure\n         * we send for example compressed documents to be sorted by compressed queries.\n         */\n        const sortComparator = collection.database.storage.statics.getSortComparator(\n            collection.schema.jsonSchema,\n            preparedQuery\n        );\n\n        const useSortComparator: DeterministicSortComparator<RxDocType> = (docA: RxDocType, docB: RxDocType) => {\n            const sortComparatorData = {\n                docA,\n                docB,\n                rxQuery\n            };\n            return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\n        };\n\n        /**\n         * Create a custom query matcher\n         * that uses the hooks to ensure\n         * we send for example compressed documents to match compressed queries.\n         */\n        const queryMatcher = collection.database.storage.statics.getQueryMatcher(\n            collection.schema.jsonSchema,\n            preparedQuery\n        );\n        const useQueryMatcher: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            const queryMatcherData = {\n                doc,\n                rxQuery\n            };\n            return queryMatcher(queryMatcherData.doc);\n        };\n\n\n        const ret: QueryParams<any> = {\n            primaryKey: rxQuery.collection.schema.primaryPath as any,\n            skip: normalizedMangoQuery.skip,\n            limit: normalizedMangoQuery.limit,\n            sortFields: getSortFieldsOfQuery(primaryKey, normalizedMangoQuery) as string[],\n            sortComparator: useSortComparator,\n            queryMatcher: useQueryMatcher\n        };\n        RXQUERY_QUERY_PARAMS_CACHE.set(rxQuery, ret);\n        return ret;\n    } else {\n        return RXQUERY_QUERY_PARAMS_CACHE.get(rxQuery) as QueryParams<RxDocType>;\n    }\n}\n\n\nexport function calculateNewResults<RxDocumentType>(\n    rxQuery: RxQuery<RxDocumentType>,\n    rxChangeEvents: RxChangeEvent<RxDocumentType>[]\n): EventReduceResult<RxDocumentType> {\n    if (!rxQuery.collection.database.eventReduce) {\n        return {\n            runFullQueryAgain: true\n        };\n    }\n    const queryParams = getQueryParams(rxQuery);\n    const previousResults: RxDocumentType[] = ensureNotFalsy(rxQuery._result).docsData.slice(0);\n    const previousResultsMap: Map<string, RxDocumentType> = ensureNotFalsy(rxQuery._result).docsDataMap;\n    let changed: boolean = false;\n\n    const foundNonOptimizeable = rxChangeEvents.find(cE => {\n        const eventReduceEvent = rxChangeEventToEventReduceChangeEvent(cE);\n\n        const stateResolveFunctionInput: StateResolveFunctionInput<RxDocumentType> = {\n            queryParams,\n            changeEvent: eventReduceEvent,\n            previousResults,\n            keyDocumentMap: previousResultsMap\n        }\n\n        const actionName: ActionName = calculateActionName(stateResolveFunctionInput);\n        if (actionName === 'runFullQueryAgain') {\n            return true;\n        } else if (actionName !== 'doNothing') {\n            changed = true;\n            runAction(\n                actionName,\n                queryParams,\n                eventReduceEvent,\n                previousResults,\n                previousResultsMap\n            );\n            return false;\n        }\n    });\n    if (foundNonOptimizeable) {\n        return {\n            runFullQueryAgain: true,\n        };\n    } else {\n        return {\n            runFullQueryAgain: false,\n            changed,\n            newResults: previousResults\n        };\n    }\n}\n"],"mappings":"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"}