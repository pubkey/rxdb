{"version":3,"file":"doc-cache.js","names":["_utils","require","_overwritable","_rxChangeEvent","DocumentCache","exports","primaryPath","changes$","documentCreator","cacheItemByDocId","Map","registry","FinalizationRegistry","docMeta","docId","cacheItem","get","documentByRevisionHeight","delete","revisionHeight","size","undefined","subscribe","changeEvent","documentId","documentData","getDocumentDataOfRxChangeEvent","latestDoc","_proto","prototype","getCachedRxDocument","docData","getHeightOfRevision","_rev","getFromMapOrCreate","getNewCacheItem","cachedRxDocumentWeakRef","cachedRxDocument","deref","overwritable","deepFreezeWhenDevMode","set","createWeakRefWithFallback","register","getLatestDocumentData","getFromMapOrThrow","getLatestDocumentDataIfExists","HAS_WEAK_REF","WeakRef","obj"],"sources":["../../src/doc-cache.ts"],"sourcesContent":["import type {\n    RxChangeEvent,\n    RxDocument,\n    RxDocumentData\n} from './types';\nimport {\n    getFromMapOrCreate,\n    getFromMapOrThrow,\n    getHeightOfRevision\n} from './plugins/utils';\nimport {\n    overwritable\n} from './overwritable';\nimport { getDocumentDataOfRxChangeEvent } from './rx-change-event';\nimport { Observable } from 'rxjs';\n\ndeclare type CacheItem<RxDocType, OrmMethods> = {\n    /**\n     * Store the different document states of time\n     * based on their revision height.\n     * We store WeakRefs so that we can later clean up\n     * document states that are no longer needed.\n     */\n    documentByRevisionHeight: Map<number, WeakRef<RxDocument<RxDocType, OrmMethods>>>;\n\n    /**\n     * Store the latest known document state.\n     * As long as any state of the document is in the cache,\n     * we observe the changestream and update the latestDoc accordingly.\n     * This makes it easier to optimize performance on other parts\n     * because for each known document we can always get the current state\n     * in the storage.\n     * Also it makes it possible to call RxDocument.latest() in a non-async way\n     * to retrieve the latest document state or to observe$ some property.\n     *\n     * To not prevent the whole cacheItem from being garbage collected,\n     * we store only the document data here, but not the RxDocument.\n     */\n    latestDoc: RxDocumentData<RxDocType>;\n};\n\n\n/**\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n */\ndeclare type FinalizationRegistryValue = {\n    docId: string;\n    revisionHeight: number;\n};\n\n/**\n * The DocumentCache stores RxDocument objects\n * by their primary key and revision.\n * This is useful on client side applications where\n * it is not known how much memory can be used, so\n * we de-duplicate RxDocument states to save memory.\n * To not fill up the memory with old document states, the DocumentCache\n * only contains weak references to the RxDocuments themself.\n * @link https://caniuse.com/?search=weakref\n */\nexport class DocumentCache<RxDocType, OrmMethods> {\n    public cacheItemByDocId = new Map<string, CacheItem<RxDocType, OrmMethods>>();\n\n    /**\n     * Some JavaScript runtimes like QuickJS,\n     * so not have a FinalizationRegistry or WeakRef.\n     * Therefore we need a workaround which might waste a lot of memory,\n     * but at least works.\n     */\n    private registry?: FinalizationRegistry<FinalizationRegistryValue> = typeof FinalizationRegistry === 'function' ?\n        new FinalizationRegistry<FinalizationRegistryValue>(docMeta => {\n            const docId = docMeta.docId;\n            const cacheItem = this.cacheItemByDocId.get(docId);\n            if (cacheItem) {\n                cacheItem.documentByRevisionHeight.delete(docMeta.revisionHeight);\n                if (cacheItem.documentByRevisionHeight.size === 0) {\n                    /**\n                     * No state of the document is cached anymore,\n                     * so we can clean up.\n                     */\n                    this.cacheItemByDocId.delete(docId);\n                }\n            }\n        }) :\n        undefined;\n\n    constructor(\n        public readonly primaryPath: string,\n        public readonly changes$: Observable<RxChangeEvent<RxDocType>>,\n        /**\n         * A method that can create a RxDocument by the given document data.\n         */\n        public documentCreator: (docData: RxDocumentData<RxDocType>) => RxDocument<RxDocType, OrmMethods>\n    ) {\n        changes$.subscribe(changeEvent => {\n            const docId = changeEvent.documentId;\n            const cacheItem = this.cacheItemByDocId.get(docId);\n            if (cacheItem) {\n                const documentData = getDocumentDataOfRxChangeEvent(changeEvent);\n                cacheItem.latestDoc = documentData;\n            }\n        });\n    }\n\n    /**\n     * Get the RxDocument from the cache\n     * and create a new one if not exits before.\n     */\n    public getCachedRxDocument(docData: RxDocumentData<RxDocType>): RxDocument<RxDocType, OrmMethods> {\n        const docId: string = (docData as any)[this.primaryPath];\n        const revisionHeight = getHeightOfRevision(docData._rev);\n        const cacheItem = getFromMapOrCreate<string, CacheItem<RxDocType, OrmMethods>>(\n            this.cacheItemByDocId,\n            docId,\n            () => getNewCacheItem<RxDocType, OrmMethods>(docData)\n        );\n\n        const cachedRxDocumentWeakRef: WeakRef<RxDocument<RxDocType, OrmMethods>> | undefined = cacheItem.documentByRevisionHeight.get(revisionHeight);\n        let cachedRxDocument = cachedRxDocumentWeakRef ? cachedRxDocumentWeakRef.deref() : undefined;\n        if (!cachedRxDocument) {\n            docData = overwritable.deepFreezeWhenDevMode(docData) as any;\n            cachedRxDocument = this.documentCreator(docData) as RxDocument<RxDocType, OrmMethods>;\n            cacheItem.documentByRevisionHeight.set(revisionHeight, createWeakRefWithFallback(cachedRxDocument));\n\n            if (this.registry) {\n                this.registry.register(cachedRxDocument, {\n                    docId,\n                    revisionHeight\n                });\n            }\n        }\n        return cachedRxDocument;\n    }\n\n    /**\n     * Throws if not exists\n     */\n    public getLatestDocumentData(docId: string): RxDocumentData<RxDocType> {\n        const cacheItem = getFromMapOrThrow(this.cacheItemByDocId, docId);\n        return cacheItem.latestDoc;\n    }\n\n    public getLatestDocumentDataIfExists(docId: string): RxDocumentData<RxDocType> | undefined {\n        const cacheItem = this.cacheItemByDocId.get(docId);\n        if (cacheItem) {\n            return cacheItem.latestDoc;\n        }\n    }\n}\n\n\nfunction getNewCacheItem<RxDocType, OrmMethods>(docData: RxDocumentData<RxDocType>): CacheItem<RxDocType, OrmMethods> {\n    return {\n        documentByRevisionHeight: new Map(),\n        latestDoc: docData\n    };\n}\n\n\n/**\n * Fallback for JavaScript runtimes that do not support WeakRef.\n * The fallback will keep the items in cache forever,\n * but at least works.\n */\nconst HAS_WEAK_REF = typeof WeakRef === 'function';\nfunction createWeakRefWithFallback<T extends object>(obj: T): WeakRef<T> {\n    if (HAS_WEAK_REF) {\n        return new WeakRef(obj) as any;\n    } else {\n        return {\n            deref() {\n                return obj;\n            }\n        } as any;\n    }\n}\n"],"mappings":"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"}