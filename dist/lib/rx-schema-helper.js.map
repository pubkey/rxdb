{"version":3,"file":"rx-schema-helper.js","names":["getPseudoSchemaForVersion","version","primaryKey","pseudoSchema","fillWithDefaultSettings","type","properties","maxLength","required","getSchemaByObjectPath","rxJsonSchema","path","usePath","replace","trimDots","ret","objectPath","get","fillPrimaryKey","primaryPath","jsonSchema","documentData","cloned","flatClone","newPrimary","getComposedPrimaryKeyOfDocumentData","existingPrimary","newRxError","args","schema","getPrimaryFieldOfPrimaryKey","key","compositePrimary","fields","map","field","value","join","separator","normalizeRxJsonSchema","normalizedSchema","sortObject","clone","indexes","Array","from","schemaObj","additionalProperties","hasOwnProperty","keyCompression","slice","encrypted","_rev","minLength","_attachments","_deleted","_meta","RX_META_SCHEMA","push","finalFields","getFinalFields","concat","filter","includes","elem","pos","arr","indexOf","index","arIndex","isMaybeReadonlyArray","modifiedIndex","lwt","minimum","RX_META_LWT_MINIMUM","maximum","multipleOf","Object","keys","forEach","DEFAULT_CHECKPOINT_SCHEMA","id"],"sources":["../../src/rx-schema-helper.ts"],"sourcesContent":["import objectPath from 'object-path';\nimport { newRxError } from './rx-error';\nimport type {\n    CompositePrimaryKey,\n    DeepReadonly,\n    JsonSchema,\n    PrimaryKey,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageDefaultCheckpoint,\n    StringKeys\n} from './types';\nimport { clone, flatClone, isMaybeReadonlyArray, RX_META_LWT_MINIMUM, sortObject, trimDots } from './util';\n\n/**\n * Helper function to create a valid RxJsonSchema\n * with a given version.\n */\nexport function getPseudoSchemaForVersion<T = any>(\n    version: number,\n    primaryKey: StringKeys<T>\n): RxJsonSchema<RxDocumentData<T>> {\n    const pseudoSchema: RxJsonSchema<RxDocumentData<T>> = fillWithDefaultSettings({\n        version,\n        type: 'object',\n        primaryKey: primaryKey as any,\n        properties: {\n            [primaryKey]: {\n                type: 'string',\n                maxLength: 100\n            }\n        } as any,\n        required: [primaryKey]\n    });\n    return pseudoSchema;\n}\n\n/**\n * Returns the sub-schema for a given path\n */\nexport function getSchemaByObjectPath<T = any>(\n    rxJsonSchema: RxJsonSchema<T>,\n    path: keyof T | string\n): JsonSchema {\n    let usePath: string = path as string;\n    usePath = usePath.replace(/\\./g, '.properties.');\n    usePath = 'properties.' + usePath;\n    usePath = trimDots(usePath);\n\n    const ret = objectPath.get(rxJsonSchema, usePath);\n    return ret;\n}\n\nexport function fillPrimaryKey<T>(\n    primaryPath: keyof T,\n    jsonSchema: RxJsonSchema<T>,\n    documentData: RxDocumentData<T>\n): RxDocumentData<T> {\n    const cloned = flatClone(documentData);\n    const newPrimary = getComposedPrimaryKeyOfDocumentData<T>(\n        jsonSchema,\n        documentData\n    );\n    const existingPrimary: string | undefined = documentData[primaryPath] as any;\n    if (\n        existingPrimary &&\n        existingPrimary !== newPrimary\n    ) {\n        throw newRxError(\n            'DOC19',\n            {\n                args: {\n                    documentData,\n                    existingPrimary,\n                    newPrimary,\n                },\n                schema: jsonSchema\n            });\n    }\n\n    (cloned as any)[primaryPath] = newPrimary;\n    return cloned;\n}\n\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\n    primaryKey: PrimaryKey<RxDocType>\n): StringKeys<RxDocType> {\n    if (typeof primaryKey === 'string') {\n        return primaryKey as any;\n    } else {\n        return (primaryKey as CompositePrimaryKey<RxDocType>).key;\n    }\n}\n\n/**\n * Returns the composed primaryKey of a document by its data.\n */\nexport function getComposedPrimaryKeyOfDocumentData<RxDocType>(\n    jsonSchema: RxJsonSchema<RxDocType> | RxJsonSchema<RxDocumentData<RxDocType>>,\n    documentData: Partial<RxDocType>\n): string {\n    if (typeof jsonSchema.primaryKey === 'string') {\n        return (documentData as any)[jsonSchema.primaryKey];\n    }\n\n    const compositePrimary: CompositePrimaryKey<RxDocType> = jsonSchema.primaryKey as any;\n    return compositePrimary.fields.map(field => {\n        const value = objectPath.get(documentData as any, field as string);\n        if (typeof value === 'undefined') {\n            throw newRxError('DOC18', { args: { field, documentData } });\n        }\n        return value;\n    }).join(compositePrimary.separator);\n}\n\n\n/**\n * Normalize the RxJsonSchema.\n * We need this to ensure everything is set up properly\n * and we have the same hash on schemas that represent the same value but\n * have different json.\n * \n * - Orders the schemas attributes by alphabetical order\n * - Adds the primaryKey to all indexes that do not contain the primaryKey\n * - We need this for determinstic sort order on all queries, which is required for event-reduce to work.\n *\n * @return RxJsonSchema - ordered and filled\n */\nexport function normalizeRxJsonSchema<T>(jsonSchema: RxJsonSchema<T>): RxJsonSchema<T> {\n    // TODO do we need the deep clone() here?\n    const normalizedSchema: RxJsonSchema<T> = sortObject(clone(jsonSchema));\n\n    // indexes must NOT be sorted because sort order is important here.\n    if (jsonSchema.indexes) {\n        normalizedSchema.indexes = Array.from(jsonSchema.indexes);\n    }\n\n    // primaryKey.fields must NOT be sorted because sort order is important here.\n    if (\n        typeof normalizedSchema.primaryKey === 'object' &&\n        typeof jsonSchema.primaryKey === 'object'\n    ) {\n        normalizedSchema.primaryKey.fields = jsonSchema.primaryKey.fields;\n    }\n\n\n\n    return normalizedSchema;\n}\n\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\nexport function fillWithDefaultSettings<T = any>(\n    schemaObj: RxJsonSchema<T>\n): RxJsonSchema<RxDocumentData<T>> {\n    schemaObj = flatClone(schemaObj);\n    const primaryPath: string = getPrimaryFieldOfPrimaryKey(schemaObj.primaryKey);\n    schemaObj.properties = flatClone(schemaObj.properties);\n\n    // additionalProperties is always false\n    schemaObj.additionalProperties = false;\n\n    // fill with key-compression-state ()\n    if (!schemaObj.hasOwnProperty('keyCompression')) {\n        schemaObj.keyCompression = false;\n    }\n\n    // indexes must be array\n    schemaObj.indexes = schemaObj.indexes ? schemaObj.indexes.slice(0) : [];\n\n    // required must be array\n    schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n\n    // encrypted must be array\n    schemaObj.encrypted = schemaObj.encrypted ? schemaObj.encrypted.slice(0) : [];\n\n    /**\n     * TODO we should not need to add the internal fields to the schema.\n     * Better remove the fields before validation.\n     */\n    // add _rev\n    (schemaObj.properties as any)._rev = {\n        type: 'string',\n        minLength: 1\n    };\n\n    // add attachments\n    (schemaObj.properties as any)._attachments = {\n        type: 'object'\n    };\n\n    // add deleted flag\n    (schemaObj.properties as any)._deleted = {\n        type: 'boolean'\n    };\n\n    // add meta property\n    (schemaObj.properties as any)._meta = RX_META_SCHEMA;\n\n    /**\n     * meta fields are all required\n     */\n    schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n    (schemaObj.required as string[]).push('_deleted');\n    (schemaObj.required as string[]).push('_rev');\n    (schemaObj.required as string[]).push('_meta');\n    (schemaObj.required as string[]).push('_attachments');\n\n    // final fields are always required\n    const finalFields = getFinalFields(schemaObj);\n    schemaObj.required = schemaObj.required\n        .concat(finalFields as any)\n        .filter((field: string) => !field.includes('.'))\n        .filter((elem: any, pos: any, arr: any) => arr.indexOf(elem) === pos); // unique;\n\n    // version is 0 by default\n    schemaObj.version = schemaObj.version || 0;\n\n    /**\n     * Append primary key to indexes that do not contain the primaryKey.\n     * All indexes must have the primaryKey to ensure a deterministic sort order.\n     */\n    if (schemaObj.indexes) {\n        schemaObj.indexes = schemaObj.indexes.map(index => {\n            const arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n            if (!arIndex.includes(primaryPath)) {\n                const modifiedIndex = arIndex.slice(0);\n                modifiedIndex.push(primaryPath);\n                return modifiedIndex;\n            }\n            return arIndex;\n        });\n    }\n\n    return schemaObj as any;\n}\n\n\nexport const RX_META_SCHEMA: JsonSchema = {\n    type: 'object',\n    properties: {\n        /**\n         * The last-write time.\n         * Unix time in milliseconds.\n         */\n        lwt: {\n            type: 'number',\n            /**\n             * We use 1 as minimum so that the value is never falsy.\n             */\n            minimum: RX_META_LWT_MINIMUM,\n            maximum: 1000000000000000,\n            multipleOf: 0.01\n        }\n    },\n    /**\n     * Additional properties are allowed\n     * and can be used by plugins to set various flags.\n     */\n    additionalProperties: true as any,\n    required: [\n        'lwt'\n    ]\n}\n\n\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\nexport function getFinalFields<T = any>(\n    jsonSchema: RxJsonSchema<T>\n): string[] {\n    const ret = Object.keys(jsonSchema.properties)\n        .filter(key => (jsonSchema as any).properties[key].final);\n\n    // primary is also final\n    const primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n    ret.push(primaryPath);\n\n    // fields of composite primary are final\n    if (typeof jsonSchema.primaryKey !== 'string') {\n        (jsonSchema.primaryKey as CompositePrimaryKey<T>).fields\n            .forEach(field => ret.push(field as string));\n    }\n\n    return ret;\n}\n\n\nexport const DEFAULT_CHECKPOINT_SCHEMA: DeepReadonly<JsonSchema<RxStorageDefaultCheckpoint>> = {\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string'\n        },\n        lwt: {\n            type: 'number'\n        }\n    },\n    required: [\n        'id',\n        'lwt'\n    ],\n    additionalProperties: false\n} as const;\n"],"mappings":"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"}