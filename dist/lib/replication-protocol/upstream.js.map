{"version":3,"file":"upstream.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","startReplicationUpstream","upstreamInitialSync","stats","up","events","canceled","getValue","checkpointQueue","getLastCheckpointDoc","lastCheckpoint","Promise","all","promises","resolvedPromises","hadConflicts","find","r","firstSyncDone","next","initialSyncStartTime","timer","input","forkInstance","getChangedDocumentsSince","pushBatchSize","upResult","documents","length","stackCheckpoints","checkpoint","push","persistToMaster","ensureNotFalsy","replicationHandler","streamQueue","processTasks","openTasks","sub","changeStream","pipe","filter","eventBulk","context","downstreamBulkWriteFlag","subscribe","forkChangeStreamEmit","task","time","waitBeforePersist","firstValueFrom","unsubscribe","active","docs","taskWithTime","shift","concat","map","change","operation","ret","flatClone","previous","_deleted","doc","promise","PROMISE_RESOLVE_FALSE","persistenceQueue","nonPersistedFromMaster","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","getAssumedMasterState","assumedMasterState","writeRowsToMaster","writeRowsToMasterIds","writeRowsToMeta","forkStateById","isEqual","assumedMasterDoc","undefined","newDocumentState","getMetaWriteRow","metaDocument","fullDocData","writeDocToDocState","isResolvedConflict","_rev","conflictHandler","realMasterState","masterWrite","values","masterWriteResult","setCheckpoint","hadConflictWrites","conflictIds","size","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","conflictsById","writeToMasterRow","resolveConflictError","resolved","resolvedConflicts","output","document","resolvedDoc","persistToMasterConflictWrites","bulkWrite","forkWriteResult","useMetaWrites","success","metaInstance","Set","conflictDoc","id","add","useWriteRowsToMeta","has","processed","unhandledError","error"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    ById,\n    EventBulk,\n    RxDocumentData,\n    RxReplicationWriteToMasterRow,\n    RxStorageChangeEvent,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport {\n    ensureNotFalsy,\n    flatClone,\n    PROMISE_RESOLVE_FALSE\n} from '../util';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { resolveConflictError } from './conflicts';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all document changes from the fork to the master.\n * The upstream runs on two modes:\n * - For inital replication, a checkpoint-iteration is used\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\n *   In contrast to the master, the fork can be assumed to never loose connection,\n *   so we do not have to prepare for missed out events.\n */\nexport function startReplicationUpstream<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    const replicationHandler = state.input.replicationHandler;\n    state.streamQueue.up = state.streamQueue.up.then(() => {\n        return upstreamInitialSync().then(() => {\n            processTasks();\n        });\n    });\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n    let initialSyncStartTime = -1;\n\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n    type TaskWithTime = {\n        task: Task;\n        time: number;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    const sub = state.input.forkInstance.changeStream()\n        .pipe(\n            filter(eventBulk => eventBulk.context !== state.downstreamBulkWriteFlag)\n        ).subscribe(eventBulk => {\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\n            openTasks.push({\n                task: eventBulk,\n                time: timer++\n            });\n            if (state.input.waitBeforePersist) {\n                return state.input.waitBeforePersist()\n                    .then(() => processTasks());\n            } else {\n                return processTasks();\n            }\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    async function upstreamInitialSync() {\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            initialSyncStartTime = timer++;\n            const upResult = await state.input.forkInstance.getChangedDocumentsSince(\n                state.input.pushBatchSize,\n                lastCheckpoint\n            );\n            if (upResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\n\n            promises.push(\n                persistToMaster(\n                    upResult.documents,\n                    ensureNotFalsy(lastCheckpoint)\n                )\n            );\n        }\n\n        /**\n         * If we had conflicts during the inital sync,\n         * it means that we likely have new writes to the fork\n         * and so we have to run the initial sync again to upastream these new writes.\n         */\n        const resolvedPromises = await Promise.all(promises);\n        const hadConflicts = resolvedPromises.find(r => !!r);\n        if (hadConflicts) {\n            await upstreamInitialSync();\n        } else if (!state.firstSyncDone.up.getValue()) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n\n\n    /**\n     * Takes all open tasks an processes them at once.\n     */\n    function processTasks() {\n        if (\n            state.events.canceled.getValue() ||\n            openTasks.length === 0\n        ) {\n            state.events.active.up.next(false);\n            return;\n        }\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\n        state.events.active.up.next(true);\n        state.streamQueue.up = state.streamQueue.up.then(() => {\n            /**\n             * Merge/filter all open tasks\n             */\n            let docs: RxDocumentData<RxDocType>[] = [];\n            let checkpoint: CheckpointType = {} as any;\n            while (openTasks.length > 0) {\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\n                /**\n                 * If the task came in before the last time the inital sync fetching\n                 * has run, we can ignore the task because the inital sync already processed\n                 * these documents.\n                 */\n                if (taskWithTime.time < initialSyncStartTime) {\n                    continue;\n                }\n\n                docs = docs.concat(\n                    taskWithTime.task.events.map(r => {\n                        if (r.change.operation === 'DELETE') {\n                            const ret: any = flatClone(r.change.previous);\n                            ret._deleted = true;\n                            return ret;\n                        } else {\n                            return r.change.doc;\n                        }\n                    })\n                );\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\n            }\n\n            const promise = docs.length === 0 ? PROMISE_RESOLVE_FALSE : persistToMaster(\n                docs,\n                checkpoint\n            );\n            return promise.then(() => {\n                if (openTasks.length === 0) {\n                    state.events.active.up.next(false);\n                } else {\n                    processTasks();\n                }\n            });\n        });\n    }\n\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<RxDocumentData<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    /**\n     * Returns true if had conflicts,\n     * false if not.\n     */\n    function persistToMaster(\n        docs: RxDocumentData<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<boolean> {\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistend list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(upDocsById);\n            if (docIds.length === 0) {\n                return false;\n            }\n\n            const assumedMasterState = await getAssumedMasterState(\n                state,\n                docIds\n            );\n\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            const writeRowsToMasterIds: string[] = [];\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\n                    forkStateById[docId] = fullDocData;\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData);\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n                        assumedMasterDoc &&\n                        // if the isResolvedConflict is correct, we do not have to compare the documents.\n                        assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev &&\n                        (await state.input.conflictHandler({\n                            realMasterState: assumedMasterDoc.docData,\n                            newDocumentState: docData\n                        }, 'upstream-check-if-equal')).isEqual\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMasterIds.push(docId);\n\n                    writeRowsToMaster[docId] = {\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        newDocumentState: docData\n                    };\n                    writeRowsToMeta[docId] = getMetaWriteRow(\n                        state,\n                        docData,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                })\n            );\n\n            if (writeRowsToMasterIds.length === 0) {\n                return false;\n            }\n\n            const masterWriteResult = await replicationHandler.masterWrite(Object.values(writeRowsToMaster));\n            const conflictIds: Set<string> = new Set();\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\n            masterWriteResult.forEach(conflictDoc => {\n                const id = (conflictDoc as any)[state.primaryPath];\n                conflictIds.add(id);\n                conflictsById[id] = conflictDoc;\n            });\n\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n\n            writeRowsToMasterIds.forEach(docId => {\n                if (!conflictIds.has(docId)) {\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                }\n            });\n\n            if (useWriteRowsToMeta.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    useWriteRowsToMeta,\n                    'replication-up-write-meta'\n                );\n                // TODO what happens when we have conflicts here?\n            }\n\n            /**\n             * Resolve conflicts by writing a new document\n             * state to the fork instance and the 'real' master state\n             * to the meta instance.\n             * Non-409 errors will be detected by resolveConflictError()\n             */\n            let hadConflictWrites = false;\n            if (conflictIds.size > 0) {\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n                await Promise.all(\n                    Object\n                        .entries(conflictsById)\n                        .map(([docId, realMasterState]) => {\n                            const writeToMasterRow = writeRowsToMaster[docId];\n                            const input = {\n                                newDocumentState: writeToMasterRow.newDocumentState,\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\n                                realMasterState\n                            };\n                            return resolveConflictError(\n                                state,\n                                input,\n                                forkStateById[docId]\n                            ).then(resolved => {\n                                if (resolved) {\n                                    state.events.resolvedConflicts.next({\n                                        input,\n                                        output: resolved.output\n                                    });\n                                    conflictWriteFork.push({\n                                        previous: forkStateById[docId],\n                                        document: resolved.resolvedDoc\n                                    });\n                                    const assumedMasterDoc = assumedMasterState[docId];\n                                    conflictWriteMeta[docId] = getMetaWriteRow(\n                                        state,\n                                        ensureNotFalsy(realMasterState),\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\n                                        resolved.resolvedDoc._rev\n                                    );\n                                }\n                            });\n                        })\n                );\n\n                if (conflictWriteFork.length > 0) {\n                    hadConflictWrites = true;\n\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                        conflictWriteFork,\n                        'replication-up-write-conflict'\n                    );\n                    /**\n                     * Errors in the forkWriteResult must not be handled\n                     * because they have been caused by a write to the forkInstance\n                     * in between which will anyway trigger a new upstream cycle\n                     * that will then resolved the conflict again.\n                     */\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n                    Object\n                        .keys(forkWriteResult.success)\n                        .forEach((docId) => {\n                            useMetaWrites.push(\n                                conflictWriteMeta[docId]\n                            );\n                        });\n                    if (useMetaWrites.length > 0) {\n                        await state.input.metaInstance.bulkWrite(\n                            useMetaWrites,\n                            'replication-up-write-conflict-meta'\n                        );\n                    }\n                    // TODO what to do with conflicts while writing to the metaInstance?\n                }\n            }\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parrallel checkpoint writes,\n             * we have to use a queue.\n             */\n            state.checkpointQueue = state.checkpointQueue.then(() => setCheckpoint(\n                state,\n                'up',\n                useCheckpoint\n            ));\n\n            return hadConflictWrites;\n        }).catch(unhandledError => {\n            state.events.error.next(unhandledError);\n            return false;\n        });\n\n        return persistenceQueue;\n    }\n}\n\n"],"mappings":"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"}