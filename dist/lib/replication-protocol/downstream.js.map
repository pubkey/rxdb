{"version":3,"file":"downstream.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","startReplicationDownstream","downstreamResyncOnce","stats","down","events","canceled","getValue","checkpointQueue","getLastCheckpointDoc","lastCheckpoint","Promise","all","promises","firstSyncDone","next","lastTimeMasterChangesRequested","timer","replicationHandler","masterChangesSince","input","pullBatchSize","downResult","documents","length","stackCheckpoints","checkpoint","push","persistFromMaster","openTasks","addNewTask","task","taskWithTime","time","streamQueue","useTasks","active","ensureNotFalsy","shift","downstreamProcessChanges","sub","masterChangeStream$","subscribe","masterChangeStreamEmit","firstValueFrom","pipe","filter","unsubscribe","tasks","docsOfAllTasks","forEach","Error","concat","persistenceQueue","PROMISE_RESOLVE_VOID","nonPersistedFromMaster","docs","docData","docId","primaryPath","downDocsById","useCheckpoint","docIds","Object","keys","writeRowsToFork","writeRowsToForkById","writeRowsToMeta","useMetaWriteRows","forkInstance","findDocumentsById","getAssumedMasterState","currentForkState","assumedMasterState","map","forkStateFullDoc","forkStateDocData","writeDocToDocState","undefined","masterState","assumedMaster","metaDocument","isResolvedConflict","_rev","isAssumedMasterEqualToForkStatePromise","PROMISE_RESOLVE_FALSE","conflictHandler","realMasterState","newDocumentState","r","isEqual","isAssumedMasterEqualToForkState","areStatesExactlyEqualPromise","areStatesExactlyEqual","getMetaWriteRow","newForkState","assign","_meta","flatClone","_attachments","getDefaultRevision","getDefaultRxDocumentMeta","lwt","now","createRevision","hashFunction","forkWriteRow","previous","document","bulkWrite","downstreamBulkWriteFlag","forkWriteResult","success","processed","metaInstance","setCheckpoint","unhandledError","error"],"sources":["../../../src/replication-protocol/downstream.ts"],"sourcesContent":["import {\n    firstValueFrom,\n    filter\n} from 'rxjs';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxStorageInstanceReplicationState,\n    BulkWriteRow,\n    BulkWriteRowById,\n    RxStorageReplicationMeta,\n    RxDocumentData,\n    ById,\n    WithDeleted,\n    DocumentsWithCheckpoint\n} from '../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from '../util';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all documents from the master to the fork.\n * The downstream has two operation modes\n * - Sync by iterating over the checkpoints via downstreamResyncOnce()\n * - Sync by listening to the changestream via downstreamProcessChanges()\n * We need this to be able to do initial syncs\n * and still can have fast event based sync when the client is not offline.\n */\nexport function startReplicationDownstream<RxDocType, CheckpointType = any>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    const replicationHandler = state.input.replicationHandler;\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n\n\n    type Task = DocumentsWithCheckpoint<RxDocType, any> | 'RESYNC';\n    type TaskWithTime = {\n        time: number;\n        task: Task;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    function addNewTask(task: Task): void {\n        state.stats.down.addNewTask = state.stats.down.addNewTask + 1;\n        const taskWithTime = {\n            time: timer++,\n            task\n        };\n        openTasks.push(taskWithTime);\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => {\n                const useTasks: Task[] = [];\n                while (openTasks.length > 0) {\n                    state.events.active.down.next(true);\n                    const taskWithTime = ensureNotFalsy(openTasks.shift());\n\n                    /**\n                     * If the task came in before the last time we started the pull \n                     * from the master, then we can drop the task.\n                     */\n                    if (taskWithTime.time < lastTimeMasterChangesRequested) {\n                        continue;\n                    }\n\n                    if (taskWithTime.task === 'RESYNC') {\n                        if (useTasks.length === 0) {\n                            useTasks.push(taskWithTime.task);\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    useTasks.push(taskWithTime.task);\n                }\n\n                if (useTasks.length === 0) {\n                    state.events.active.down.next(false);\n                    return;\n                }\n\n                if (useTasks[0] === 'RESYNC') {\n                    return downstreamResyncOnce();\n                } else {\n                    return downstreamProcessChanges(useTasks);\n                }\n            });\n    }\n    addNewTask('RESYNC');\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     */\n    const sub = replicationHandler\n        .masterChangeStream$\n        .subscribe((task: Task) => {\n            state.stats.down.masterChangeStreamEmit = state.stats.down.masterChangeStreamEmit + 1;\n            addNewTask(task);\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let lastTimeMasterChangesRequested: number = -1;\n    async function downstreamResyncOnce() {\n        state.stats.down.downstreamResyncOnce = state.stats.down.downstreamResyncOnce + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'down'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            lastTimeMasterChangesRequested = timer++;\n            const downResult = await replicationHandler.masterChangesSince(\n                lastCheckpoint,\n                state.input.pullBatchSize\n            );\n\n            if (downResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, downResult.checkpoint]);\n            promises.push(\n                persistFromMaster(\n                    downResult.documents,\n                    lastCheckpoint\n                )\n            );\n        }\n        return Promise.all(promises)\n            .then(() => {\n                if (!state.firstSyncDone.down.getValue()) {\n                    state.firstSyncDone.down.next(true);\n                }\n            });\n    }\n\n\n    function downstreamProcessChanges(tasks: Task[]) {\n        state.stats.down.downstreamProcessChanges = state.stats.down.downstreamProcessChanges + 1;\n        let docsOfAllTasks: WithDeleted<RxDocType>[] = [];\n        let lastCheckpoint: CheckpointType | undefined = null as any;\n\n        tasks.forEach(task => {\n            if (task === 'RESYNC') {\n                throw new Error('SNH');\n            }\n            docsOfAllTasks = docsOfAllTasks.concat(task.documents);\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, task.checkpoint]);\n        });\n        return persistFromMaster(\n            docsOfAllTasks,\n            ensureNotFalsy(lastCheckpoint)\n        );\n    }\n\n\n    /**\n     * It can happen that the calls to masterChangesSince() or the changeStream()\n     * are way faster then how fast the documents can be persisted.\n     * Therefore we merge all incoming downResults into the nonPersistedFromMaster object\n     * and process them together if possible.\n     * This often bundles up single writes and improves performance\n     * by processing the documents in bulks.\n     */\n    let persistenceQueue = PROMISE_RESOLVE_VOID;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<WithDeleted<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    function persistFromMaster(\n        docs: WithDeleted<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<void> {\n        state.stats.down.persistFromMaster = state.stats.down.persistFromMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistend list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n\n        /**\n         * Run in the queue\n         * with all open documents from nonPersistedFromMaster.\n         */\n        persistenceQueue = persistenceQueue.then(() => {\n            const downDocsById: ById<WithDeleted<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(downDocsById);\n\n            if (\n                state.events.canceled.getValue() ||\n                docIds.length === 0\n            ) {\n                return PROMISE_RESOLVE_VOID;\n            }\n\n            const writeRowsToFork: BulkWriteRow<RxDocType>[] = [];\n            const writeRowsToForkById: ById<BulkWriteRow<RxDocType>> = {};\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const useMetaWriteRows: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n            return Promise.all([\n                state.input.forkInstance.findDocumentsById(docIds, true),\n                getAssumedMasterState(\n                    state,\n                    docIds\n                )\n            ]).then(([\n                currentForkState,\n                assumedMasterState\n            ]) => {\n                return Promise.all(\n                    docIds.map(async (docId) => {\n                        const forkStateFullDoc: RxDocumentData<RxDocType> | undefined = currentForkState[docId];\n                        const forkStateDocData: WithDeleted<RxDocType> | undefined = forkStateFullDoc ? writeDocToDocState(forkStateFullDoc) : undefined;\n                        const masterState = downDocsById[docId];\n                        const assumedMaster = assumedMasterState[docId];\n\n                        if (\n                            assumedMaster &&\n                            assumedMaster.metaDocument.isResolvedConflict === forkStateFullDoc._rev\n                        ) {\n                            /**\n                             * The current fork state represents a resolved conflict\n                             * that first must be send to the master in the upstream.\n                             * All conflicts are resolved by the upstream.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n\n                        const isAssumedMasterEqualToForkStatePromise = !assumedMaster || !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: assumedMaster.docData,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-0').then(r => r.isEqual);\n                        const isAssumedMasterEqualToForkState = await isAssumedMasterEqualToForkStatePromise;\n                        if (\n                            (\n                                forkStateFullDoc &&\n                                assumedMaster &&\n                                isAssumedMasterEqualToForkState === false\n                            ) ||\n                            (\n                                forkStateFullDoc && !assumedMaster\n                            )\n                        ) {\n                            /**\n                             * We have a non-upstream-replicated\n                             * local write to the fork.\n                             * This means we ignore the downstream of this document\n                             * because anyway the upstream will first resolve the conflict.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n\n                        const areStatesExactlyEqualPromise = !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: masterState,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-1').then(r => r.isEqual);\n                        const areStatesExactlyEqual = await areStatesExactlyEqualPromise;\n\n                        if (\n                            forkStateDocData &&\n                            areStatesExactlyEqual\n                        ) {\n                            /**\n                             * Document states are exactly equal.\n                             * This can happen when the replication is shut down\n                             * unexpected like when the user goes offline.\n                             * \n                             * Only when the assumedMaster is different from the forkState,\n                             * we have to patch the document in the meta instance.\n                             */\n                            if (\n                                !assumedMaster ||\n                                isAssumedMasterEqualToForkState === false\n                            ) {\n                                useMetaWriteRows.push(\n                                    getMetaWriteRow(\n                                        state,\n                                        forkStateDocData,\n                                        assumedMaster ? assumedMaster.metaDocument : undefined\n                                    )\n                                );\n                            }\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        /**\n                         * All other master states need to be written to the forkInstance\n                         * and metaInstance.\n                         */\n                        const newForkState = Object.assign(\n                            {},\n                            masterState,\n                            forkStateFullDoc ? {\n                                _meta: flatClone(forkStateFullDoc._meta),\n                                _attachments: {},\n                                _rev: getDefaultRevision()\n                            } : {\n                                _meta: getDefaultRxDocumentMeta(),\n                                _rev: getDefaultRevision(),\n                                _attachments: {}\n                            });\n                        newForkState._meta.lwt = now();\n                        newForkState._rev = (masterState as any)._rev ? (masterState as any)._rev : createRevision(\n                            state.input.hashFunction,\n                            newForkState,\n                            forkStateFullDoc\n                        );\n                        const forkWriteRow = {\n                            previous: forkStateFullDoc,\n                            document: newForkState\n                        };\n                        writeRowsToFork.push(forkWriteRow);\n                        writeRowsToForkById[docId] = forkWriteRow;\n                        writeRowsToMeta[docId] = getMetaWriteRow(\n                            state,\n                            masterState,\n                            assumedMaster ? assumedMaster.metaDocument : undefined\n                        );\n                    })\n                );\n            }).then(() => {\n                if (writeRowsToFork.length > 0) {\n                    return state.input.forkInstance.bulkWrite(\n                        writeRowsToFork,\n                        state.downstreamBulkWriteFlag\n                    ).then((forkWriteResult) => {\n                        Object.keys(forkWriteResult.success).forEach((docId) => {\n                            state.events.processed.down.next(writeRowsToForkById[docId]);\n                            useMetaWriteRows.push(writeRowsToMeta[docId]);\n                        });\n                    });\n                }\n            }).then(() => {\n                if (useMetaWriteRows.length > 0) {\n                    return state.input.metaInstance.bulkWrite(\n                        useMetaWriteRows,\n                        'replication-down-write-meta'\n                    );\n                }\n            }).then(() => {\n                /**\n                 * For better performance we do not await checkpoint writes,\n                 * but to ensure order on parallel checkpoint writes,\n                 * we have to use a queue.\n                 */\n                state.checkpointQueue = state.checkpointQueue.then(() => setCheckpoint(\n                    state,\n                    'down',\n                    useCheckpoint\n                ));\n            });\n        }).catch(unhandledError => state.events.error.next(unhandledError));\n        return persistenceQueue;\n    }\n}\n"],"mappings":";;;;;;AAAA;AAIA;AAWA;AAUA;AAIA;AACA;AASO,iBAAiBA,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAC3C,IAAI,CAACF,IAAI,CAACG,CAAC,EAAE;IACZ,IAAID,KAAK,iBAAiB,EAAE;MAC3B,IAAIA,KAAK,CAACC,CAAC,EAAE;QACZ,IAAIF,KAAK,GAAG,CAAC,EAAE;UACdA,KAAK,GAAGC,KAAK,CAACC,CAAC;QAChB;QACAD,KAAK,GAAGA,KAAK,CAACE,CAAC;MAChB,CAAC,MAAM;QACNF,KAAK,CAACG,CAAC,GAAG,QAAQC,IAAI,CAAC,IAAI,EAAEN,IAAI,EAAEC,KAAK,CAAC;QACzC;MACD;IACD;IACA,IAAIC,KAAK,IAAIA,KAAK,CAACK,IAAI,EAAE;MACxBL,KAAK,CAACK,IAAI,CAAC,QAAQD,IAAI,CAAC,IAAI,EAAEN,IAAI,EAAEC,KAAK,CAAC,EAAE,QAAQK,IAAI,CAAC,IAAI,EAAEN,IAAI,EAAE,CAAC,CAAC,CAAC;MACxE;IACD;IACAA,IAAI,CAACG,CAAC,GAAGF,KAAK;IACdD,IAAI,CAACI,CAAC,GAAGF,KAAK;IACd,IAAMM,QAAQ,GAAGR,IAAI,CAACK,CAAC;IACvB,IAAIG,QAAQ,EAAE;MACbA,QAAQ,CAACR,IAAI,CAAC;IACf;EACD;AACD;AA9DO,IAAM,QAAQ,aAAc,YAAW;EAC7C,iBAAiB,CAAC;EAClB,MAAMS,SAAS,CAACF,IAAI,GAAG,UAASG,WAAW,EAAEC,UAAU,EAAE;IACxD,IAAMC,MAAM,GAAG,WAAW;IAC1B,IAAMX,KAAK,GAAG,IAAI,CAACE,CAAC;IACpB,IAAIF,KAAK,EAAE;MACV,IAAMY,QAAQ,GAAGZ,KAAK,GAAG,CAAC,GAAGS,WAAW,GAAGC,UAAU;MACrD,IAAIE,QAAQ,EAAE;QACb,IAAI;UACH,QAAQD,MAAM,EAAE,CAAC,EAAEC,QAAQ,CAAC,IAAI,CAACT,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,OAAOU,CAAC,EAAE;UACX,QAAQF,MAAM,EAAE,CAAC,EAAEE,CAAC,CAAC;QACtB;QACA,OAAOF,MAAM;MACd,CAAC,MAAM;QACN,OAAO,IAAI;MACZ;IACD;IACA,IAAI,CAACP,CAAC,GAAG,UAASU,KAAK,EAAE;MACxB,IAAI;QACH,IAAMb,KAAK,GAAGa,KAAK,CAACX,CAAC;QACrB,IAAIW,KAAK,CAACZ,CAAC,GAAG,CAAC,EAAE;UAChB,QAAQS,MAAM,EAAE,CAAC,EAAEF,WAAW,GAAGA,WAAW,CAACR,KAAK,CAAC,GAAGA,KAAK,CAAC;QAC7D,CAAC,MAAM,IAAIS,UAAU,EAAE;UACtB,QAAQC,MAAM,EAAE,CAAC,EAAED,UAAU,CAACT,KAAK,CAAC,CAAC;QACtC,CAAC,MAAM;UACN,QAAQU,MAAM,EAAE,CAAC,EAAEV,KAAK,CAAC;QAC1B;MACD,CAAC,CAAC,OAAOY,CAAC,EAAE;QACX,QAAQF,MAAM,EAAE,CAAC,EAAEE,CAAC,CAAC;MACtB;IACD,CAAC;IACD,OAAOF,MAAM;EACd,CAAC;EACD;AACD,CAAC,EAAG;AA6BG,wBAAwBI,QAAQ,EAAE;EACxC,OAAOA,QAAQ,iBAAiB,IAAIA,QAAQ,CAACb,CAAC,GAAG,CAAC;AACnD;AA4LO,cAAcc,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAE;EACxC,IAAIC,KAAK;EACT,SAAS;IACR,IAAIC,cAAc,GAAGJ,IAAI,EAAE;IAC3B,IAAI,eAAeI,cAAc,CAAC,EAAE;MACnCA,cAAc,GAAGA,cAAc,CAACjB,CAAC;IAClC;IACA,IAAI,CAACiB,cAAc,EAAE;MACpB,OAAOT,MAAM;IACd;IACA,IAAIS,cAAc,CAACd,IAAI,EAAE;MACxBa,KAAK,GAAG,CAAC;MACT;IACD;IACA,IAAIR,MAAM,GAAGO,IAAI,EAAE;IACnB,IAAIP,MAAM,IAAIA,MAAM,CAACL,IAAI,EAAE;MAC1B,IAAI,eAAeK,MAAM,CAAC,EAAE;QAC3BA,MAAM,GAAGA,MAAM,CAACT,CAAC;MAClB,CAAC,MAAM;QACNiB,KAAK,GAAG,CAAC;QACT;MACD;IACD;IACA,IAAIF,MAAM,EAAE;MACX,IAAII,WAAW,GAAGJ,MAAM,EAAE;MAC1B,IAAII,WAAW,IAAIA,WAAW,CAACf,IAAI,IAAI,CAAC,eAAee,WAAW,CAAC,EAAE;QACpEF,KAAK,GAAG,CAAC;QACT;MACD;IACD;EACD;EACA,IAAIpB,IAAI,GAAG,WAAW;EACtB,IAAIuB,MAAM,GAAG,QAAQjB,IAAI,CAAC,IAAI,EAAEN,IAAI,EAAE,CAAC,CAAC;EACxC,CAACoB,KAAK,KAAK,CAAC,GAAGC,cAAc,CAACd,IAAI,CAACiB,gBAAgB,CAAC,GAAGJ,KAAK,KAAK,CAAC,GAAGR,MAAM,CAACL,IAAI,CAACkB,gBAAgB,CAAC,GAAGH,WAAW,CAACf,IAAI,CAACmB,kBAAkB,CAAC,EAAEnB,IAAI,CAAC,KAAK,CAAC,EAAEgB,MAAM,CAAC;EAC/J,OAAOvB,IAAI;EACX,SAASyB,gBAAgB,CAACvB,KAAK,EAAE;IAChCU,MAAM,GAAGV,KAAK;IACd,GAAG;MACF,IAAIgB,MAAM,EAAE;QACXI,WAAW,GAAGJ,MAAM,EAAE;QACtB,IAAII,WAAW,IAAIA,WAAW,CAACf,IAAI,IAAI,CAAC,eAAee,WAAW,CAAC,EAAE;UACpEA,WAAW,CAACf,IAAI,CAACmB,kBAAkB,CAAC,CAACnB,IAAI,CAAC,KAAK,CAAC,EAAEgB,MAAM,CAAC;UACzD;QACD;MACD;MACAF,cAAc,GAAGJ,IAAI,EAAE;MACvB,IAAI,CAACI,cAAc,IAAK,eAAeA,cAAc,CAAC,IAAI,CAACA,cAAc,CAACjB,CAAE,EAAE;QAC7E,QAAQJ,IAAI,EAAE,CAAC,EAAEY,MAAM,CAAC;QACxB;MACD;MACA,IAAIS,cAAc,CAACd,IAAI,EAAE;QACxBc,cAAc,CAACd,IAAI,CAACiB,gBAAgB,CAAC,CAACjB,IAAI,CAAC,KAAK,CAAC,EAAEgB,MAAM,CAAC;QAC1D;MACD;MACAX,MAAM,GAAGO,IAAI,EAAE;MACf,IAAI,eAAeP,MAAM,CAAC,EAAE;QAC3BA,MAAM,GAAGA,MAAM,CAACR,CAAC;MAClB;IACD,CAAC,QAAQ,CAACQ,MAAM,IAAI,CAACA,MAAM,CAACL,IAAI;IAChCK,MAAM,CAACL,IAAI,CAACkB,gBAAgB,CAAC,CAAClB,IAAI,CAAC,KAAK,CAAC,EAAEgB,MAAM,CAAC;EACnD;EACA,SAASC,gBAAgB,CAACH,cAAc,EAAE;IACzC,IAAIA,cAAc,EAAE;MACnBT,MAAM,GAAGO,IAAI,EAAE;MACf,IAAIP,MAAM,IAAIA,MAAM,CAACL,IAAI,EAAE;QAC1BK,MAAM,CAACL,IAAI,CAACkB,gBAAgB,CAAC,CAAClB,IAAI,CAAC,KAAK,CAAC,EAAEgB,MAAM,CAAC;MACnD,CAAC,MAAM;QACNE,gBAAgB,CAACb,MAAM,CAAC;MACzB;IACD,CAAC,MAAM;MACN,QAAQZ,IAAI,EAAE,CAAC,EAAEY,MAAM,CAAC;IACzB;EACD;EACA,SAASc,kBAAkB,GAAG;IAC7B,IAAIL,cAAc,GAAGJ,IAAI,EAAE,EAAE;MAC5B,IAAII,cAAc,CAACd,IAAI,EAAE;QACxBc,cAAc,CAACd,IAAI,CAACiB,gBAAgB,CAAC,CAACjB,IAAI,CAAC,KAAK,CAAC,EAAEgB,MAAM,CAAC;MAC3D,CAAC,MAAM;QACNC,gBAAgB,CAACH,cAAc,CAAC;MACjC;IACD,CAAC,MAAM;MACN,QAAQrB,IAAI,EAAE,CAAC,EAAEY,MAAM,CAAC;IACzB;EACD;AACD;AAhTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASe,0BAA0B,CACtC1B,KAAmD,EACrD;EAAA,IAoFiB2B,oBAAoB,YAApBA,oBAAoB;IAAA,IAAG;MAClC3B,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAACF,oBAAoB,GAAG3B,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAACF,oBAAoB,GAAG,CAAC;MACjF,IAAI3B,KAAK,CAAC8B,MAAM,CAACC,QAAQ,CAACC,QAAQ,EAAE,EAAE;QAClC;MACJ;MAEAhC,KAAK,CAACiC,eAAe,GAAGjC,KAAK,CAACiC,eAAe,CAAC3B,IAAI,CAAC;QAAA,OAAM,IAAA4B,gCAAoB,EAAClC,KAAK,EAAE,MAAM,CAAC;MAAA,EAAC;MAAC,uBACnDA,KAAK,CAACiC,eAAe,iBAA5DE,cAA8B;QAAA;QAAA;UAsBlC,OAAOC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC,CACvBhC,IAAI,CAAC,YAAM;YACR,IAAI,CAACN,KAAK,CAACuC,aAAa,CAACV,IAAI,CAACG,QAAQ,EAAE,EAAE;cACtChC,KAAK,CAACuC,aAAa,CAACV,IAAI,CAACW,IAAI,CAAC,IAAI,CAAC;YACvC;UACJ,CAAC,CAAC;QAAC;QAzBP,IAAMF,QAAwB,GAAG,EAAE;QAAC;UAAA,sBAC7B,CAACtC,KAAK,CAAC8B,MAAM,CAACC,QAAQ,CAACC,QAAQ,EAAE;QAAA,uBAAE;UACtCS,8BAA8B,GAAGC,KAAK,EAAE;UAAC,uBAChBC,kBAAkB,CAACC,kBAAkB,CAC1DT,cAAc,EACdnC,KAAK,CAAC6C,KAAK,CAACC,aAAa,CAC5B,iBAHKC,UAAU;YAKhB,IAAIA,UAAU,CAACC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;cAAA;cAAA;YAEvC;YAEAd,cAAc,GAAG,IAAAe,iCAAgB,EAAC,CAACf,cAAc,EAAEY,UAAU,CAACI,UAAU,CAAC,CAAC;YAC1Eb,QAAQ,CAACc,IAAI,CACTC,iBAAiB,CACbN,UAAU,CAACC,SAAS,EACpBb,cAAc,CACjB,CACJ;UAAC;QACN,CAAC;QAAA;MAAA;IAOL,CAAC;MAAA;IAAA;EAAA;EAtHD,IAAMQ,kBAAkB,GAAG3C,KAAK,CAAC6C,KAAK,CAACF,kBAAkB;;EAEzD;EACA,IAAID,KAAK,GAAG,CAAC;EAQb,IAAMY,SAAyB,GAAG,EAAE;EAGpC,SAASC,UAAU,CAACC,IAAU,EAAQ;IAClCxD,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAAC0B,UAAU,GAAGvD,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAAC0B,UAAU,GAAG,CAAC;IAC7D,IAAME,YAAY,GAAG;MACjBC,IAAI,EAAEhB,KAAK,EAAE;MACbc,IAAI,EAAJA;IACJ,CAAC;IACDF,SAAS,CAACF,IAAI,CAACK,YAAY,CAAC;IAC5BzD,KAAK,CAAC2D,WAAW,CAAC9B,IAAI,GAAG7B,KAAK,CAAC2D,WAAW,CAAC9B,IAAI,CAC1CvB,IAAI,CAAC,YAAM;MACR,IAAMsD,QAAgB,GAAG,EAAE;MAC3B,OAAON,SAAS,CAACL,MAAM,GAAG,CAAC,EAAE;QACzBjD,KAAK,CAAC8B,MAAM,CAAC+B,MAAM,CAAChC,IAAI,CAACW,IAAI,CAAC,IAAI,CAAC;QACnC,IAAMiB,aAAY,GAAG,IAAAK,oBAAc,EAACR,SAAS,CAACS,KAAK,EAAE,CAAC;;QAEtD;AACpB;AACA;AACA;QACoB,IAAIN,aAAY,CAACC,IAAI,GAAGjB,8BAA8B,EAAE;UACpD;QACJ;QAEA,IAAIgB,aAAY,CAACD,IAAI,KAAK,QAAQ,EAAE;UAChC,IAAII,QAAQ,CAACX,MAAM,KAAK,CAAC,EAAE;YACvBW,QAAQ,CAACR,IAAI,CAACK,aAAY,CAACD,IAAI,CAAC;YAChC;UACJ,CAAC,MAAM;YACH;UACJ;QACJ;QAEAI,QAAQ,CAACR,IAAI,CAACK,aAAY,CAACD,IAAI,CAAC;MACpC;MAEA,IAAII,QAAQ,CAACX,MAAM,KAAK,CAAC,EAAE;QACvBjD,KAAK,CAAC8B,MAAM,CAAC+B,MAAM,CAAChC,IAAI,CAACW,IAAI,CAAC,KAAK,CAAC;QACpC;MACJ;MAEA,IAAIoB,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;QAC1B,OAAOjC,oBAAoB,EAAE;MACjC,CAAC,MAAM;QACH,OAAOqC,wBAAwB,CAACJ,QAAQ,CAAC;MAC7C;IACJ,CAAC,CAAC;EACV;EACAL,UAAU,CAAC,QAAQ,CAAC;;EAEpB;AACJ;AACA;EACI,IAAMU,GAAG,GAAGtB,kBAAkB,CACzBuB,mBAAmB,CACnBC,SAAS,CAAC,UAACX,IAAU,EAAK;IACvBxD,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAACuC,sBAAsB,GAAGpE,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAACuC,sBAAsB,GAAG,CAAC;IACrFb,UAAU,CAACC,IAAI,CAAC;EACpB,CAAC,CAAC;EACN,IAAAa,oBAAc,EACVrE,KAAK,CAAC8B,MAAM,CAACC,QAAQ,CAACuC,IAAI,CACtB,IAAAC,YAAM,EAAC,UAAAxC,QAAQ;IAAA,OAAI,CAAC,CAACA,QAAQ;EAAA,EAAC,CACjC,CACJ,CAACzB,IAAI,CAAC;IAAA,OAAM2D,GAAG,CAACO,WAAW,EAAE;EAAA,EAAC;;EAG/B;AACJ;AACA;AACA;EACI,IAAI/B,8BAAsC,GAAG,CAAC,CAAC;EAuC/C,SAASuB,wBAAwB,CAACS,KAAa,EAAE;IAC7CzE,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAACmC,wBAAwB,GAAGhE,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAACmC,wBAAwB,GAAG,CAAC;IACzF,IAAIU,cAAwC,GAAG,EAAE;IACjD,IAAIvC,cAA0C,GAAG,IAAW;IAE5DsC,KAAK,CAACE,OAAO,CAAC,UAAAnB,IAAI,EAAI;MAClB,IAAIA,IAAI,KAAK,QAAQ,EAAE;QACnB,MAAM,IAAIoB,KAAK,CAAC,KAAK,CAAC;MAC1B;MACAF,cAAc,GAAGA,cAAc,CAACG,MAAM,CAACrB,IAAI,CAACR,SAAS,CAAC;MACtDb,cAAc,GAAG,IAAAe,iCAAgB,EAAC,CAACf,cAAc,EAAEqB,IAAI,CAACL,UAAU,CAAC,CAAC;IACxE,CAAC,CAAC;IACF,OAAOE,iBAAiB,CACpBqB,cAAc,EACd,IAAAZ,oBAAc,EAAC3B,cAAc,CAAC,CACjC;EACL;;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAI2C,gBAAgB,GAAGC,0BAAoB;EAC3C,IAAMC,sBAGL,GAAG;IACAC,IAAI,EAAE,CAAC;EACX,CAAC;EAED,SAAS5B,iBAAiB,CACtB4B,IAA8B,EAC9B9B,UAA0B,EACb;IACbnD,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAACwB,iBAAiB,GAAGrD,KAAK,CAAC4B,KAAK,CAACC,IAAI,CAACwB,iBAAiB,GAAG,CAAC;;IAE3E;AACR;AACA;IACQ4B,IAAI,CAACN,OAAO,CAAC,UAAAO,OAAO,EAAI;MACpB,IAAMC,KAAa,GAAID,OAAO,CAASlF,KAAK,CAACoF,WAAW,CAAC;MACzDJ,sBAAsB,CAACC,IAAI,CAACE,KAAK,CAAC,GAAGD,OAAO;IAChD,CAAC,CAAC;IACFF,sBAAsB,CAAC7B,UAAU,GAAGA,UAAU;;IAG9C;AACR;AACA;AACA;IACQ2B,gBAAgB,GAAGA,gBAAgB,CAACxE,IAAI,CAAC,YAAM;MAC3C,IAAM+E,YAA0C,GAAGL,sBAAsB,CAACC,IAAI;MAC9ED,sBAAsB,CAACC,IAAI,GAAG,CAAC,CAAC;MAChC,IAAMK,aAAa,GAAGN,sBAAsB,CAAC7B,UAAU;MACvD,IAAMoC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC;MAExC,IACIrF,KAAK,CAAC8B,MAAM,CAACC,QAAQ,CAACC,QAAQ,EAAE,IAChCuD,MAAM,CAACtC,MAAM,KAAK,CAAC,EACrB;QACE,OAAO8B,0BAAoB;MAC/B;MAEA,IAAMW,eAA0C,GAAG,EAAE;MACrD,IAAMC,mBAAkD,GAAG,CAAC,CAAC;MAC7D,IAAMC,eAA2D,GAAG,CAAC,CAAC;MACtE,IAAMC,gBAA0D,GAAG,EAAE;MAErE,OAAOzD,OAAO,CAACC,GAAG,CAAC,CACfrC,KAAK,CAAC6C,KAAK,CAACiD,YAAY,CAACC,iBAAiB,CAACR,MAAM,EAAE,IAAI,CAAC,EACxD,IAAAS,mCAAqB,EACjBhG,KAAK,EACLuF,MAAM,CACT,CACJ,CAAC,CAACjF,IAAI,CAAC,gBAGF;QAAA,IAFF2F,gBAAgB;UAChBC,kBAAkB;QAElB,OAAO9D,OAAO,CAACC,GAAG,CACdkD,MAAM,CAACY,GAAG,WAAQhB,KAAK;UAAA,IAAK;YACxB,IAAMiB,gBAAuD,GAAGH,gBAAgB,CAACd,KAAK,CAAC;YACvF,IAAMkB,gBAAoD,GAAGD,gBAAgB,GAAG,IAAAE,0BAAkB,EAACF,gBAAgB,CAAC,GAAGG,SAAS;YAChI,IAAMC,WAAW,GAAGnB,YAAY,CAACF,KAAK,CAAC;YACvC,IAAMsB,aAAa,GAAGP,kBAAkB,CAACf,KAAK,CAAC;YAE/C,IACIsB,aAAa,IACbA,aAAa,CAACC,YAAY,CAACC,kBAAkB,KAAKP,gBAAgB,CAACQ,IAAI,EACzE;cACE;AAC5B;AACA;AACA;AACA;cAC4B,uBAAO7B,0BAAoB;YAC/B;YAGA,IAAM8B,sCAAsC,GAAG,CAACJ,aAAa,IAAI,CAACJ,gBAAgB,GAC9ES,2BAAqB,GACrB9G,KAAK,CAAC6C,KAAK,CAACkE,eAAe,CAAC;cACxBC,eAAe,EAAEP,aAAa,CAACvB,OAAO;cACtC+B,gBAAgB,EAAEZ;YACtB,CAAC,EAAE,6BAA6B,CAAC,CAAC/F,IAAI,CAAC,UAAA4G,CAAC;cAAA,OAAIA,CAAC,CAACC,OAAO;YAAA,EAAC;YAAC,uBACbN,sCAAsC,iBAA9EO,+BAA+B;cACrC,IAEQhB,gBAAgB,IAChBK,aAAa,IACbW,+BAA+B,KAAK,KAAK,IAGzChB,gBAAgB,IAAI,CAACK,aACxB,EACH;gBACE;AAC5B;AACA;AACA;AACA;AACA;gBAC4B,OAAO1B,0BAAoB;cAC/B;cAGA,IAAMsC,4BAA4B,GAAG,CAAChB,gBAAgB,GAClDS,2BAAqB,GACrB9G,KAAK,CAAC6C,KAAK,CAACkE,eAAe,CAAC;gBACxBC,eAAe,EAAER,WAAW;gBAC5BS,gBAAgB,EAAEZ;cACtB,CAAC,EAAE,6BAA6B,CAAC,CAAC/F,IAAI,CAAC,UAAA4G,CAAC;gBAAA,OAAIA,CAAC,CAACC,OAAO;cAAA,EAAC;cAAC,uBACvBE,4BAA4B,iBAA1DC,qBAAqB;gBAE3B,IACIjB,gBAAgB,IAChBiB,qBAAqB,EACvB;kBACE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;kBAC4B,IACI,CAACb,aAAa,IACdW,+BAA+B,KAAK,KAAK,EAC3C;oBACEvB,gBAAgB,CAACzC,IAAI,CACjB,IAAAmE,6BAAe,EACXvH,KAAK,EACLqG,gBAAgB,EAChBI,aAAa,GAAGA,aAAa,CAACC,YAAY,GAAGH,SAAS,CACzD,CACJ;kBACL;kBACA,OAAOxB,0BAAoB;gBAC/B;;gBAEA;AACxB;AACA;AACA;gBACwB,IAAMyC,YAAY,GAAGhC,MAAM,CAACiC,MAAM,CAC9B,CAAC,CAAC,EACFjB,WAAW,EACXJ,gBAAgB,GAAG;kBACfsB,KAAK,EAAE,IAAAC,eAAS,EAACvB,gBAAgB,CAACsB,KAAK,CAAC;kBACxCE,YAAY,EAAE,CAAC,CAAC;kBAChBhB,IAAI,EAAE,IAAAiB,wBAAkB;gBAC5B,CAAC,GAAG;kBACAH,KAAK,EAAE,IAAAI,8BAAwB,GAAE;kBACjClB,IAAI,EAAE,IAAAiB,wBAAkB,GAAE;kBAC1BD,YAAY,EAAE,CAAC;gBACnB,CAAC,CAAC;gBACNJ,YAAY,CAACE,KAAK,CAACK,GAAG,GAAG,IAAAC,SAAG,GAAE;gBAC9BR,YAAY,CAACZ,IAAI,GAAIJ,WAAW,CAASI,IAAI,GAAIJ,WAAW,CAASI,IAAI,GAAG,IAAAqB,oBAAc,EACtFjI,KAAK,CAAC6C,KAAK,CAACqF,YAAY,EACxBV,YAAY,EACZpB,gBAAgB,CACnB;gBACD,IAAM+B,YAAY,GAAG;kBACjBC,QAAQ,EAAEhC,gBAAgB;kBAC1BiC,QAAQ,EAAEb;gBACd,CAAC;gBACD9B,eAAe,CAACtC,IAAI,CAAC+E,YAAY,CAAC;gBAClCxC,mBAAmB,CAACR,KAAK,CAAC,GAAGgD,YAAY;gBACzCvC,eAAe,CAACT,KAAK,CAAC,GAAG,IAAAoC,6BAAe,EACpCvH,KAAK,EACLwG,WAAW,EACXC,aAAa,GAAGA,aAAa,CAACC,YAAY,GAAGH,SAAS,CACzD;cAAC;YAAA;UACN,CAAC;YAAA;UAAA;QAAA,EAAC,CACL;MACL,CAAC,CAAC,CAACjG,IAAI,CAAC,YAAM;QACV,IAAIoF,eAAe,CAACzC,MAAM,GAAG,CAAC,EAAE;UAC5B,OAAOjD,KAAK,CAAC6C,KAAK,CAACiD,YAAY,CAACwC,SAAS,CACrC5C,eAAe,EACf1F,KAAK,CAACuI,uBAAuB,CAChC,CAACjI,IAAI,CAAC,UAACkI,eAAe,EAAK;YACxBhD,MAAM,CAACC,IAAI,CAAC+C,eAAe,CAACC,OAAO,CAAC,CAAC9D,OAAO,CAAC,UAACQ,KAAK,EAAK;cACpDnF,KAAK,CAAC8B,MAAM,CAAC4G,SAAS,CAAC7G,IAAI,CAACW,IAAI,CAACmD,mBAAmB,CAACR,KAAK,CAAC,CAAC;cAC5DU,gBAAgB,CAACzC,IAAI,CAACwC,eAAe,CAACT,KAAK,CAAC,CAAC;YACjD,CAAC,CAAC;UACN,CAAC,CAAC;QACN;MACJ,CAAC,CAAC,CAAC7E,IAAI,CAAC,YAAM;QACV,IAAIuF,gBAAgB,CAAC5C,MAAM,GAAG,CAAC,EAAE;UAC7B,OAAOjD,KAAK,CAAC6C,KAAK,CAAC8F,YAAY,CAACL,SAAS,CACrCzC,gBAAgB,EAChB,6BAA6B,CAChC;QACL;MACJ,CAAC,CAAC,CAACvF,IAAI,CAAC,YAAM;QACV;AAChB;AACA;AACA;AACA;QACgBN,KAAK,CAACiC,eAAe,GAAGjC,KAAK,CAACiC,eAAe,CAAC3B,IAAI,CAAC;UAAA,OAAM,IAAAsI,yBAAa,EAClE5I,KAAK,EACL,MAAM,EACNsF,aAAa,CAChB;QAAA,EAAC;MACN,CAAC,CAAC;IACN,CAAC,CAAC,SAAM,CAAC,UAAAuD,cAAc;MAAA,OAAI7I,KAAK,CAAC8B,MAAM,CAACgH,KAAK,CAACtG,IAAI,CAACqG,cAAc,CAAC;IAAA,EAAC;IACnE,OAAO/D,gBAAgB;EAC3B;AACJ"}