{"version":3,"file":"conflicts.js","names":["resolveConflictError","state","input","forkState","conflictHandler","conflictHandlerOutput","isEqual","undefined","resolvedDoc","Object","assign","documentData","_meta","flatClone","_rev","getDefaultRevision","_attachments","lwt","now","createRevision","hashFunction","output","defaultConflictHandler","i","_context","deepEqual","newDocumentState","realMasterState","Promise","resolve"],"sources":["../../../src/replication-protocol/conflicts.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport type {\n    RxConflictHandler,\n    RxConflictHandlerInput,\n    RxConflictHandlerOutput,\n    RxDocumentData,\n    RxStorageInstanceReplicationState\n} from '../types';\nimport {\n    getDefaultRevision,\n    createRevision,\n    now,\n    flatClone\n} from '../util';\n\nexport const defaultConflictHandler: RxConflictHandler<any> = function (\n    i: RxConflictHandlerInput<any>,\n    _context: string\n): Promise<RxConflictHandlerOutput<any>> {\n\n\n    /**\n     * If the documents are deep equal,\n     * we have no conflict.\n     * On your custom conflict handler you might only\n     * check some properties, like the updatedAt time,\n     * for better performance, because deepEqual is expensive.\n     */\n    if (deepEqual(\n        i.newDocumentState,\n        i.realMasterState\n    )) {\n        return Promise.resolve({\n            isEqual: true\n        });\n    }\n\n    /**\n     * The default conflict handler will always\n     * drop the fork state and use the master state instead.\n     */\n    return Promise.resolve({\n        isEqual: false,\n        documentData: i.realMasterState\n    });\n}\n\n\n/**\n * Resolves a conflict error or determines that the given document states are equal.\n * Returns the resolved document that must be written to the fork.\n * Then the new document state can be pushed upstream.\n * If document is not in conflict, returns undefined.\n * If error is non-409, it throws an error.\n * Conflicts are only solved in the upstream, never in the downstream.\n */\nexport async function resolveConflictError<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    input: RxConflictHandlerInput<RxDocType>,\n    forkState: RxDocumentData<RxDocType>\n): Promise<{\n    resolvedDoc: RxDocumentData<RxDocType>;\n    output: RxConflictHandlerOutput<RxDocType>;\n} | undefined> {\n    const conflictHandler: RxConflictHandler<RxDocType> = state.input.conflictHandler;\n    const conflictHandlerOutput = await conflictHandler(input, 'replication-resolve-conflict');\n\n    if (conflictHandlerOutput.isEqual) {\n        /**\n         * Documents are equal,\n         * so this is not a conflict -> do nothing.\n         */\n        return undefined;\n    } else {\n        /**\n         * We have a resolved conflict,\n         * use the resolved document data.\n         */\n        const resolvedDoc: RxDocumentData<RxDocType> = Object.assign(\n            {},\n            conflictHandlerOutput.documentData,\n            {\n                /**\n                 * Because the resolved conflict is written to the fork,\n                 * we have to keep/update the forks _meta data, not the masters.\n                 */\n                _meta: flatClone(forkState._meta),\n                _rev: getDefaultRevision(),\n                _attachments: flatClone(forkState._attachments)\n            }\n        );\n        resolvedDoc._meta.lwt = now();\n        resolvedDoc._rev = createRevision(\n            state.input.hashFunction,\n            resolvedDoc,\n            forkState\n        );\n        return {\n            resolvedDoc,\n            output: conflictHandlerOutput\n        };\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;AAQA;;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACsBA,oB,YAAAA,oB,CAClBC,K,EACAC,K,EACAC,S;MAIW;IACX,IAAMC,eAA6C,GAAGH,KAAK,CAACC,KAAN,CAAYE,eAAlE;IADW,uBAEyBA,eAAe,CAACF,KAAD,EAAQ,8BAAR,CAFxC,iBAELG,qBAFK;MAAA,IAIPA,qBAAqB,CAACC,OAJf;QAKP;AACR;AACA;AACA;QACQ,OAAOC,SAAP;MATO;QAWP;AACR;AACA;AACA;QACQ,IAAMC,WAAsC,GAAGC,MAAM,CAACC,MAAP,CAC3C,EAD2C,EAE3CL,qBAAqB,CAACM,YAFqB,EAG3C;UACI;AAChB;AACA;AACA;UACgBC,KAAK,EAAE,IAAAC,eAAA,EAAUV,SAAS,CAACS,KAApB,CALX;UAMIE,IAAI,EAAE,IAAAC,wBAAA,GANV;UAOIC,YAAY,EAAE,IAAAH,eAAA,EAAUV,SAAS,CAACa,YAApB;QAPlB,CAH2C,CAA/C;QAaAR,WAAW,CAACI,KAAZ,CAAkBK,GAAlB,GAAwB,IAAAC,SAAA,GAAxB;QACAV,WAAW,CAACM,IAAZ,GAAmB,IAAAK,oBAAA,EACflB,KAAK,CAACC,KAAN,CAAYkB,YADG,EAEfZ,WAFe,EAGfL,SAHe,CAAnB;QAKA,OAAO;UACHK,WAAW,EAAXA,WADG;UAEHa,MAAM,EAAEhB;QAFL,CAAP;MAlCO;IAAA;EAuCd,C;;;;;;;AAvFM,IAAMiB,sBAA8C,GAAG,SAAjDA,sBAAiD,CAC1DC,CAD0D,EAE1DC,QAF0D,EAGrB;EAGrC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAI,IAAAC,yBAAA,EACAF,CAAC,CAACG,gBADF,EAEAH,CAAC,CAACI,eAFF,CAAJ,EAGG;IACC,OAAOC,OAAO,CAACC,OAAR,CAAgB;MACnBvB,OAAO,EAAE;IADU,CAAhB,CAAP;EAGH;EAED;AACJ;AACA;AACA;;;EACI,OAAOsB,OAAO,CAACC,OAAR,CAAgB;IACnBvB,OAAO,EAAE,KADU;IAEnBK,YAAY,EAAEY,CAAC,CAACI;EAFG,CAAhB,CAAP;AAIH,CA9BM"}