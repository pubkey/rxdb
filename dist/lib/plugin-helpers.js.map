{"version":3,"file":"plugin-helpers.js","names":["VALIDATOR_CACHE_BY_VALIDATOR_KEY","Map","wrappedValidateStorageFactory","getValidator","validatorKey","has","set","VALIDATOR_CACHE","getFromMapOrThrow","initValidator","schema","hash","fastUnsecureHash","JSON","stringify","validator","args","Object","assign","storage","createStorageInstance","params","instance","validatorCached","requestIdleCallbackIfAvailable","oldBulkWrite","bulkWrite","bind","documentWrites","context","forEach","row","document","wrapRxStorageInstance","modifyToStorage","modifyFromStorage","errorFromStorage","error","fromStorage","ret","writeRow","previous","flatClone","documentInDb","docData","toStorage","modifyAttachmentFromStorage","v","useRows","Promise","all","map","undefined","push","writeResult","success","promises","entries","k","then","err","oldQuery","query","preparedQuery","queryResult","documents","doc","oldGetAttachmentData","getAttachmentData","documentId","attachmentId","data","oldFindDocumentsById","findDocumentsById","ids","deleted","findResult","key","oldGetChangedDocumentsSince","getChangedDocumentsSince","limit","checkpoint","result","d","oldChangeStream","changeStream","pipe","mergeMap","eventBulk","events","event","startTime","endTime","eventId","change","operation","id","useEvents","oldConflictResultionTasks","conflictResultionTasks","task","input","assumedMasterState","newDocumentState","realMasterState","oldResolveConflictResultionTask","resolveConflictResultionTask","taskSolution","output","isEqual","useSolution","documentData"],"sources":["../../src/plugin-helpers.ts"],"sourcesContent":["import { mergeMap } from 'rxjs/operators';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\nimport {\n    fastUnsecureHash,\n    flatClone,\n    getFromMapOrThrow,\n    requestIdleCallbackIfAvailable\n} from './util';\n\n\ntype WrappedStorageFunction = <Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>\n    }\n) => RxStorage<Internals, InstanceCreationOptions>;\n\ntype ValidatorFunction = (docData: RxDocumentData<any>) => void;\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE_BY_VALIDATOR_KEY: Map<string, Map<string, ValidatorFunction>> = new Map();\n\n/**\n * This factory is used in the validation plugins\n * so that we can reuse the basic storage wrapping code.\n */\nexport function wrappedValidateStorageFactory(\n    /**\n     * Returns a method that can be used to validate\n     * documents and throws when the document is not valid.\n     */\n    getValidator: (schema: RxJsonSchema<any>) => ValidatorFunction,\n    /**\n     * A string to identify the validation library.\n     */\n    validatorKey: string\n): WrappedStorageFunction {\n    if (!VALIDATOR_CACHE_BY_VALIDATOR_KEY.has(validatorKey)) {\n        VALIDATOR_CACHE_BY_VALIDATOR_KEY.set(validatorKey, new Map());\n    }\n    const VALIDATOR_CACHE = getFromMapOrThrow(VALIDATOR_CACHE_BY_VALIDATOR_KEY, validatorKey);\n\n    function initValidator(\n        schema: RxJsonSchema<any>\n    ): ValidatorFunction {\n        const hash = fastUnsecureHash(JSON.stringify(schema));\n        if (!VALIDATOR_CACHE.has(hash)) {\n            const validator = getValidator(schema);\n            VALIDATOR_CACHE.set(hash, validator);\n            return validator;\n        }\n        return getFromMapOrThrow(VALIDATOR_CACHE, hash);\n    }\n\n    return (args) => {\n        return Object.assign(\n            {},\n            args.storage,\n            {\n                async createStorageInstance<RxDocType>(\n                    params: RxStorageInstanceCreationParams<RxDocType, any>\n                ) {\n                    const instance = await args.storage.createStorageInstance(params);\n                    /**\n                     * Lazy initialize the validator\n                     * to save initial page load performance.\n                     * Some libraries take really long to initialize the validator\n                     * from the schema.\n                     */\n                    let validatorCached: ValidatorFunction;\n                    requestIdleCallbackIfAvailable(() => validatorCached = initValidator(params.schema));\n\n                    const oldBulkWrite = instance.bulkWrite.bind(instance);\n                    instance.bulkWrite = (\n                        documentWrites: BulkWriteRow<RxDocType>[],\n                        context: string\n                    ) => {\n                        if (!validatorCached) {\n                            validatorCached = initValidator(params.schema);\n                        }\n                        documentWrites.forEach(row => {\n                            validatorCached(row.document);\n                        });\n                        return oldBulkWrite(documentWrites, context);\n                    }\n\n                    return instance;\n                }\n            }\n        );\n    };\n\n}\n\n\n\n/**\n * Used in plugins to easily modify all in- and outgoing\n * data of that storage instance.\n */\nexport function wrapRxStorageInstance<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    modifyToStorage: (docData: RxDocumentData<RxDocType>) => Promise<RxDocumentData<any>> | RxDocumentData<any>,\n    modifyFromStorage: (docData: RxDocumentData<any>) => Promise<RxDocumentData<RxDocType>> | RxDocumentData<RxDocType>,\n    modifyAttachmentFromStorage: (attachmentData: string) => Promise<string> | string = (v) => v\n) {\n    async function toStorage(docData: RxDocumentData<RxDocType>): Promise<RxDocumentData<any>> {\n        if (!docData) {\n            return docData;\n        }\n        return await modifyToStorage(docData);\n    }\n    async function fromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n        if (!docData) {\n            return docData;\n        }\n        return await modifyFromStorage(docData);\n    }\n    async function errorFromStorage<RxDocType>(\n        error: RxStorageBulkWriteError<any>\n    ): Promise<RxStorageBulkWriteError<RxDocType>> {\n        const ret = flatClone(error);\n        ret.writeRow = flatClone(ret.writeRow);\n        if (ret.documentInDb) {\n            ret.documentInDb = await fromStorage(ret.documentInDb);\n        }\n        if (ret.writeRow.previous) {\n            ret.writeRow.previous = await fromStorage(ret.writeRow.previous);\n        }\n        ret.writeRow.document = await fromStorage(ret.writeRow.document);\n        return ret;\n    }\n\n    const oldBulkWrite = instance.bulkWrite.bind(instance);\n    instance.bulkWrite = async (\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ) => {\n        const useRows: BulkWriteRow<any>[] = [];\n        await Promise.all(\n            documentWrites.map(async (row) => {\n                const [previous, document] = await Promise.all([\n                    row.previous ? toStorage(row.previous) : undefined,\n                    toStorage(row.document)\n                ]);\n                useRows.push({ previous, document });\n            })\n        );\n\n        const writeResult = await oldBulkWrite(useRows, context);\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const promises: Promise<any>[] = [];\n        Object.entries(writeResult.success).forEach(([k, v]) => {\n            promises.push(\n                fromStorage(v).then(v => ret.success[k] = v)\n            );\n        });\n        Object.entries(writeResult.error).forEach(([k, error]) => {\n            promises.push(\n                errorFromStorage<RxDocType>(error).then(err => ret.error[k] = err)\n            );\n        });\n        await Promise.all(promises);\n        return ret;\n    }\n\n    const oldQuery = instance.query.bind(instance);\n    instance.query = (preparedQuery) => {\n        return oldQuery(preparedQuery)\n            .then(queryResult => {\n                return Promise.all(queryResult.documents.map(doc => fromStorage(doc)));\n            })\n            .then(documents => ({ documents: documents as any }));\n    }\n\n    const oldGetAttachmentData = instance.getAttachmentData.bind(instance);\n    instance.getAttachmentData = async (\n        documentId: string,\n        attachmentId: string\n    ) => {\n        let data = await oldGetAttachmentData(documentId, attachmentId);\n        data = await modifyAttachmentFromStorage(data);\n        return data;\n    }\n\n    const oldFindDocumentsById = instance.findDocumentsById.bind(instance);\n    instance.findDocumentsById = (ids, deleted) => {\n        return oldFindDocumentsById(ids, deleted).then(async (findResult) => {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            await Promise.all(\n                Object.entries(findResult)\n                    .map(async ([key, doc]) => {\n                        ret[key] = await fromStorage(doc);\n                    })\n            );\n            return ret;\n        });\n    };\n\n    const oldGetChangedDocumentsSince = instance.getChangedDocumentsSince.bind(instance);\n    instance.getChangedDocumentsSince = (limit, checkpoint) => {\n        return oldGetChangedDocumentsSince(limit, checkpoint)\n            .then(async (result) => {\n                return {\n                    checkpoint: result.checkpoint,\n                    documents: await Promise.all(\n                        result.documents.map(d => fromStorage(d))\n                    )\n                };\n            });\n    };\n\n    const oldChangeStream = instance.changeStream.bind(instance);\n    instance.changeStream = () => {\n        return oldChangeStream().pipe(\n            mergeMap(async (eventBulk) => {\n                const useEvents = await Promise.all(\n                    eventBulk.events.map(async (event) => {\n                        return {\n                            eventId: event.eventId,\n                            documentId: event.documentId,\n                            endTime: event.endTime,\n                            startTime: event.startTime,\n                            change: {\n                                id: event.change.id,\n                                operation: event.change.operation,\n                                doc: await fromStorage(event.change.doc) as any,\n                                previous: await fromStorage(event.change.previous) as any\n                            }\n                        }\n                    })\n                );\n                const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n                    id: eventBulk.id,\n                    events: useEvents,\n                    checkpoint: eventBulk.checkpoint,\n                    context: eventBulk.context\n                };\n                return ret;\n            })\n        )\n    };\n\n    const oldConflictResultionTasks = instance.conflictResultionTasks.bind(instance);\n    instance.conflictResultionTasks = () => {\n        return oldConflictResultionTasks().pipe(\n            mergeMap(async (task) => {\n                const assumedMasterState = await fromStorage(task.input.assumedMasterState);\n                const newDocumentState = await fromStorage(task.input.newDocumentState);\n                const realMasterState = await fromStorage(task.input.realMasterState);\n                return {\n                    id: task.id,\n                    context: task.context,\n                    input: {\n                        assumedMasterState,\n                        realMasterState,\n                        newDocumentState\n                    }\n                };\n            })\n        );\n    }\n\n    const oldResolveConflictResultionTask = instance.resolveConflictResultionTask.bind(instance);\n    instance.resolveConflictResultionTask = (taskSolution) => {\n        if (taskSolution.output.isEqual) {\n            return oldResolveConflictResultionTask(taskSolution);\n        }\n        const useSolution = {\n            id: taskSolution.id,\n            output: {\n                isEqual: false,\n                documentData: taskSolution.output.documentData\n            }\n        };\n        return oldResolveConflictResultionTask(useSolution);\n    }\n\n    return instance;\n}\n"],"mappings":"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"}