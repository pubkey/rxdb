{"version":3,"file":"rx-database-internal-store.js","names":["_rxError","require","_rxSchemaHelper","_rxStorageHelper","_utils","INTERNAL_CONTEXT_COLLECTION","exports","INTERNAL_CONTEXT_STORAGE_TOKEN","INTERNAL_STORE_SCHEMA_TITLE","INTERNAL_STORE_SCHEMA","fillWithDefaultSettings","version","title","primaryKey","key","fields","separator","type","properties","id","maxLength","context","enum","data","additionalProperties","indexes","required","sharding","shards","mode","getPrimaryKeyOfInternalDocument","getComposedPrimaryKeyOfDocumentData","getAllCollectionDocuments","storageStatics","storageInstance","getAllQueryPrepared","prepareQuery","schema","selector","sort","skip","queryResult","query","allDocs","documents","STORAGE_TOKEN_DOCUMENT_KEY","STORAGE_TOKEN_DOCUMENT_ID","ensureStorageTokenDocumentExists","rxDatabase","storageToken","randomCouchString","passwordHash","password","hashFunction","JSON","stringify","undefined","docData","token","instanceToken","_deleted","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","writeResult","internalStore","bulkWrite","document","success","error","ensureNotFalsy","isError","status","conflictError","documentInDb","newRxError","existingPasswordHash","storageTokenDocInDb","addConnectedStorageToCollection","collection","storageCollectionName","collectionNameWithVersion","_collectionNamePrimary","name","jsonSchema","collectionDocId","collectionDoc","getSingleDocument","database","saveData","clone","connectedStorages","alreadyThere","find","row","collectionName","push","writeSingle","previous","err","isBulkWriteConflictError"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import {\n    isBulkWriteConflictError,\n    newRxError\n} from './rx-error';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from './rx-schema-helper';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper';\nimport type {\n    CollectionsOfDatabase,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageInstance,\n    RxStorageStatics,\n    RxStorageWriteErrorConflict\n} from './types';\nimport {\n    clone,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    randomCouchString\n} from './plugins/utils';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\n\n/**\n * Do not change the title,\n * we have to flag the internal schema so that\n * some RxStorage implementations are able\n * to detect if the created RxStorageInstance\n * is from the internals or not,\n * to do some optimizations in some cases.\n */\nexport const INTERNAL_STORE_SCHEMA_TITLE = 'RxInternalDocument';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    title: INTERNAL_STORE_SCHEMA_TITLE,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    );\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageStatics: RxStorageStatics,\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storageStatics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\n\nexport const STORAGE_TOKEN_DOCUMENT_ID = getPrimaryKeyOfInternalDocument(\n    STORAGE_TOKEN_DOCUMENT_KEY,\n    INTERNAL_CONTEXT_STORAGE_TOKEN\n);\n\nexport async function ensureStorageTokenDocumentExists<Collections extends CollectionsOfDatabase = any>(\n    rxDatabase: RxDatabase<Collections>\n): Promise<RxDocumentData<InternalStoreStorageTokenDocType>> {\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n\n    const passwordHash = rxDatabase.password ?\n        rxDatabase.hashFunction(JSON.stringify(rxDatabase.password)) :\n        undefined;\n\n    const docData: RxDocumentData<InternalStoreStorageTokenDocType> = {\n        id: STORAGE_TOKEN_DOCUMENT_ID,\n        context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n        key: STORAGE_TOKEN_DOCUMENT_KEY,\n        data: {\n            token: storageToken,\n            /**\n             * We add the instance token here\n             * to be able to detect if a given RxDatabase instance\n             * is the first instance that was ever created\n             * or if databases have existed earlier on that storage\n             * with the same database name.\n             */\n            instanceToken: rxDatabase.token,\n            passwordHash\n        },\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    const writeResult = await rxDatabase.internalStore.bulkWrite(\n        [{ document: docData }],\n        'internal-add-storage-token'\n    );\n    if (writeResult.success[STORAGE_TOKEN_DOCUMENT_ID]) {\n        return writeResult.success[STORAGE_TOKEN_DOCUMENT_ID];\n    }\n\n    /**\n     * If we get a 409 error,\n     * it means another instance already inserted the storage token.\n     * So we get that token from the database and return that one.\n     */\n    const error = ensureNotFalsy(writeResult.error[STORAGE_TOKEN_DOCUMENT_ID]);\n    if (\n        error.isError &&\n        (error as RxStorageWriteError<InternalStoreStorageTokenDocType>).status === 409\n    ) {\n        const conflictError = (error as RxStorageWriteErrorConflict<InternalStoreStorageTokenDocType>);\n\n\n        if (\n            passwordHash &&\n            passwordHash !== conflictError.documentInDb.data.passwordHash\n        ) {\n            throw newRxError('DB1', {\n                passwordHash,\n                existingPasswordHash: conflictError.documentInDb.data.passwordHash\n            });\n        }\n\n        const storageTokenDocInDb = conflictError.documentInDb;\n        return ensureNotFalsy(storageTokenDocInDb);\n    }\n    throw error;\n}\n\n\n\n\n\nexport async function addConnectedStorageToCollection(\n    collection: RxCollection<any>,\n    storageCollectionName: string,\n    schema: RxJsonSchema<any>\n) {\n    const collectionNameWithVersion = _collectionNamePrimary(collection.name, collection.schema.jsonSchema);\n    const collectionDocId = getPrimaryKeyOfInternalDocument(\n        collectionNameWithVersion,\n        INTERNAL_CONTEXT_COLLECTION\n    );\n\n    while (true) {\n        const collectionDoc = await getSingleDocument(\n            collection.database.internalStore,\n            collectionDocId\n        );\n        const saveData: RxDocumentData<InternalStoreCollectionDocType> = clone(ensureNotFalsy(collectionDoc));\n        /**\n         * Add array if not exist for backwards compatibility\n         * TODO remove this in 2023\n         */\n        if (!saveData.data.connectedStorages) {\n            saveData.data.connectedStorages = [];\n        }\n\n        // do nothing if already in array\n        const alreadyThere = saveData.data.connectedStorages\n            .find(row => row.collectionName === storageCollectionName && row.schema.version === schema.version);\n        if (alreadyThere) {\n            return;\n        }\n\n        // otherwise add to array and save\n        saveData.data.connectedStorages.push({\n            collectionName: storageCollectionName,\n            schema\n        });\n        try {\n            await writeSingle(\n                collection.database.internalStore,\n                {\n                    previous: ensureNotFalsy(collectionDoc),\n                    document: saveData\n                },\n                'add-connected-storage-to-collection'\n            );\n        } catch (err) {\n            if (!isBulkWriteConflictError(err)) {\n                throw err;\n            }\n            // retry on conflict\n        }\n    }\n}\n\n\n/**\n * returns the primary for a given collection-data\n * used in the internal store of a RxDatabase\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n"],"mappings":"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"}