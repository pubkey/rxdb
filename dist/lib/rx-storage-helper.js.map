{"version":3,"file":"rx-storage-helper.js","names":["writeSingle","instance","writeRow","context","bulkWrite","writeResult","Object","keys","error","length","firstPropertyValueOfObject","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","stackCheckpoints","checkpoints","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","previousDocumentData","eventId","collectionName","name","undefined","startTime","endTime","operation","overwritable","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","newRxError","id","data","getNewestOfDocumentStates","primaryPath","docs","forEach","_meta","lwt","ensureNotFalsy","categorizeBulkWriteRows","docsInDb","bulkWriteRows","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","randomCouchString","events","checkpoint","attachmentsAdd","attachmentsRemove","attachmentsUpdate","now","docsByIdIsMap","get","document","documentInDb","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","attachmentId","attachmentData","isError","push","stripAttachmentsDataFromRow","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","previous","revInDb","_rev","err","find","previousAttachmentData","digest","writeDoc","eventDocumentData","previousEventDocumentData","args","useDoc","flatClone","type","flatCloneDocWithMeta","docId","binaryValues","binary","map","v","join","eventKey","databaseName","getWrappedStorageInstance","database","rxJsonSchema","getPrimaryFieldOfPrimaryKey","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","fillPrimaryKey","metaFieldName","hasOwnProperty","dataBefore","dataAfter","createRevision","hashFunction","internals","options","rows","toStorageWriteRows","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","subResult","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","close","changeStream","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","getDefaultRxDocumentMeta","getDefaultRevision","originalStorageInstance","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","jsonSchema","encrypted"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys\n} from './types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    firstPropertyValueOfObject,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    const documentData = rxStorageChangeEvent.documentData;\n    const previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\nexport function getNewestOfDocumentStates<RxDocType>(\n    primaryPath: string,\n    docs: RxDocumentData<RxDocType>[]\n): RxDocumentData<RxDocType> {\n    let ret: RxDocumentData<RxDocType> | null = null;\n    docs.forEach(doc => {\n        if (\n            !ret ||\n            doc._meta.lwt > ret._meta.lwt ||\n            (\n                doc._meta.lwt === ret._meta.lwt &&\n                (doc as any)[primaryPath] > (ret as any)[primaryPath]\n            )\n        ) {\n            ret = doc;\n        }\n\n    });\n    return ensureNotFalsy(ret as any);\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This can be a Map for better performance\n     * but it can also be an object because some storages\n     * need to work with something that is JSON-stringify-able\n     * and we do not want to transform a big object into a Map\n     * each time we use it.\n     */\n    docsInDb:\n        Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>> |\n        ById<RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRow<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRow<RxDocType>[] = [];\n    const errors: ById<RxStorageBulkWriteError<RxDocType>> = {};\n    const changedDocumentIds: RxDocumentData<RxDocType>[StringKeys<RxDocType>][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: randomCouchString(10),\n        events: [],\n        checkpoint: null,\n        context\n    };\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n\n\n    const startTime = now();\n\n    const docsByIdIsMap = typeof docsInDb.get === 'function';\n\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsByIdIsMap ? (docsInDb as any).get(id) : (docsInDb as any)[id];\n        let attachmentError: RxStorageBulkWriteError<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                if (\n                    !(attachmentData as RxAttachmentWriteData).data\n                ) {\n                    attachmentError = {\n                        documentId: id as any,\n                        isError: true,\n                        status: 510,\n                        writeRow\n                    };\n                    errors[id as any] = attachmentError;\n                } else {\n                    attachmentsAdd.push({\n                        documentId: id as any,\n                        attachmentId,\n                        attachmentData: attachmentData as any\n                    });\n                }\n            });\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow);\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    operation: 'INSERT',\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document as any,\n                    previousDocumentData: hasAttachments && writeRow.previous ? stripAttachmentsDataFromDocument(writeRow.previous) : writeRow.previous as any,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageBulkWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors[id as any] = err;\n                return;\n            }\n\n            // handle attachments data\n            if (writeRow.document._deleted) {\n                /**\n                 * Deleted documents must have cleared all their attachments.\n                 */\n                if (writeRow.previous) {\n                    Object\n                        .keys(writeRow.previous._attachments)\n                        .forEach(attachmentId => {\n                            attachmentsRemove.push({\n                                documentId: id as any,\n                                attachmentId\n                            });\n                        });\n                }\n            } else {\n                // first check for errors\n                Object\n                    .entries(writeRow.document._attachments)\n                    .find(([attachmentId, attachmentData]) => {\n                        const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                        if (\n                            !previousAttachmentData &&\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: id as any,\n                                documentInDb: documentInDb,\n                                isError: true,\n                                status: 510,\n                                writeRow\n                            };\n                        }\n                        return true;\n                    });\n                if (!attachmentError) {\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .forEach(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (!previousAttachmentData) {\n                                attachmentsAdd.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            } else {\n                                if (\n                                    (attachmentData as RxAttachmentWriteData).data &&\n                                    attachmentData.digest !== previousAttachmentData.digest\n                                ) {\n                                    attachmentsUpdate.push({\n                                        documentId: id as any,\n                                        attachmentId,\n                                        attachmentData: attachmentData as RxAttachmentWriteData\n                                    });\n                                }\n                            }\n                        });\n                }\n            }\n            if (attachmentError) {\n                errors[id as any] = attachmentError;\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkUpdateDocs.push(writeRow);\n                }\n            }\n\n            const writeDoc = writeRow.document;\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc;\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc;\n                previousEventDocumentData = writeRow.previous;\n            } else if (writeDoc._deleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(writeRow.document);\n                previousEventDocumentData = writeRow.previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            changedDocumentIds.push(id);\n            eventBulk.events.push({\n                eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                documentId: id as any,\n                documentData: ensureNotFalsy(eventDocumentData),\n                previousDocumentData: previousEventDocumentData,\n                operation: operation,\n                startTime,\n                endTime: now()\n            });\n        }\n    });\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        errors,\n        changedDocumentIds,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRow<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc);\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = {\n                digest: attachmentData.digest,\n                length: attachmentData.length,\n                type: attachmentData.type\n            };\n        })\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                // TODO run this in the dev-mode plugin\n                // const prev = parseRevision(writeRow.previous._rev);\n                // const current = parseRevision(writeRow.document._rev);\n                // if (current.height <= prev.height) {\n                //     throw newRxError('SNH', {\n                //         dataBefore: writeRow.previous,\n                //         dataAfter: writeRow.document,\n                //         args: {\n                //             prev,\n                //             current\n                //         }\n                //     });\n                // }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        /**\n         * Yes we really want to set the revision here.\n         * If you make a plugin that relies on having its own revision\n         * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n         */\n        data._rev = createRevision(\n            database.hashFunction,\n            data,\n            writeRow.previous\n        );\n\n        return {\n            document: data,\n            previous: writeRow.previous\n        };\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const reInsertErrors: RxStorageBulkWriteError<RxDocType>[] = Object\n                        .values(writeResult.error)\n                        .filter((error) => {\n                            if (\n                                error.status === 409 &&\n                                !error.writeRow.previous &&\n                                !error.writeRow.document._deleted &&\n                                ensureNotFalsy(error.documentInDb)._deleted\n                            ) {\n                                return true;\n                            }\n                            return false;\n                        });\n\n                    if (reInsertErrors.length > 0) {\n                        const useWriteResult: typeof writeResult = {\n                            error: flatClone(writeResult.error),\n                            success: flatClone(writeResult.success)\n                        };\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                delete useWriteResult.error[error.documentId];\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.hashFunction,\n                                                error.writeRow.document,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            useWriteResult.error = Object.assign(\n                                useWriteResult.error,\n                                subResult.error\n                            );\n                            useWriteResult.success = Object.assign(\n                                useWriteResult.success,\n                                subResult.success\n                            );\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(limit, checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    (ret as any).originalStorageInstance = storageInstance;\n\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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"}