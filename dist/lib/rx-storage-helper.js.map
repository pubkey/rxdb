{"version":3,"file":"rx-storage-helper.js","names":["writeSingle","instance","writeRow","context","bulkWrite","writeResult","Object","keys","error","length","firstPropertyValueOfObject","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","stackCheckpoints","checkpoints","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","overwritable","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","newRxError","id","data","getNewestOfDocumentStates","primaryPath","docs","forEach","_meta","lwt","ensureNotFalsy","categorizeBulkWriteRows","docsInDb","bulkWriteRows","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","randomCouchString","events","checkpoint","attachmentsAdd","attachmentsRemove","attachmentsUpdate","now","document","documentInDb","get","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","attachmentId","attachmentData","isError","push","stripAttachmentsDataFromRow","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","revInDb","_rev","err","find","previousAttachmentData","writeDoc","args","useDoc","flatClone","digest","type","flatCloneDocWithMeta","docId","binaryValues","binary","map","v","join","eventKey","databaseName","getWrappedStorageInstance","database","rxJsonSchema","getPrimaryFieldOfPrimaryKey","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","fillPrimaryKey","metaFieldName","hasOwnProperty","dataBefore","dataAfter","createRevision","hashFunction","internals","options","rows","toStorageWriteRows","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","subResult","query","preparedQuery","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","close","changeStream","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","getDefaultRxDocumentMeta","getDefaultRevision","originalStorageInstance","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","jsonSchema","encrypted"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport type { ChangeEvent } from 'event-reduce-js';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys\n} from './types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    firstPropertyValueOfObject,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    /**\n     * TODO\n     * this data design is shit,\n     * instead of having the documentData depending on the operation,\n     * we should always have a current doc data, that might or might not\n     * have set _deleted to true.\n     */\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\nexport function getNewestOfDocumentStates<RxDocType>(\n    primaryPath: string,\n    docs: RxDocumentData<RxDocType>[]\n): RxDocumentData<RxDocType> {\n    let ret: RxDocumentData<RxDocType> | null = null;\n    docs.forEach(doc => {\n        if (\n            !ret ||\n            doc._meta.lwt > ret._meta.lwt ||\n            (\n                doc._meta.lwt === ret._meta.lwt &&\n                (doc as any)[primaryPath] > (ret as any)[primaryPath]\n            )\n        ) {\n            ret = doc;\n        }\n\n    });\n    return ensureNotFalsy(ret as any);\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRow<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRow<RxDocType>[] = [];\n    const errors: RxStorageBulkWriteError<RxDocType>[] = [];\n    const changedDocumentIds: RxDocumentData<RxDocType>[StringKeys<RxDocType>][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: randomCouchString(10),\n        events: [],\n        checkpoint: null,\n        context\n    };\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n\n\n    const startTime = now();\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsInDb.get(id);\n        let attachmentError: RxStorageBulkWriteError<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                if (\n                    !(attachmentData as RxAttachmentWriteData).data\n                ) {\n                    attachmentError = {\n                        documentId: id as any,\n                        isError: true,\n                        status: 510,\n                        writeRow\n                    };\n                    errors.push(attachmentError);\n                } else {\n                    attachmentsAdd.push({\n                        documentId: id as any,\n                        attachmentId,\n                        attachmentData: attachmentData as any\n                    });\n                }\n            });\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow);\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change: {\n                        doc: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document,\n                        id: id as any,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageBulkWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                return;\n            }\n\n            // handle attachments data\n            if (writeRow.document._deleted) {\n                /**\n                 * Deleted documents must have cleared all their attachments.\n                 */\n                if (writeRow.previous) {\n                    Object\n                        .keys(writeRow.previous._attachments)\n                        .forEach(attachmentId => {\n                            attachmentsRemove.push({\n                                documentId: id as any,\n                                attachmentId\n                            });\n                        });\n                }\n            } else {\n                // first check for errors\n                Object\n                    .entries(writeRow.document._attachments)\n                    .find(([attachmentId, attachmentData]) => {\n                        const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                        if (\n                            !previousAttachmentData &&\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: id as any,\n                                documentInDb: documentInDb,\n                                isError: true,\n                                status: 510,\n                                writeRow\n                            };\n                        }\n                        return true;\n                    });\n                if (!attachmentError) {\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .forEach(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (!previousAttachmentData) {\n                                attachmentsAdd.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            } else {\n                                attachmentsUpdate.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            }\n                        });\n                }\n            }\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkUpdateDocs.push(writeRow);\n                }\n            }\n\n            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n            const writeDoc = writeRow.document;\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'INSERT',\n                    previous: null,\n                    doc: hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'UPDATE',\n                    previous: writeRow.previous,\n                    doc: hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'DELETE',\n                    previous: writeRow.previous,\n                    doc: null\n                };\n            }\n            if (!change) {\n                if (\n                    writeRow.previous && writeRow.previous._deleted &&\n                    writeRow.document._deleted\n                ) {\n                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                } else {\n                    throw newRxError('SNH', { args: { writeRow } });\n                }\n            } else {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        }\n    });\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        errors,\n        changedDocumentIds,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRow<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc);\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = {\n                digest: attachmentData.digest,\n                length: attachmentData.length,\n                type: attachmentData.type\n            };\n        })\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                // TODO run this in the dev-mode plugin\n                // const prev = parseRevision(writeRow.previous._rev);\n                // const current = parseRevision(writeRow.document._rev);\n                // if (current.height <= prev.height) {\n                //     throw newRxError('SNH', {\n                //         dataBefore: writeRow.previous,\n                //         dataAfter: writeRow.document,\n                //         args: {\n                //             prev,\n                //             current\n                //         }\n                //     });\n                // }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        /**\n         * Yes we really want to set the revision here.\n         * If you make a plugin that relies on having it's own revision\n         * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n         */\n        data._rev = createRevision(\n            database.hashFunction,\n            data,\n            writeRow.previous\n        );\n\n        return {\n            document: data,\n            previous: writeRow.previous\n        };\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const reInsertErrors: RxStorageBulkWriteError<RxDocType>[] = Object\n                        .values(writeResult.error)\n                        .filter((error) => {\n                            if (\n                                error.status === 409 &&\n                                !error.writeRow.previous &&\n                                !error.writeRow.document._deleted &&\n                                ensureNotFalsy(error.documentInDb)._deleted\n                            ) {\n                                return true;\n                            }\n                            return false;\n                        });\n\n                    if (reInsertErrors.length > 0) {\n                        const useWriteResult: typeof writeResult = {\n                            error: flatClone(writeResult.error),\n                            success: flatClone(writeResult.success)\n                        };\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                delete useWriteResult.error[error.documentId];\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.hashFunction,\n                                                error.writeRow.document,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            useWriteResult.error = Object.assign(\n                                useWriteResult.error,\n                                subResult.error\n                            );\n                            useWriteResult.success = Object.assign(\n                                useWriteResult.success,\n                                subResult.success\n                            );\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(limit, checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    (ret as any).originalStorageInstance = storageInstance;\n\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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"}