{"version":3,"file":"rx-storage-helper.js","names":["INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","writeSingle","instance","writeRow","context","writeResult","bulkWrite","Object","keys","error","length","firstPropertyValueOfObject","ret","success","stackCheckpoints","checkpoints","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","previousDocumentData","eventId","collectionName","name","undefined","startTime","endTime","operation","overwritable","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","newRxError","id","writeError","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","randomCouchString","events","checkpoint","attachmentsAdd","attachmentsRemove","attachmentsUpdate","now","docsByIdIsMap","get","newestRow","forEach","document","documentInDb","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","attachmentId","attachmentData","isError","push","stripAttachmentsDataFromRow","_meta","lwt","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","previous","revInDb","_rev","err","updatedRow","find","previousAttachmentData","newDigest","digest","writeDoc","eventDocumentData","previousEventDocumentData","ensureNotFalsy","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","defaultHashSha256","type","useDoc","flatClone","flatCloneDocWithMeta","docId","binaryValues","binary","map","v","join","eventKey","databaseName","getWrappedStorageInstance","database","rxJsonSchema","getPrimaryFieldOfPrimaryKey","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","fillPrimaryKey","metaFieldName","hasOwnProperty","dataBefore","dataAfter","createRevision","token","originalStorageInstance","internals","options","rows","toStorageWriteRows","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","subResult","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","changeStream","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","getDefaultRxDocumentMeta","getDefaultRevision","add","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","jsonSchema","encrypted"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    ById,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment\n} from './types';\nimport {\n    createRevision,\n    defaultHashSha256,\n    ensureNotFalsy,\n    firstPropertyValueOfObject,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    randomCouchString\n} from './plugins/utils';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    const documentData = rxStorageChangeEvent.documentData;\n    const previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This can be a Map for better performance\n     * but it can also be an object because some storages\n     * need to work with something that is JSON-stringify-able\n     * and we do not want to transform a big object into a Map\n     * each time we use it.\n     */\n    docsInDb:\n        Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>> |\n        ById<RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: ById<RxStorageWriteError<RxDocType>> = {};\n    const changedDocumentIds: RxDocType[StringKeys<RxDocType>][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: randomCouchString(10),\n        events: [],\n        checkpoint: null,\n        context\n    };\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n\n\n    const startTime = now();\n\n    const docsByIdIsMap = typeof docsInDb.get === 'function';\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\n\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsByIdIsMap ? (docsInDb as any).get(id) : (docsInDb as any)[id];\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            if (hasAttachments) {\n                Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                    if (\n                        !(attachmentData as RxAttachmentWriteData).data\n                    ) {\n                        attachmentError = {\n                            documentId: id as any,\n                            isError: true,\n                            status: 510,\n                            writeRow,\n                            attachmentId\n                        };\n                        errors[id as any] = attachmentError;\n                    } else {\n                        attachmentsAdd.push({\n                            documentId: id as any,\n                            attachmentId,\n                            attachmentData: attachmentData as any\n                        });\n                    }\n                });\n            }\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                }\n                if (\n                    !newestRow ||\n                    newestRow.document._meta.lwt < writeRow.document._meta.lwt\n                ) {\n                    newestRow = writeRow as any;\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    operation: 'INSERT',\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document as any,\n                    previousDocumentData: hasAttachments && writeRow.previous ? stripAttachmentsDataFromDocument(writeRow.previous) : writeRow.previous as any,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors[id as any] = err;\n                return;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (hasAttachments) {\n                if (writeRow.document._deleted) {\n                    /**\n                     * Deleted documents must have cleared all their attachments.\n                     */\n                    if (writeRow.previous) {\n                        Object\n                            .keys(writeRow.previous._attachments)\n                            .forEach(attachmentId => {\n                                attachmentsRemove.push({\n                                    documentId: id as any,\n                                    attachmentId\n                                });\n                            });\n                    }\n                } else {\n                    // first check for errors\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .find(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (\n                                !previousAttachmentData &&\n                                !(attachmentData as RxAttachmentWriteData).data\n                            ) {\n                                attachmentError = {\n                                    documentId: id as any,\n                                    documentInDb,\n                                    isError: true,\n                                    status: 510,\n                                    writeRow,\n                                    attachmentId\n                                };\n                            }\n                            return true;\n                        });\n                    if (!attachmentError) {\n                        Object\n                            .entries(writeRow.document._attachments)\n                            .forEach(([attachmentId, attachmentData]) => {\n                                const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                                if (!previousAttachmentData) {\n                                    attachmentsAdd.push({\n                                        documentId: id as any,\n                                        attachmentId,\n                                        attachmentData: attachmentData as any\n                                    });\n                                } else {\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                    if (\n                                        (attachmentData as RxAttachmentWriteData).data &&\n                                        /**\n                                         * Performance shortcut,\n                                         * do not update the attachment data if it did not change.\n                                         */\n                                        previousAttachmentData.digest !== newDigest\n                                    ) {\n                                        attachmentsUpdate.push({\n                                            documentId: id as any,\n                                            attachmentId,\n                                            attachmentData: attachmentData as RxAttachmentWriteData\n                                        });\n                                    }\n                                }\n                            });\n                    }\n                }\n            }\n\n            if (attachmentError) {\n                errors[id as any] = attachmentError;\n            } else {\n                bulkUpdateDocs.push(updatedRow);\n                if (\n                    !newestRow ||\n                    newestRow.document._meta.lwt < updatedRow.document._meta.lwt\n                ) {\n                    newestRow = updatedRow as any;\n                }\n            }\n\n            const writeDoc = writeRow.document;\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc as any;\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc as any;\n                previousEventDocumentData = writeRow.previous;\n            } else if (writeDoc._deleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(writeRow.document) as any;\n                previousEventDocumentData = writeRow.previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            changedDocumentIds.push(id);\n            eventBulk.events.push({\n                eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                documentId: id as any,\n                documentData: ensureNotFalsy(eventDocumentData),\n                previousDocumentData: previousEventDocumentData,\n                operation: operation,\n                startTime,\n                endTime: now()\n            });\n        }\n    });\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        newestRow,\n        errors,\n        changedDocumentIds,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        digest: defaultHashSha256(data),\n        length: getAttachmentSize(data),\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                // TODO run this in the dev-mode plugin\n                // const prev = parseRevision(writeRow.previous._rev);\n                // const current = parseRevision(writeRow.document._rev);\n                // if (current.height <= prev.height) {\n                //     throw newRxError('SNH', {\n                //         dataBefore: writeRow.previous,\n                //         dataAfter: writeRow.document,\n                //         args: {\n                //             prev,\n                //             current\n                //         }\n                //     });\n                // }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        /**\n         * Yes we really want to set the revision here.\n         * If you make a plugin that relies on having its own revision\n         * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n         */\n        data._rev = createRevision(\n            database.token,\n            writeRow.previous\n        );\n\n        return {\n            document: data,\n            previous: writeRow.previous\n        };\n    }\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] = Object\n                        .values(writeResult.error)\n                        .filter((error) => {\n                            if (\n                                error.status === 409 &&\n                                !error.writeRow.previous &&\n                                !error.writeRow.document._deleted &&\n                                ensureNotFalsy(error.documentInDb)._deleted\n                            ) {\n                                return true;\n                            }\n                            return false;\n                        }) as any;\n\n                    if (reInsertErrors.length > 0) {\n                        const useWriteResult: typeof writeResult = {\n                            error: flatClone(writeResult.error),\n                            success: flatClone(writeResult.success)\n                        };\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                delete useWriteResult.error[error.documentId];\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.token,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            useWriteResult.error = Object.assign(\n                                useWriteResult.error,\n                                subResult.error\n                            );\n                            useWriteResult.success = Object.assign(\n                                useWriteResult.success,\n                                subResult.success\n                            );\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    database.storageInstances.add(ret);\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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"}