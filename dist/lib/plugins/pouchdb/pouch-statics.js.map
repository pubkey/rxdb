{"version":3,"file":"pouch-statics.js","names":["RxStoragePouchStatics","getSortComparator","schema","query","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","sortOptions","sort","selector","inMemoryFields","Object","keys","filter","key","startsWith","fun","a","b","newRxError","args","rows","map","doc","pouchSwapPrimaryToId","sortedRows","filterInMemoryFields","length","_id","getQueryMatcher","massagedSelector","massageSelector","_deleted","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","preparePouchDbQuery","checkpointSchema","POUCHDB_CHECKPOINT_SCHEMA","flatClone","forEach","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","getSchemaByObjectPath","type","$gt","overwritable","isDevMode","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","ensureNotFalsy","k","v","Array","isArray","index","indexMaybeArray","indexArray","isMaybeReadonlyArray","str","indexName","getPouchIndexDesignDocNameByIndex","use_index","primarySwapPouchDbQuerySelector"],"sources":["../../../../src/plugins/pouchdb/pouch-statics.ts"],"sourcesContent":["import {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { newRxError } from '../../rx-error';\n\nimport {\n    getPouchIndexDesignDocNameByIndex,\n    POUCHDB_CHECKPOINT_SCHEMA,\n    pouchSwapPrimaryToId,\n    primarySwapPouchDbQuerySelector\n} from './pouchdb-helper';\nimport type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport {\n    getPrimaryFieldOfPrimaryKey,\n    getSchemaByObjectPath\n} from '../../rx-schema-helper';\nimport type {\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    PreparedQuery,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageStatics,\n    StringKeys\n} from '../../types';\nimport { overwritable } from '../../overwritable';\nimport { ensureNotFalsy, flatClone, isMaybeReadonlyArray } from '../../util';\n\nexport const RxStoragePouchStatics: RxStorageStatics = {\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath: StringKeys<RxDocType> = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as any;\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const selector = query.selector ? query.selector : {};\n        const inMemoryFields = Object\n            .keys(selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    },\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const selector = query.selector ? query.selector : {};\n        const massagedSelector = massageSelector(selector);\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cloned = pouchSwapPrimaryToId(primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    },\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        return preparePouchDbQuery(\n            schema,\n            mutateableQuery\n        );\n    },\n    checkpointSchema: POUCHDB_CHECKPOINT_SCHEMA\n};\n\n/**\n * pouchdb has many bugs and strange behaviors\n * this functions takes a normal mango query\n * and transforms it to one that fits for pouchdb\n */\nexport function preparePouchDbQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mutateableQuery: MangoQuery<RxDocType>\n): PreparedQuery<RxDocType> {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const query = flatClone(mutateableQuery);\n    if (query.selector) {\n        query.selector = flatClone(query.selector);\n    }\n\n    /**\n     * because sort won't work on unused keys we have to workaround\n     * so we add the key to the selector if necessary\n     * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n     */\n    if (query.sort) {\n        query.sort.forEach(sortPart => {\n            const key = Object.keys(sortPart)[0];\n            const comparisonOperators = ['$gt', '$gte', '$lt', '$lte', '$eq'];\n            const keyUsed = query.selector && query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op));\n\n            if (!keyUsed) {\n                const schemaObj = getSchemaByObjectPath(schema, key);\n                if (!schemaObj) {\n                    throw newRxError('QU5', {\n                        query,\n                        key,\n                        schema\n                    });\n                }\n                if (!query.selector) {\n                    query.selector = {};\n                }\n                if (!query.selector[key]) {\n                    query.selector[key] = {};\n                }\n                switch (schemaObj.type) {\n                    case 'number':\n                    case 'integer':\n                        // TODO change back to -Infinity when issue resolved\n                        // @link https://github.com/pouchdb/pouchdb/issues/6454\n                        // -Infinity does not work since pouchdb 6.2.0\n                        query.selector[key].$gt = -9999999999999999999999999999;\n                        break;\n                    case 'string':\n                        /**\n                         * strings need an empty string, see\n                         * @link https://github.com/pubkey/rxdb/issues/585\n                         */\n                        if (typeof query.selector[key] !== 'string') {\n                            query.selector[key].$gt = '';\n                        }\n                        break;\n                    default:\n                        query.selector[key].$gt = null;\n                        break;\n                }\n            }\n        });\n    }\n\n    // regex does not work over the primary key\n    if (\n        overwritable.isDevMode() &&\n        query.selector &&\n        query.selector[primaryKey as any] &&\n        query.selector[primaryKey as any].$regex\n    ) {\n        throw newRxError('QU4', {\n            path: primaryKey as any,\n            query: mutateableQuery\n        });\n    }\n\n    // primary-swap sorting\n    if (query.sort) {\n        const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n            const key = Object.keys(part)[0];\n            const direction: MangoQuerySortDirection = Object.values(part)[0];\n            const useKey = key === primaryKey ? '_id' : key;\n            const newPart = { [useKey]: direction };\n            return newPart as any;\n        });\n        query.sort = sortArray;\n    }\n\n    // strip empty selectors\n    Object.entries(ensureNotFalsy(query.selector)).forEach(([k, v]) => {\n        if (\n            typeof v === 'object' &&\n            v !== null &&\n            !Array.isArray(v) &&\n            Object.keys((v as any)).length === 0\n        ) {\n            delete ensureNotFalsy(query.selector)[k];\n        }\n    });\n\n    /**\n     * Set use_index\n     * @link https://pouchdb.com/guides/mango-queries.html#use_index\n     */\n    if (mutateableQuery.index) {\n        const indexMaybeArray = mutateableQuery.index;\n        let indexArray: string[] = isMaybeReadonlyArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n        indexArray = indexArray.map(str => {\n            if (str === primaryKey) {\n                return '_id';\n            } else {\n                return str;\n            }\n        });\n        const indexName = getPouchIndexDesignDocNameByIndex(indexArray);\n        delete query.index;\n        (query as any).use_index = indexName;\n    }\n\n    query.selector = primarySwapPouchDbQuerySelector(query.selector, primaryKey);\n\n    return query;\n}\n"],"mappings":"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"}