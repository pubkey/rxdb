{"version":3,"file":"pouch-statics.js","names":["RxStoragePouchStatics","getSortComparator","schema","query","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","sortOptions","sort","selector","inMemoryFields","Object","keys","filter","key","startsWith","fun","a","b","newRxError","args","rows","map","doc","pouchSwapPrimaryToId","sortedRows","filterInMemoryFields","length","_id","getQueryMatcher","massagedSelector","massageSelector","_deleted","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","preparePouchDbQuery","checkpointSchema","POUCHDB_CHECKPOINT_SCHEMA","forEach","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","getSchemaByObjectPath","type","$gt","overwritable","isDevMode","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","ensureNotFalsy","k","v","Array","isArray","index","indexMaybeArray","indexArray","isMaybeReadonlyArray","str","indexName","getPouchIndexDesignDocNameByIndex","use_index","primarySwapPouchDbQuerySelector"],"sources":["../../../../src/plugins/pouchdb/pouch-statics.ts"],"sourcesContent":["import {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { newRxError } from '../../rx-error';\n\nimport {\n    getPouchIndexDesignDocNameByIndex,\n    POUCHDB_CHECKPOINT_SCHEMA,\n    pouchSwapPrimaryToId,\n    primarySwapPouchDbQuerySelector\n} from './pouchdb-helper';\nimport type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport {\n    getPrimaryFieldOfPrimaryKey,\n    getSchemaByObjectPath\n} from '../../rx-schema-helper';\nimport type {\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    PreparedQuery,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageStatics,\n    StringKeys\n} from '../../types';\nimport { overwritable } from '../../overwritable';\nimport { ensureNotFalsy, isMaybeReadonlyArray } from '../../util';\n\nexport const RxStoragePouchStatics: RxStorageStatics = {\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath: StringKeys<RxDocType> = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as any;\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const selector = query.selector ? query.selector : {};\n        const inMemoryFields = Object\n            .keys(selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    },\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const selector = query.selector ? query.selector : {};\n        const massagedSelector = massageSelector(selector);\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cloned = pouchSwapPrimaryToId(primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    },\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        return preparePouchDbQuery(\n            schema,\n            mutateableQuery\n        );\n    },\n    checkpointSchema: POUCHDB_CHECKPOINT_SCHEMA\n};\n\n/**\n * pouchdb has many bugs and strange behaviors\n * this functions takes a normal mango query\n * and transforms it to one that fits for pouchdb\n */\nexport function preparePouchDbQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mutateableQuery: MangoQuery<RxDocType>\n): PreparedQuery<RxDocType> {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const query = mutateableQuery;\n\n    /**\n     * because sort wont work on unused keys we have to workaround\n     * so we add the key to the selector if necessary\n     * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n     */\n    if (query.sort) {\n        query.sort.forEach(sortPart => {\n            const key = Object.keys(sortPart)[0];\n            const comparisonOperators = ['$gt', '$gte', '$lt', '$lte', '$eq'];\n            const keyUsed = query.selector && query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op));\n\n            if (!keyUsed) {\n                const schemaObj = getSchemaByObjectPath(schema, key);\n                if (!schemaObj) {\n                    throw newRxError('QU5', {\n                        query,\n                        key,\n                        schema\n                    });\n                }\n                if (!query.selector) {\n                    query.selector = {};\n                }\n                if (!query.selector[key]) {\n                    query.selector[key] = {};\n                }\n                switch (schemaObj.type) {\n                    case 'number':\n                    case 'integer':\n                        // TODO change back to -Infinity when issue resolved\n                        // @link https://github.com/pouchdb/pouchdb/issues/6454\n                        // -Infinity does not work since pouchdb 6.2.0\n                        query.selector[key].$gt = -9999999999999999999999999999;\n                        break;\n                    case 'string':\n                        /**\n                         * strings need an empty string, see\n                         * @link https://github.com/pubkey/rxdb/issues/585\n                         */\n                        if (typeof query.selector[key] !== 'string') {\n                            query.selector[key].$gt = '';\n                        }\n                        break;\n                    default:\n                        query.selector[key].$gt = null;\n                        break;\n                }\n            }\n        });\n    }\n\n    // regex does not work over the primary key\n    if (\n        overwritable.isDevMode() &&\n        query.selector &&\n        query.selector[primaryKey as any] &&\n        query.selector[primaryKey as any].$regex\n    ) {\n        throw newRxError('QU4', {\n            path: primaryKey as any,\n            query: mutateableQuery\n        });\n    }\n\n    // primary-swap sorting\n    if (query.sort) {\n        const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n            const key = Object.keys(part)[0];\n            const direction: MangoQuerySortDirection = Object.values(part)[0];\n            const useKey = key === primaryKey ? '_id' : key;\n            const newPart = { [useKey]: direction };\n            return newPart as any;\n        });\n        query.sort = sortArray;\n    }\n\n    // strip empty selectors\n    Object.entries(ensureNotFalsy(query.selector)).forEach(([k, v]) => {\n        if (\n            typeof v === 'object' &&\n            v !== null &&\n            !Array.isArray(v) &&\n            Object.keys((v as any)).length === 0\n        ) {\n            delete ensureNotFalsy(query.selector)[k];\n        }\n    });\n\n    /**\n     * Set use_index\n     * @link https://pouchdb.com/guides/mango-queries.html#use_index\n     */\n    if (mutateableQuery.index) {\n        const indexMaybeArray = mutateableQuery.index;\n        let indexArray: string[] = isMaybeReadonlyArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n        indexArray = indexArray.map(str => {\n            if (str === primaryKey) {\n                return '_id';\n            } else {\n                return str;\n            }\n        });\n        const indexName = getPouchIndexDesignDocNameByIndex(indexArray);\n        delete mutateableQuery.index;\n        (mutateableQuery as any).use_index = indexName;\n    }\n\n    query.selector = primarySwapPouchDbQuerySelector(query.selector, primaryKey);\n\n    return query;\n}\n"],"mappings":"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"}