{"version":3,"file":"rx-storage-instance-pouch.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","pouchFindDocumentsById","instance","ids","deleted","ensureNotClosed","ret","nonParallelQueue","internals","pouch","changes","live","since","doc_ids","style","viaChanges","Promise","all","results","map","get","id","rev","firstDoc","useFirstDoc","pouchDocumentDataToRxDocumentData","primaryPath","allDocs","include_docs","keys","pouchResult","rows","filter","row","doc","forEach","docData","lastId","RxStorageInstancePouch","storage","databaseName","collectionName","schema","options","changes$","Subject","subs","closed","PROMISE_RESOLVE_VOID","OPEN_POUCHDB_STORAGE_INSTANCES","add","getPrimaryFieldOfPrimaryKey","primaryKey","emitter","getCustomEventEmitterByPouch","emittedEventBulkIds","ObliviousSet","eventSub","subject","subscribe","eventBulk","events","length","has","event","change","pouchSwapIdToPrimary","previous","next","push","close","sub","unsubscribe","OPEN_POUCH_INSTANCES","pouchInstanceId","remove","destroy","bulkWrite","documentWrites","context","newRxError","args","writeRowById","Map","insertDocsById","writeDocs","writeData","document","_meta","lwt","_rev","primary","set","storeDocumentData","rxDocumentDataToPouchDocumentData","previousDocsInDb","success","error","bulkDocs","new_edits","custom","resultRow","writeRow","getFromMapOrThrow","previousDoc","err","isError","status","documentId","documentInDb","pushObj","flatClone","_attachments","writeAttachmentsToAttachments","query","preparedQuery","find","findResult","documents","docs","pouchDoc","useDoc","getAttachmentData","attachmentId","getAttachment","attachmentData","isBuffer","Buffer","Blob","blobBufferUtil","toBase64String","findDocumentsById","changeStream","asObservable","cleanup","_minimumDeletedTime","compact","getChangedDocumentsSince","limit","checkpoint","changedDocuments","documentsData","Object","sequence","lastSequence","Error","lastRow","lastOfArray","changeRow","getFromObjectOrThrow","pouchChangesOpts","descending","first","skippedDesignDocuments","pouchResults","addChangedDocuments","isDesignDoc","startsWith","POUCHDB_DESIGN_PREFIX","seq","concat","last_seq","conflictResultionTasks","resolveConflictResultionTask","_taskSolution"],"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"sourcesContent":["import { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive,\n    PouchCheckpoint,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    OPEN_POUCH_INSTANCES,\n    POUCHDB_DESIGN_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getFromMapOrThrow,\n    getFromObjectOrThrow,\n    lastOfArray,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\n\nlet lastId = 0;\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings,\n    PouchCheckpoint\n> {\n    public readonly id: number = lastId++;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>> = new Subject();\n    private subs: Subscription[] = [];\n    public primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed: boolean = false;\n\n\n    /**\n     * Some PouchDB operations give wrong results when they run in parallel.\n     * So we have to ensure they are queued up.\n     */\n    public nonParallelQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    constructor(\n        public readonly storage: RxStorage<PouchStorageInternals, PouchSettings>,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch<RxDocType>(this.internals.pouch);\n\n        /**\n         * Contains all eventIds that of emitted events,\n         * used because multi-instance pouchdbs often will reemit the same\n         * event on the other browser tab so we have to de-duplicate them.\n         */\n        const emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n        const eventSub = emitter.subject.subscribe((eventBulk) => {\n            if (\n                eventBulk.events.length === 0 ||\n                emittedEventBulkIds.has(eventBulk.id)\n            ) {\n                return;\n            }\n            emittedEventBulkIds.add(eventBulk.id);\n\n            // rewrite primaryPath of all events\n            eventBulk.events.forEach(event => {\n                if (event.change.doc) {\n                    event.change.doc = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.doc as any\n                    );\n                }\n                if (event.change.previous) {\n                    event.change.previous = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.previous as any\n                    );\n                }\n            });\n\n            this.changes$.next(eventBulk);\n        });\n        this.subs.push(eventSub);\n    }\n\n    close() {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        OPEN_POUCH_INSTANCES.delete(this.internals.pouchInstanceId);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        OPEN_POUCH_INSTANCES.delete(this.internals.pouchInstanceId);\n\n        await this.internals.pouch.destroy();\n    }\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        ensureNotClosed(this);\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n        const insertDocsById: Map<string, any> = new Map();\n        const writeDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n\n            /**\n             * Ensure that _meta.lwt is set correctly\n             */\n            if (\n                writeData.document._meta.lwt < 1000 ||\n                (\n                    writeData.previous &&\n                    writeData.previous._meta.lwt >= writeData.document._meta.lwt\n                )\n            ) {\n                throw newRxError('SNH', {\n                    args: writeData\n                });\n            }\n\n            /**\n             * Ensure that a revision exists,\n             * having an empty revision here would not throw\n             * but just not resolve forever.\n             */\n            if (!writeData.document._rev) {\n                throw newRxError('SNH', {\n                    args: writeData\n                });\n            }\n\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n            insertDocsById.set(primary, storeDocumentData);\n            return storeDocumentData;\n        });\n\n        const previousDocsInDb: Map<string, RxDocumentData<any>> = new Map();\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n            const pouchResult = await this.internals.pouch.bulkDocs(writeDocs, {\n                new_edits: false,\n                custom: {\n                    primaryPath: this.primaryPath,\n                    writeRowById,\n                    insertDocsById,\n                    previousDocsInDb,\n                    context\n                }\n            } as any);\n            return Promise.all(\n                pouchResult.map(async (resultRow) => {\n                    const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                    if ((resultRow as PouchWriteError).error) {\n                        const previousDoc = getFromMapOrThrow(previousDocsInDb, resultRow.id);\n                        const err: RxStorageBulkWriteError<RxDocType> = {\n                            isError: true,\n                            status: 409,\n                            documentId: resultRow.id,\n                            writeRow,\n                            documentInDb: pouchDocumentDataToRxDocumentData(\n                                this.primaryPath,\n                                previousDoc\n                            )\n                        };\n                        ret.error[resultRow.id] = err;\n                    } else {\n                        let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                        pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                        pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                        // replace the inserted attachments with their diggest\n                        pushObj._attachments = {};\n                        if (!writeRow.document._attachments) {\n                            writeRow.document._attachments = {};\n                        } else {\n                            pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                        }\n                        ret.success[resultRow.id] = pushObj;\n                    }\n                })\n            );\n        });\n        await this.nonParallelQueue;\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<string> {\n        ensureNotClosed(this);\n        let attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n\n        /**\n         * In Node.js, PouchDB works with Buffers because it is old and Node.js did\n         * not support Blob at the time is was coded.\n         * So here we have to transform the Buffer to a Blob.\n         */\n        const isBuffer = typeof Buffer !== 'undefined' && Buffer.isBuffer(attachmentData);\n        if (isBuffer) {\n            attachmentData = new Blob([attachmentData]);\n        }\n\n        const ret = await blobBufferUtil.toBase64String(attachmentData);\n        return ret;\n    }\n\n    findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        return pouchFindDocumentsById<RxDocType>(\n            this,\n            ids,\n            deleted\n        );\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    cleanup(_minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        /**\n         * PouchDB does not support purging documents.\n         * So instead we run a compaction that might at least help a bit\n         * in freeing up disc space.\n         * @link https://github.com/pouchdb/pouchdb/issues/802\n         */\n        return this.internals.pouch\n            .compact()\n            .then(() => true);\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: PouchCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: PouchCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        if (!limit || typeof limit !== 'number') {\n            throw new Error('wrong limit');\n        }\n\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: limit,\n            include_docs: false,\n            since: checkpoint ? checkpoint.sequence : 0,\n            descending: false\n        };\n\n        let lastSequence = 0;\n        let first = true;\n        let skippedDesignDocuments = 0;\n        let changedDocuments: { id: string; sequence: number; }[] = [];\n        /**\n         * Because PouchDB also returns changes of _design documents,\n         * we have to fill up the results with more changes if this happens.\n         */\n        while (first || skippedDesignDocuments > 0) {\n            first = false;\n            skippedDesignDocuments = 0;\n            const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n            const addChangedDocuments = pouchResults.results\n                .filter(row => {\n                    const isDesignDoc = row.id.startsWith(POUCHDB_DESIGN_PREFIX);\n                    if (isDesignDoc) {\n                        skippedDesignDocuments = skippedDesignDocuments + 1;\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })\n                .map(row => ({\n                    id: row.id,\n                    sequence: row.seq\n                }));\n            changedDocuments = changedDocuments.concat(addChangedDocuments);\n            lastSequence = pouchResults.last_seq;\n\n            // modify pouch options for next run of pouch.changes()\n            pouchChangesOpts.since = lastSequence;\n            pouchChangesOpts.limit = skippedDesignDocuments;\n        }\n\n        const documentsData = await pouchFindDocumentsById<RxDocType>(\n            this,\n            changedDocuments.map(o => o.id),\n            true\n        );\n\n        if (\n            Object.keys(documentsData).length > 0 &&\n            checkpoint && checkpoint.sequence === lastSequence\n        ) {\n            /**\n             * When documents are returned, it makes no sense\n             * if the sequence is equal to the one given at the checkpoint.\n             */\n            throw new Error('same sequence');\n        }\n\n        const lastRow = lastOfArray(changedDocuments);\n        const documents = changedDocuments.map(changeRow => getFromObjectOrThrow(documentsData, changeRow.id));\n\n        return {\n            documents,\n            checkpoint: lastRow ? {\n                sequence: lastRow.sequence\n            } : checkpoint ? checkpoint : {\n                sequence: -1\n            }\n        }\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstancePouch<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstancePouch is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n\n\n/**\n * Because we internally use the findDocumentsById()\n * method, it is defined here because RxStorage wrappers\n * might swap out the function.\n */\nasync function pouchFindDocumentsById<RxDocType>(\n    instance: RxStorageInstancePouch<RxDocType>,\n    ids: string[],\n    deleted: boolean\n): Promise<RxDocumentDataById<RxDocType>> {\n    ensureNotClosed(instance);\n    const ret: RxDocumentDataById<RxDocType> = {};\n\n    /**\n     * On deleted documents, PouchDB will only return the tombstone.\n     * So we have to get the properties directly for each document\n     * with the hack of getting the changes and then make one request per document\n     * with the latest revision.\n     * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n     * when one past revision was written via new_edits=false\n     * @link https://stackoverflow.com/a/63516761/3443137\n     */\n    if (deleted) {\n        instance.nonParallelQueue = instance.nonParallelQueue.then(async () => {\n            const viaChanges = await instance.internals.pouch.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n            await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await instance.internals.pouch.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            style: 'all_docs'\n                        }\n                    );\n                    const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                        instance.primaryPath,\n                        firstDoc\n                    );\n                    ret[result.id] = useFirstDoc;\n                })\n            );\n        });\n        await instance.nonParallelQueue;\n        return ret;\n    } else {\n        instance.nonParallelQueue = instance.nonParallelQueue.then(async () => {\n            const pouchResult = await instance.internals.pouch.allDocs({\n                include_docs: true,\n                keys: ids\n            });\n            pouchResult.rows\n                .filter(row => !!row.doc)\n                .forEach(row => {\n                    let docData = row.doc;\n                    docData = pouchDocumentDataToRxDocumentData(\n                        instance.primaryPath,\n                        docData\n                    );\n                    ret[row.id] = docData;\n                });\n        });\n        await instance.nonParallelQueue;\n        return ret;\n    }\n}\n"],"mappings":"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"}