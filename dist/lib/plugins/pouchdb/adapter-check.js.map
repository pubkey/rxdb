{"version":3,"file":"adapter-check.js","names":["POUCHDB_LOCATION","checkAdapter","adapter","_id","randomCouchString","pouch","PouchDB","adapterObject","auto_compaction","revs_limit","err","PROMISE_RESOLVE_FALSE","recoveredDoc","info","then","put","value","ok","time","now","get","doc","remove"],"sources":["../../../../src/plugins/pouchdb/adapter-check.ts"],"sourcesContent":["/**\n * this plugin adds the checkAdapter-function to rxdb\n * you can use it to check if the given adapter is working in the current environment\n */\nimport {\n    PouchDB\n} from './pouch-db';\nimport {\n    adapterObject,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString\n} from '../../util';\nimport type {\n    PouchDBInstance\n} from '../../types';\n\n/**\n * The same pouchdb-location is used on each run\n * To ensure when this is run multiple times,\n * there will not be many created databases\n */\nexport const POUCHDB_LOCATION = 'rxdb-adapter-check';\n\nexport function checkAdapter(adapter: any): Promise<any> {\n    // id of the document which is stored and removed to ensure everything works\n    const _id = POUCHDB_LOCATION + '-' + randomCouchString(12);\n\n    let pouch: PouchDBInstance;\n    try {\n        pouch = new (PouchDB as any)(\n            POUCHDB_LOCATION,\n            adapterObject(adapter), {\n            auto_compaction: true,\n            revs_limit: 1\n        }\n        );\n    } catch (err) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let recoveredDoc: any;\n    return pouch.info() // ensure that we wait until db is usable\n        // ensure write works\n        .then(() => pouch.put({\n            _id,\n            value: {\n                ok: true,\n                time: now()\n            }\n        }))\n        // ensure read works\n        .then(() => pouch.get(_id))\n        .then(doc => recoveredDoc = doc)\n        // ensure remove works\n        .then(() => pouch.remove(recoveredDoc))\n        .then(() => true)\n        .then(() => {\n            if (recoveredDoc && recoveredDoc.value && recoveredDoc.value.ok)\n                return true;\n            else\n                return false;\n        })\n        .catch(() => false);\n\n    /**\n     * NOTICE:\n     * Do not remove the pouchdb-instance after the test\n     * The problem is that when this function is call in parallel,\n     * for example when you restore the tabs from a browser-session and open\n     * the same website multiple times at the same time,\n     * calling destroy would possibly crash the other call\n     */\n}\n"],"mappings":";;;;;;;AAIA;AAGA;AAPA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AACA;AACO,IAAMA,gBAAgB,GAAG,oBAAoB;AAAC;AAE9C,SAASC,YAAY,CAACC,OAAY,EAAgB;EACrD;EACA,IAAMC,GAAG,GAAGH,gBAAgB,GAAG,GAAG,GAAG,IAAAI,uBAAiB,EAAC,EAAE,CAAC;EAE1D,IAAIC,KAAsB;EAC1B,IAAI;IACAA,KAAK,GAAG,IAAKC,gBAAO,CAChBN,gBAAgB,EAChB,IAAAO,mBAAa,EAACL,OAAO,CAAC,EAAE;MACxBM,eAAe,EAAE,IAAI;MACrBC,UAAU,EAAE;IAChB,CAAC,CACA;EACL,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOC,2BAAqB;EAChC;EAEA,IAAIC,YAAiB;EACrB,OAAOP,KAAK,CAACQ,IAAI,EAAE,CAAC;EAChB;EAAA,CACCC,IAAI,CAAC;IAAA,OAAMT,KAAK,CAACU,GAAG,CAAC;MAClBZ,GAAG,EAAHA,GAAG;MACHa,KAAK,EAAE;QACHC,EAAE,EAAE,IAAI;QACRC,IAAI,EAAE,IAAAC,SAAG;MACb;IACJ,CAAC,CAAC;EAAA;EACF;EAAA,CACCL,IAAI,CAAC;IAAA,OAAMT,KAAK,CAACe,GAAG,CAACjB,GAAG,CAAC;EAAA,EAAC,CAC1BW,IAAI,CAAC,UAAAO,GAAG;IAAA,OAAIT,YAAY,GAAGS,GAAG;EAAA;EAC/B;EAAA,CACCP,IAAI,CAAC;IAAA,OAAMT,KAAK,CAACiB,MAAM,CAACV,YAAY,CAAC;EAAA,EAAC,CACtCE,IAAI,CAAC;IAAA,OAAM,IAAI;EAAA,EAAC,CAChBA,IAAI,CAAC,YAAM;IACR,IAAIF,YAAY,IAAIA,YAAY,CAACI,KAAK,IAAIJ,YAAY,CAACI,KAAK,CAACC,EAAE,EAC3D,OAAO,IAAI,CAAC,KAEZ,OAAO,KAAK;EACpB,CAAC,CAAC,SACI,CAAC;IAAA,OAAM,KAAK;EAAA,EAAC;;EAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}