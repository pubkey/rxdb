{"version":3,"file":"index.js","names":["_utils","require","_leaderElection","_replication","_index","_rxjs","_couchdbHelper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_replicationHelper","_couchdbTypes","RxCouchDBReplicationState","_RxReplicationState","_inheritsLoose2","default","url","fetch","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","_this","RxReplicationState","replicateCouchDB","options","conflictHandler","addRxPlugin","RxDBLeaderElectionPlugin","primaryPath","schema","endsWith","newRxError","args","name","flatClone","waitForLeadership","pullStream$","Subject","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","mergeUrlQueryParams","style","feed","include_docs","since","sequence","heartbeat","limit","seq_interval","response","replicationState","jsonResponse","json","results","documents","map","row","couchDBDocToRxDocData","ensureNotFalsy","doc","checkpoint","last_seq","modifier","stream$","asObservable","replicationPrimitivesPush","rows","conflicts","pushRowsById","Map","id","newDocumentState","set","docsByIdResponse","method","headers","body","JSON","stringify","deleted","docsByIdRows","nonConflictRows","remoteRevById","Promise","all","getFromMapOrThrow","realMasterState","pushRow","conflictHandlerResult","assumedMasterState","isEqual","_rev","docs","docId","sendDoc","has","couchSwapPrimaryToId","responseJson","conflictAgainIds","writeResultRow","isConflict","error","ok","length","getConflictDocsUrl","conflictResponse","conflictResponseJson","conflictAgainRow","getDefaultFetch","COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX","database","hashFunction","startBefore","start","bind","lastRequestStartTime","now","isStopped","err","subjects","next","errorToPlainJson","promiseWait","awaitRetry","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-couchdb/index.ts"],"sourcesContent":["/**\n * This plugin can be used to sync collections with a remote CouchDB endpoint.\n */\nimport {\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    getFromMapOrThrow,\n    now,\n    promiseWait\n} from '../../plugins/utils';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem,\n    CouchdbChangesResult,\n    CouchBulkDocResultRow,\n    CouchAllDocsResponse,\n    RxConflictHandler\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    newRxError,\n    WithDeleted\n} from '../../index';\n\nimport { Subject } from 'rxjs';\nimport type {\n    CouchDBCheckpointType,\n    FetchMethodType,\n    SyncOptionsCouchDB\n} from './couchdb-types';\nimport {\n    couchDBDocToRxDocData,\n    COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX,\n    mergeUrlQueryParams,\n    couchSwapPrimaryToId,\n    getDefaultFetch\n} from './couchdb-helper';\nimport { awaitRetry } from '../replication/replication-helper';\n\nexport * from './couchdb-helper';\nexport * from './couchdb-types';\n\nexport class RxCouchDBReplicationState<RxDocType> extends RxReplicationState<RxDocType, CouchDBCheckpointType> {\n    constructor(\n        public readonly url: string,\n        public fetch: FetchMethodType,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CouchDBCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateCouchDB<RxDocType>(\n    options: SyncOptionsCouchDB<RxDocType>\n) {\n    const collection = options.collection;\n    const conflictHandler: RxConflictHandler<any> = collection.conflictHandler;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const primaryPath = options.collection.schema.primaryPath;\n\n    if (!options.url.endsWith('/')) {\n        throw newRxError('RC_COUCHDB_1', {\n            args: {\n                collection: options.collection.name,\n                url: options.url\n            }\n        });\n    }\n\n    options = flatClone(options);\n    if (!options.url.endsWith('/')) {\n        options.url = options.url + '/';\n    }\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CouchDBCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CouchDBCheckpointType> | undefined;\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CouchDBCheckpointType | undefined,\n                batchSize: number\n            ) {\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/changes.html\n                 */\n                const url = options.url + '_changes?' + mergeUrlQueryParams({\n                    style: 'all_docs',\n                    feed: 'normal',\n                    include_docs: true,\n                    since: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0,\n                    heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                    limit: batchSize,\n                    seq_interval: batchSize\n                });\n\n                const response = await replicationState.fetch(url);\n                const jsonResponse: CouchdbChangesResult = await response.json();\n                if (!jsonResponse.results) {\n                    throw newRxError('RC_COUCHDB_2', {\n                        args: { jsonResponse }\n                    });\n                }\n                const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                    .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                return {\n                    documents,\n                    checkpoint: {\n                        sequence: jsonResponse.last_seq\n                    }\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const conflicts: WithDeleted<RxDocType>[] = [];\n                const pushRowsById = new Map<string, RxReplicationWriteToMasterRow<RxDocType>>();\n                rows.forEach(row => {\n                    const id = (row.newDocumentState as any)[primaryPath];\n                    pushRowsById.set(id, row);\n                });\n\n                /**\n                 * First get the current master state from the remote\n                 * to check for conflicts\n                 */\n                const docsByIdResponse = await replicationState.fetch(\n                    options.url + '_all_docs?' + mergeUrlQueryParams({}),\n                    {\n                        method: 'POST',\n                        headers: {\n                            'content-type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            keys: rows.map(row => (row.newDocumentState as any)[primaryPath]),\n                            include_docs: true,\n                            deleted: 'ok'\n                        })\n                    }\n                );\n                const docsByIdRows: CouchAllDocsResponse = await docsByIdResponse.json();\n                const nonConflictRows: typeof rows = [];\n                const remoteRevById = new Map<string, string>();\n                await Promise.all(\n                    docsByIdRows.rows.map(async (row) => {\n                        if (!row.doc) {\n                            nonConflictRows.push(getFromMapOrThrow(pushRowsById, row.key));\n                            return;\n                        }\n                        const realMasterState: WithDeleted<RxDocType> = couchDBDocToRxDocData(primaryPath, row.doc);\n                        const pushRow = getFromMapOrThrow(pushRowsById, row.id);\n                        const conflictHandlerResult = await conflictHandler({\n                            realMasterState,\n                            newDocumentState: pushRow.assumedMasterState\n                        }, 'couchdb-push-1');\n                        if (conflictHandlerResult.isEqual) {\n                            remoteRevById.set(row.id, row.doc._rev);\n                            nonConflictRows.push(pushRow);\n                        } else {\n                            conflicts.push(realMasterState);\n                        }\n                    })\n                );\n\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/bulk-api.html#db-bulk-docs\n                 */\n                const url = options.url + '_bulk_docs?' + mergeUrlQueryParams({});\n                const body = {\n                    docs: nonConflictRows.map(row => {\n                        const docId = (row.newDocumentState as any)[primaryPath];\n                        const sendDoc = flatClone(row.newDocumentState);\n                        if (remoteRevById.has(docId)) {\n                            (sendDoc as any)._rev = getFromMapOrThrow(remoteRevById, docId);\n                        }\n                        return couchSwapPrimaryToId(collection.schema.primaryPath, sendDoc);\n                    })\n                };\n\n                const response = await replicationState.fetch(\n                    url,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'content-type': 'application/json'\n                        },\n                        body: JSON.stringify(body)\n                    }\n                );\n                const responseJson: CouchBulkDocResultRow[] = await response.json();\n\n                // get conflicting writes\n                const conflictAgainIds: string[] = [];\n                responseJson.forEach(writeResultRow => {\n                    const isConflict = writeResultRow.error === 'conflict';\n                    if (!writeResultRow.ok && !isConflict) {\n                        throw newRxError('SNH', { args: { writeResultRow } });\n                    }\n                    if (isConflict) {\n                        conflictAgainIds.push(writeResultRow.id);\n                    }\n                });\n\n                if (conflictAgainIds.length === 0) {\n                    return conflicts;\n                }\n\n                const getConflictDocsUrl = options.url + '_all_docs?' + mergeUrlQueryParams({\n                    include_docs: true,\n                    keys: JSON.stringify(conflictAgainIds)\n                });\n                const conflictResponse = await replicationState.fetch(getConflictDocsUrl);\n                const conflictResponseJson: CouchAllDocsResponse = await conflictResponse.json();\n                conflictResponseJson.rows.forEach(conflictAgainRow => {\n                    conflicts.push(couchDBDocToRxDocData(collection.schema.primaryPath, conflictAgainRow.doc));\n                });\n\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n    const replicationState = new RxCouchDBReplicationState<RxDocType>(\n        options.url,\n        options.fetch ? options.fetch : getDefaultFetch(),\n        COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX + options.collection.database.hashFunction(options.url),\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        replicationState.start = () => {\n            let since: string | number = 'now';\n            const batchSize = options.pull && options.pull.batchSize ? options.pull.batchSize : 20;\n\n            (async () => {\n                let lastRequestStartTime = now();\n                while (!replicationState.isStopped()) {\n                    const url = options.url + '_changes?' + mergeUrlQueryParams({\n                        style: 'all_docs',\n                        feed: 'longpoll',\n                        since,\n                        include_docs: true,\n                        heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                        limit: batchSize,\n                        seq_interval: batchSize\n                    });\n\n                    let jsonResponse: CouchdbChangesResult;\n                    try {\n                        lastRequestStartTime = now();\n                        jsonResponse = await (await replicationState.fetch(url)).json();\n                    } catch (err: any) {\n                        replicationState.subjects.error.next(\n                            newRxError('RC_STREAM', {\n                                args: { url },\n                                error: errorToPlainJson(err)\n                            })\n                        );\n\n                        if (lastRequestStartTime < (now() - replicationState.retryTime)) {\n                            /**\n                             * Last request start was long ago,\n                             * so we directly retry.\n                             * This mostly happens on timeouts\n                             * which are normal behavior for long polling requests.\n                             */\n                            await promiseWait(0);\n                        } else {\n                            // await next tick here otherwise we could go in to a 100% CPU blocking cycle.\n                            await awaitRetry(\n                                collection,\n                                replicationState.retryTime\n                            );\n                        }\n                        continue;\n                    }\n                    const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                        .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                    since = jsonResponse.last_seq;\n\n                    pullStream$.next({\n                        documents,\n                        checkpoint: {\n                            sequence: jsonResponse.last_seq\n                        }\n                    });\n                }\n            })();\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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"}