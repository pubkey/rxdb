{"version":3,"file":"dexie-query.js","names":["dexieCount","instance","preparedQuery","internals","state","queryPlan","queryPlanFields","index","keyRange","getKeyRangeByQueryPlan","dexieDb","_options","IDBKeyRange","count","transaction","dexieTable","dexieTx","tx","idbtrans","store","objectStore","DEXIE_DOCS_TABLE_NAME","length","primaryPath","indexName","dexieReplaceIfStartsWithPipe","map","field","join","request","Promise","res","rej","onsuccess","result","onerror","err","dexieQuery","query","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","RxStorageDexieStatics","getQueryMatcher","schema","rows","cursorReq","openCursor","e","cursor","target","docData","fromDexieToStorage","value","_deleted","push","sortFieldsSameAsIndexFields","sortComparator","getSortComparator","sort","slice","documents","window","Error","ret","bound","startKeys","endKeys","inclusiveStart","inclusiveEnd"],"sources":["../../../../src/plugins/dexie/dexie-query.ts"],"sourcesContent":["import { QueryMatcher } from 'event-reduce-js';\nimport type {\n    DexiePreparedQuery,\n    RxDocumentData,\n    RxQueryPlan,\n    RxStorageQueryResult\n} from '../../types';\nimport {\n    dexieReplaceIfStartsWithPipe,\n    DEXIE_DOCS_TABLE_NAME,\n    fromDexieToStorage\n} from './dexie-helper';\nimport { RxStorageDexieStatics } from './rx-storage-dexie';\nimport type { RxStorageInstanceDexie } from './rx-storage-instance-dexie';\n\n\nexport function getKeyRangeByQueryPlan(\n    queryPlan: RxQueryPlan,\n    IDBKeyRange?: any\n) {\n    if (!IDBKeyRange) {\n        if (typeof window === 'undefined') {\n            throw new Error('IDBKeyRange missing');\n        } else {\n            IDBKeyRange = window.IDBKeyRange;\n        }\n    }\n\n    let ret: any;\n    /**\n     * If index has only one field,\n     * we have to pass the keys directly, not the key arrays.\n     */\n    if (queryPlan.index.length === 1) {\n        ret = IDBKeyRange.bound(\n            queryPlan.startKeys[0],\n            queryPlan.endKeys[0],\n            queryPlan.inclusiveStart,\n            queryPlan.inclusiveEnd\n        );\n    } else {\n        ret = IDBKeyRange.bound(\n            queryPlan.startKeys,\n            queryPlan.endKeys,\n            queryPlan.inclusiveStart,\n            queryPlan.inclusiveEnd\n        );\n    }\n    return ret;\n}\n\n\n/**\n * Runs mango queries over the Dexie.js database.\n */\nexport async function dexieQuery<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: DexiePreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const state = await instance.internals;\n    const query = preparedQuery.query;\n\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlan = preparedQuery.queryPlan;\n\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n    if (!queryPlan.selectorSatisfiedByIndex) {\n        queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n            instance.schema,\n            preparedQuery\n        );\n    }\n\n    const keyRange = getKeyRangeByQueryPlan(\n        queryPlan,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n\n    const queryPlanFields: string[] = queryPlan.index;\n\n    let rows: any[] = [];\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            /**\n             * TODO here we use the native IndexedDB transaction\n             * to get the cursor.\n             * Instead we should not leave Dexie.js API and find\n             * a way to create the cursor with Dexie.js.\n             */\n            const tx = (dexieTx as any).idbtrans;\n\n            // const nativeIndexedDB = state.dexieDb.backendDB();\n            // const trans = nativeIndexedDB.transaction([DEXIE_DOCS_TABLE_NAME], 'readonly');\n\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            if (\n                queryPlanFields.length === 1 &&\n                queryPlanFields[0] === instance.primaryPath\n            ) {\n                index = store;\n            } else {\n                let indexName: string;\n                if (queryPlanFields.length === 1) {\n                    indexName = dexieReplaceIfStartsWithPipe(queryPlanFields[0]);\n                } else {\n                    indexName = '[' +\n                        queryPlanFields\n                            .map(field => dexieReplaceIfStartsWithPipe(field))\n                            .join('+')\n                        + ']';\n                }\n                index = store.index(indexName);\n            }\n            const cursorReq = index.openCursor(keyRange);\n            await new Promise<void>(res => {\n                cursorReq.onsuccess = function (e: any) {\n                    const cursor = e.target.result;\n                    if (cursor) {\n                        // We have a record in cursor.value\n                        const docData = fromDexieToStorage(cursor.value);\n                        if (\n                            !docData._deleted &&\n                            (!queryMatcher || queryMatcher(docData))\n                        ) {\n                            rows.push(docData);\n                        }\n\n                        /**\n                         * If we do not have to manually sort\n                         * and have enough documents,\n                         * we can abort iterating over the cursor\n                         * because we already have every relevant document.\n                         */\n                        if (\n                            queryPlan.sortFieldsSameAsIndexFields &&\n                            rows.length === skipPlusLimit\n                        ) {\n                            res();\n                        } else {\n                            cursor.continue();\n                        }\n                    } else {\n                        // Iteration complete\n                        res();\n                    }\n                };\n            });\n\n\n        }\n    );\n\n\n    if (!queryPlan.sortFieldsSameAsIndexFields) {\n        const sortComparator = RxStorageDexieStatics.getSortComparator(instance.schema, preparedQuery);\n        rows = rows.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    rows = rows.slice(skip, skipPlusLimit);\n\n    /**\n     * Comment this in for debugging to check all fields in the database.\n     */\n    // const docsInDb = await state.dexieTable.filter(queryMatcher).toArray();\n    // let documents = docsInDb\n    //     .map(docData => stripDexieKey(docData))\n    //     .sort(sortComparator);\n    // if (preparedQuery.skip) {\n    //     documents = documents.slice(preparedQuery.skip);\n    // }\n    // if (preparedQuery.limit && documents.length > preparedQuery.limit) {\n    //     documents = documents.slice(0, preparedQuery.limit);\n    // }\n\n\n\n    return {\n        documents: rows\n    };\n}\n\n\nexport async function dexieCount<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: DexiePreparedQuery<RxDocType>\n): Promise<number> {\n    const state = await instance.internals;\n    const queryPlan = preparedQuery.queryPlan;\n    const queryPlanFields: string[] = queryPlan.index;\n\n    const keyRange = getKeyRangeByQueryPlan(\n        queryPlan,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n    let count: number = -1;\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            const tx = (dexieTx as any).idbtrans;\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            if (\n                queryPlanFields.length === 1 &&\n                queryPlanFields[0] === instance.primaryPath\n            ) {\n                index = store;\n            } else {\n                let indexName: string;\n                if (queryPlanFields.length === 1) {\n                    indexName = dexieReplaceIfStartsWithPipe(queryPlanFields[0]);\n                } else {\n                    indexName = '[' +\n                        queryPlanFields\n                            .map(field => dexieReplaceIfStartsWithPipe(field))\n                            .join('+')\n                        + ']';\n                }\n                index = store.index(indexName);\n            }\n\n            const request = index.count(keyRange);\n            count = await new Promise<number>((res, rej) => {\n                request.onsuccess = function () {\n                    const count = request.result;\n                    res(count);\n                }\n                request.onerror = (err: any) => rej(err);\n            });\n        }\n    );\n    return count;\n}\n"],"mappings":"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"}