{"version":3,"file":"rx-storage-instance-dexie.js","names":["instanceId","now","RxStorageInstanceDexie","storage","databaseName","collectionName","schema","internals","options","settings","changes$","Subject","closed","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","bulkWrite","documentWrites","context","ensureNotClosed","state","ret","success","error","eventBulk","id","randomCouchString","events","checkpoint","documentKeys","map","writeRow","document","dexieDb","transaction","dexieTable","dexieDeletedTable","getDocsInDb","docsInDb","d","fromDexieToStorage","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","changesIds","forEach","docIndex","startTime","documentInDb","insertedIsDeleted","_deleted","writeDoc","Object","assign","_attachments","push","eventId","getUniqueDeterministicEventKey","documentId","change","doc","operation","previous","endTime","revInDb","_rev","err","isError","status","isDeleted","newRxError","args","Promise","all","length","bulkPut","fromStorageToDexie","PROMISE_RESOLVE_VOID","bulkDelete","lastState","getNewestOfDocumentStates","values","lwt","_meta","event","next","findDocumentsById","ids","deleted","idx","bulkGet","query","preparedQuery","dexieQuery","getChangedDocumentsSince","limit","sinceLwt","RX_META_LWT_MINIMUM","sinceId","table","where","above","toArray","changedDocuments","changedDocsNormal","changedDocsDeleted","changedDocs","concat","sortDocumentsByLastWriteTime","slice","lastDoc","lastOfArray","documents","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","below","toRemove","removeIds","getAttachmentData","_documentId","_attachmentId","Error","complete","closeDexieDb","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","getDexieDbWithTables","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_DEXIE","resolve"],"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    randomCouchString,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint\n} from '../../types';\nimport {\n    DexiePreparedQuery,\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper';\nimport { dexieQuery } from './dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { getNewestOfDocumentStates, getUniqueDeterministicEventKey } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint> = {\n            id: randomCouchString(10),\n            events: [],\n            checkpoint: null as any,\n            context\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDb = docsInDb.map(d => d ? fromDexieToStorage(d) : d);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documentWrites.forEach((writeRow, docIndex) => {\n                    const id: string = writeRow.document[this.primaryPath] as any;\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    if (!documentInDb) {\n                        /**\n                         * It is possible to insert already deleted documents,\n                         * this can happen on replication.\n                         */\n                        const insertedIsDeleted = writeRow.document._deleted ? true : false;\n                        const writeDoc = Object.assign(\n                            {},\n                            writeRow.document,\n                            {\n                                _deleted: insertedIsDeleted,\n                                // TODO attachments are currently not working with dexie.js\n                                _attachments: {} as any\n                            }\n                        );\n                        changesIds.push(id);\n                        if (insertedIsDeleted) {\n                            bulkPutDeletedDocs.push(writeDoc);\n                        } else {\n                            bulkPutDocs.push(writeDoc);\n                            eventBulk.events.push({\n                                eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                documentId: id,\n                                change: {\n                                    doc: writeDoc,\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null\n                                },\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                        }\n\n                        ret.success[id] = writeDoc;\n                    } else {\n                        // update existing document\n                        const revInDb: string = documentInDb._rev;\n\n                        if (\n                            (\n                                !writeRow.previous\n                            ) ||\n                            (\n                                !!writeRow.previous &&\n                                revInDb !== writeRow.previous._rev\n                            )\n                        ) {\n                            // conflict error\n                            const err: RxStorageBulkWriteError<RxDocType> = {\n                                isError: true,\n                                status: 409,\n                                documentId: id,\n                                writeRow: writeRow,\n                                documentInDb\n                            };\n                            ret.error[id] = err;\n                        } else {\n                            const isDeleted = !!writeRow.document._deleted;\n                            const writeDoc: any = Object.assign(\n                                {},\n                                writeRow.document,\n                                {\n                                    _deleted: isDeleted,\n                                    // TODO attachments are currently not working with lokijs\n                                    _attachments: {}\n                                }\n                            );\n                            changesIds.push(id);\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Insert document that was deleted before.\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                bulkRemoveDeletedDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Update existing non-deleted document\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: writeRow.previous,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                                /**\n                                 * Set non-deleted document to deleted.\n                                 */\n                                bulkPutDeletedDocs.push(writeDoc);\n                                bulkRemoveDocs.push(id);\n\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous: writeRow.previous,\n                                    doc: null\n                                };\n                            } else if (\n                                writeRow.previous && writeRow.previous._deleted &&\n                                writeRow.document._deleted\n                            ) {\n                                // deleted doc was overwritten with other deleted doc\n                                bulkPutDeletedDocs.push(writeDoc);\n                            }\n                            if (!change) {\n                                if (\n                                    writeRow.previous && writeRow.previous._deleted &&\n                                    writeRow.document._deleted\n                                ) {\n                                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                                } else {\n                                    throw newRxError('SNH', { args: { writeRow } });\n                                }\n                            } else {\n                                eventBulk.events.push({\n                                    eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                    documentId: id,\n                                    change,\n                                    startTime,\n                                    // will be filled up before the event is pushed into the changestream\n                                    endTime: startTime\n                                });\n                            }\n                            ret.success[id] = writeDoc;\n                        }\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        if (eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            eventBulk.checkpoint = {\n                id: (lastState as any)[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n\n            const endTime = now();\n            eventBulk.events.forEach(event => event.endTime = endTime);\n            this.changes$.next(eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentDataById<RxDocType> = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DexiePreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.concat(changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        ensureNotClosed(this);\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    close(): Promise<void> {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}