{"version":3,"file":"index.js","names":["_rxjs","require","_operators","_utils","_dataMigrator","_migrationState","DATA_MIGRATOR_BY_COLLECTION","exports","WeakMap","RxDBMigrationPlugin","name","rxdb","hooks","preDestroyRxDatabase","after","onDatabaseDestroy","prototypes","RxDatabase","proto","migrationStates","getMigrationStateByDatabase","pipe","switchMap","list","combineLatest","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","RxCollection","getDataMigrator","getFromMapOrCreate","DataMigrator","asRxCollection","migrationStrategies","migrationNeeded","schema","version","PROMISE_RESOLVE_FALSE","mustMigrate"],"sources":["../../../../src/plugins/migration/index.ts"],"sourcesContent":["import {\n    combineLatest,\n    Observable\n} from 'rxjs';\nimport {\n    shareReplay,\n    switchMap\n} from 'rxjs/operators';\nimport type {\n    RxPlugin,\n    RxCollection,\n    RxDatabase,\n    AllMigrationStates\n} from '../../types';\nimport { getFromMapOrCreate, PROMISE_RESOLVE_FALSE, RXJS_SHARE_REPLAY_DEFAULTS } from '../../plugins/utils';\nimport {\n    mustMigrate,\n    DataMigrator\n} from './data-migrator';\nimport {\n    getMigrationStateByDatabase,\n    onDatabaseDestroy\n} from './migration-state';\n\nexport const DATA_MIGRATOR_BY_COLLECTION: WeakMap<RxCollection, DataMigrator> = new WeakMap();\n\nexport const RxDBMigrationPlugin: RxPlugin = {\n    name: 'migration',\n    rxdb: true,\n    hooks: {\n        preDestroyRxDatabase: {\n            after: onDatabaseDestroy\n        }\n    },\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.migrationStates = function (this: RxDatabase): Observable<AllMigrationStates> {\n                return getMigrationStateByDatabase(this).pipe(\n                    switchMap(list => combineLatest(list)),\n                    shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n                );\n            };\n        },\n        RxCollection: (proto: any) => {\n            proto.getDataMigrator = function (this: RxCollection): DataMigrator {\n                return getFromMapOrCreate(\n                    DATA_MIGRATOR_BY_COLLECTION,\n                    this,\n                    () => new DataMigrator(\n                        this.asRxCollection,\n                        this.migrationStrategies\n                    )\n                );\n            };\n            proto.migrationNeeded = function (this: RxCollection) {\n                if (this.schema.version === 0) {\n                    return PROMISE_RESOLVE_FALSE;\n                }\n                return mustMigrate(this.getDataMigrator());\n            };\n        }\n    }\n};\n\n\n// used in tests\nexport {\n    _getOldCollections,\n    getBatchOfOldCollection,\n    migrateDocumentData,\n    _migrateDocuments,\n    deleteOldCollection,\n    migrateOldCollection,\n    migratePromise,\n    DataMigrator\n} from './data-migrator';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAIA,IAAAC,UAAA,GAAAD,OAAA;AAUA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAH,OAAA;AAIA,IAAAI,eAAA,GAAAJ,OAAA;AAKO,IAAMK,2BAAgE,GAAAC,OAAA,CAAAD,2BAAA,GAAG,IAAIE,OAAO,CAAC,CAAC;AAEtF,IAAMC,mBAA6B,GAAAF,OAAA,CAAAE,mBAAA,GAAG;EACzCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;IACHC,oBAAoB,EAAE;MAClBC,KAAK,EAAEC;IACX;EACJ,CAAC;EACDC,UAAU,EAAE;IACRC,UAAU,EAAGC,KAAU,IAAK;MACxBA,KAAK,CAACC,eAAe,GAAG,YAA4D;QAChF,OAAO,IAAAC,2CAA2B,EAAC,IAAI,CAAC,CAACC,IAAI,CACzC,IAAAC,oBAAS,EAACC,IAAI,IAAI,IAAAC,mBAAa,EAACD,IAAI,CAAC,CAAC,EACtC,IAAAE,sBAAW,EAACC,iCAA0B,CAC1C,CAAC;MACL,CAAC;IACL,CAAC;IACDC,YAAY,EAAGT,KAAU,IAAK;MAC1BA,KAAK,CAACU,eAAe,GAAG,YAA4C;QAChE,OAAO,IAAAC,yBAAkB,EACrBvB,2BAA2B,EAC3B,IAAI,EACJ,MAAM,IAAIwB,0BAAY,CAClB,IAAI,CAACC,cAAc,EACnB,IAAI,CAACC,mBACT,CACJ,CAAC;MACL,CAAC;MACDd,KAAK,CAACe,eAAe,GAAG,YAA8B;QAClD,IAAI,IAAI,CAACC,MAAM,CAACC,OAAO,KAAK,CAAC,EAAE;UAC3B,OAAOC,4BAAqB;QAChC;QACA,OAAO,IAAAC,yBAAW,EAAC,IAAI,CAACT,eAAe,CAAC,CAAC,CAAC;MAC9C,CAAC;IACL;EACJ;AACJ,CAAC;;AAGD"}