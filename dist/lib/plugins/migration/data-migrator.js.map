{"version":3,"file":"data-migrator.js","names":["_migrateDocuments","oldCollection","documentsData","Promise","all","map","docData","runAsyncPluginHooks","migrateDocumentData","migratedDocuments","actions","action","bulkDeleteInputData","writeDeleted","flatClone","_deleted","_attachments","previous","document","length","storageInstance","bulkWrite","bulkWriteToStorageInput","forEach","idx","migratedDocData","res","type","migrated","doc","newestCollection","push","isDocumentDataWithoutRevisionEqual","_rev","newHeight","getHeightOfRevision","newRevision","createRevision","database","hashFunction","attachmentsBefore","saveData","_meta","lwt","now","originalStorageInstance","_getOldCollections","dataMigrator","getOldCollectionDocs","oldColDocs","colDoc","createOldCollection","data","schema","version","filter","schemaObj","storageInstanceCreationParams","databaseInstanceToken","token","databaseName","name","collectionName","options","instanceCreationOptions","multiInstance","runPluginHooks","storage","createStorageInstance","ret","createRxSchema","getWrappedStorageInstance","DataMigrator","migrationStrategies","_migrated","nonMigratedOldCollections","allOldCollections","currentSchema","migrate","batchSize","newRxError","state","done","total","handled","success","deleted","percent","stateSubject","Subject","allSubject","getMigrationStateByDatabase","allList","getValue","slice","asObservable","next","then","getAllDocuments","getAllQueryPrepared","statics","prepareQuery","normalizeMangoQuery","query","queryResult","allDocs","documents","countAll","oldCol","jsonSchema","totalCount","reduce","cur","prev","collection","currentCol","shift","currentPromise","PROMISE_RESOLVE_VOID","migrationState$","migrateOldCollection","sub","subscribe","subState","Math","round","error","e","unsubscribe","c","close","complete","pipe","withCollection","migratePromise","_migratePromise","mustMigrate","must","PROMISE_RESOLVE_FALSE","rej","state$","err","collectionDocKeys","getPreviousVersions","internalStore","findDocumentsById","key","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","docsObj","Object","values","runStrategyIfNotNull","docOrNull","PROMISE_RESOLVE_NULL","retPromise","toPromise","getBatchOfOldCollection","preparedQuery","selector","sort","primaryPath","limit","skip","result","mutateableDocData","clone","nextVersion","resolve","getDefaultRxDocumentMeta","doc1","doc2","doc1NoRev","assign","undefined","doc2NoRev","deepEqual","deleteOldCollection","remove","removeCollectionDoc","_migrate","observer","allBatchesDone","handleOneBatch","batch"],"sources":["../../../../src/plugins/migration/data-migrator.ts"],"sourcesContent":["/**\n * The DataMigrator handles the documents from collections with older schemas\n * and transforms/saves them into the newest collection\n */\n/**\n * TODO this should be completely rewritten because:\n * - This could have been done in much less code which would be easier to uderstand\n *\n */\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport deepEqual from 'fast-deep-equal';\nimport {\n    clone,\n    toPromise,\n    flatClone,\n    getHeightOfRevision,\n    createRevision,\n    PROMISE_RESOLVE_VOID,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    getDefaultRxDocumentMeta,\n    now\n} from '../../util';\nimport {\n    createRxSchema\n} from '../../rx-schema';\nimport {\n    newRxError\n} from '../../rx-error';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from '../../hooks';\nimport type {\n    RxCollection,\n    RxDatabase,\n    MigrationState,\n    NumberFunctionMap,\n    OldRxCollection,\n    WithAttachmentsData,\n    RxJsonSchema,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    InternalStoreCollectionDocType,\n    RxStorageInstance\n} from '../../types';\nimport {\n    RxSchema,\n    getPreviousVersions\n} from '../../rx-schema';\nimport {\n    getMigrationStateByDatabase,\n    MigrationStateWithCollection\n} from './migration-state';\nimport { map } from 'rxjs/operators';\nimport {\n    getWrappedStorageInstance\n} from '../../rx-storage-helper';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION\n} from '../../rx-database-internal-store';\nimport { normalizeMangoQuery } from '../../rx-query-helper';\n\nexport class DataMigrator {\n\n    constructor(\n        public newestCollection: RxCollection,\n        public migrationStrategies: NumberFunctionMap\n    ) {\n        this.currentSchema = newestCollection.schema;\n        this.database = newestCollection.database;\n        this.name = newestCollection.name;\n    }\n\n    public currentSchema: RxSchema;\n    public database: RxDatabase;\n    public name: string;\n\n\n    private _migrated: boolean = false;\n    private _migratePromise?: Promise<any>;\n    private nonMigratedOldCollections: OldRxCollection[] = [];\n    private allOldCollections: OldRxCollection[] = [];\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        if (this._migrated) {\n            throw newRxError('DM1');\n        }\n        this._migrated = true;\n\n        const state = {\n            done: false, // true if finished\n            total: 0, // will be the doc-count\n            handled: 0, // amount of handled docs\n            success: 0, // handled docs which successed\n            deleted: 0, // handled docs which got deleted\n            percent: 0 // percentage\n        };\n\n        const stateSubject: Subject<MigrationStateWithCollection> = new Subject();\n\n        /**\n         * Add to output of RxDatabase.migrationStates\n         */\n        const allSubject = getMigrationStateByDatabase(this.newestCollection.database);\n        const allList = allSubject.getValue().slice(0);\n        allList.push(stateSubject.asObservable());\n        allSubject.next(allList);\n\n        /**\n         * TODO this is a side-effect which might throw\n         * We did this because it is not possible to create new Observer(async(...))\n         * @link https://github.com/ReactiveX/rxjs/issues/4074\n         * In the future the whole migration plugin should be rewritten without rxjs\n         * so we do not have this problem.\n         */\n        (() => {\n            return _getOldCollections(this)\n                .then(ret => {\n                    this.nonMigratedOldCollections = ret;\n                    this.allOldCollections = this.nonMigratedOldCollections.slice(0);\n\n                    const getAllDocuments = async (\n                        storageInstance: RxStorageInstance<any, any, any>,\n                        schema: RxJsonSchema<any>\n                    ): Promise<RxDocumentData<any>[]> => {\n                        const storage = this.database.storage;\n                        const getAllQueryPrepared = storage.statics.prepareQuery(\n                            storageInstance.schema,\n                            normalizeMangoQuery(\n                                schema,\n                                {}\n                            )\n                        );\n                        const queryResult = await storageInstance.query(getAllQueryPrepared);\n                        const allDocs = queryResult.documents;\n                        return allDocs;\n                    }\n\n                    const countAll: Promise<number[]> = Promise.all(\n                        this.nonMigratedOldCollections\n                            .map(oldCol => getAllDocuments(\n                                oldCol.storageInstance,\n                                oldCol.schema.jsonSchema\n                            ).then(allDocs => allDocs.length))\n                    );\n                    return countAll;\n                })\n                .then(countAll => {\n                    const totalCount: number = countAll\n                        .reduce((cur, prev) => prev = cur + prev, 0);\n                    state.total = totalCount;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    let currentCol = this.nonMigratedOldCollections.shift();\n                    let currentPromise = PROMISE_RESOLVE_VOID;\n                    while (currentCol) {\n                        const migrationState$ = migrateOldCollection(\n                            currentCol,\n                            batchSize\n                        );\n                        currentPromise = currentPromise.then(() => {\n                            return new Promise(res => {\n                                const sub = migrationState$.subscribe({\n                                    next: (subState: any) => {\n                                        state.handled++;\n                                        (state as any)[subState.type] = (state as any)[subState.type] + 1;\n                                        state.percent = Math.round(state.handled / state.total * 100);\n                                        stateSubject.next({\n                                            collection: this.newestCollection,\n                                            state: flatClone(state)\n                                        });\n                                    },\n                                    error: (e: any) => {\n                                        sub.unsubscribe();\n                                        // TODO we should not have to catch here.\n                                        this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                        stateSubject.error(e);\n                                    },\n                                    complete: () => {\n                                        if (currentCol) {\n                                            // TODO we should not have to catch here.\n                                            currentCol.storageInstance.close().catch(() => { });\n                                        }\n                                        sub.unsubscribe();\n                                        res();\n                                    }\n                                });\n                            });\n                        });\n                        currentCol = this.nonMigratedOldCollections.shift();\n                    }\n                    return currentPromise;\n                })\n                .then(() => {\n                    state.done = true;\n                    state.percent = 100;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    stateSubject.complete();\n                });\n        })();\n\n\n        return stateSubject.pipe(\n            map(withCollection => withCollection.state)\n        );\n    }\n\n    migratePromise(batchSize: number): Promise<any> {\n        if (!this._migratePromise) {\n            this._migratePromise = mustMigrate(this)\n                .then(must => {\n                    if (!must) {\n                        return PROMISE_RESOLVE_FALSE;\n                    } else {\n                        return new Promise((res, rej) => {\n                            const state$ = this.migrate(batchSize);\n                            (state$ as any).subscribe(null, rej, res);\n                            this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                        })\n                            .catch(err => {\n                                this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                throw err;\n                            });\n                    }\n                });\n        }\n        return this._migratePromise;\n    }\n}\n\nexport async function createOldCollection(\n    version: number,\n    schemaObj: RxJsonSchema<any>,\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection> {\n    const database = dataMigrator.newestCollection.database;\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: dataMigrator.newestCollection.name,\n        schema: schemaObj,\n        options: dataMigrator.newestCollection.instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    const storageInstance = await database.storage.createStorageInstance(\n        storageInstanceCreationParams\n    );\n    const ret: OldRxCollection = {\n        version,\n        dataMigrator,\n        newestCollection: dataMigrator.newestCollection,\n        database,\n        schema: createRxSchema(schemaObj, false),\n        storageInstance\n    };\n\n    ret.storageInstance = getWrappedStorageInstance(\n        ret.database,\n        storageInstance,\n        schemaObj\n    );\n\n    return ret;\n}\n\n\nexport function getOldCollectionDocs(\n    dataMigrator: DataMigrator\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n\n    const collectionDocKeys = getPreviousVersions(dataMigrator.currentSchema.jsonSchema)\n        .map(version => dataMigrator.name + '-' + version);\n\n    return dataMigrator.database.internalStore.findDocumentsById(\n        collectionDocKeys.map(key => getPrimaryKeyOfInternalDocument(\n            key,\n            INTERNAL_CONTEXT_COLLECTION\n        )),\n        false\n    ).then(docsObj => Object.values(docsObj));\n}\n\n/**\n * get an array with OldCollection-instances from all existing old storage-instances\n */\nexport async function _getOldCollections(\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection[]> {\n    const oldColDocs = await getOldCollectionDocs(dataMigrator);\n\n    return Promise.all(\n        oldColDocs\n            .map(colDoc => {\n                if (!colDoc) {\n                    return null as any;\n                }\n                return createOldCollection(\n                    colDoc.data.schema.version,\n                    colDoc.data.schema,\n                    dataMigrator\n                );\n            })\n            .filter(colDoc => colDoc !== null)\n    );\n}\n\n\n/**\n * returns true if a migration is needed\n */\nexport function mustMigrate(dataMigrator: DataMigrator): Promise<boolean> {\n    if (dataMigrator.currentSchema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    return getOldCollectionDocs(dataMigrator)\n        .then(oldColDocs => {\n            if (oldColDocs.length === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n}\n\nexport function runStrategyIfNotNull(\n    oldCollection: OldRxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = oldCollection.dataMigrator.migrationStrategies[version](docOrNull, oldCollection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\nexport function getBatchOfOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize: number\n): Promise<any[]> {\n    const storage = oldCollection.database.storage;\n    const storageInstance = oldCollection.storageInstance;\n    const preparedQuery = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [oldCollection.schema.primaryPath]: 'asc' } as any],\n            limit: batchSize,\n            skip: 0\n        }\n    );\n\n    return storageInstance\n        .query(preparedQuery)\n        .then(result => result.documents\n            .map(doc => {\n                doc = flatClone(doc);\n                return doc;\n            })\n        );\n}\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    oldCollection: OldRxCollection,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = oldCollection.version + 1;\n\n    // run the document throught migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= oldCollection.newestCollection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            oldCollection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n\n        /**\n         * Add _meta field if missing.\n         * We need this to migration documents from pre-12.0.0 state\n         * to version 12.0.0. Therefore we need to add the _meta field if it is missing.\n         * TODO remove this in the major version 13.0.0 \n         */\n        if (!doc._meta) {\n            doc._meta = getDefaultRxDocumentMeta();\n        }\n        return doc;\n    });\n}\n\n\nexport function isDocumentDataWithoutRevisionEqual<T>(doc1: T, doc2: T): boolean {\n    const doc1NoRev = Object.assign({}, doc1, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    const doc2NoRev = Object.assign({}, doc2, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    return deepEqual(doc1NoRev, doc2NoRev);\n}\n\n/**\n * transform documents data and save them to the new collection\n * @return status-action with status and migrated document\n */\nexport async function _migrateDocuments(\n    oldCollection: OldRxCollection,\n    documentsData: any[]\n): Promise<{ type: string, doc: any }[]> {\n\n    // run hooks that might mutate documentsData\n    await Promise.all(\n        documentsData.map(docData => runAsyncPluginHooks(\n            'preMigrateDocument',\n            {\n                docData,\n                oldCollection\n            }\n        ))\n    );\n    // run the migration strategies on each document\n    const migratedDocuments: (any | null)[] = await Promise.all(\n        documentsData.map(docData => migrateDocumentData(oldCollection, docData))\n    );\n\n\n    const bulkWriteToStorageInput: RxDocumentData<any>[] = [];\n    const actions: any[] = [];\n\n    documentsData.forEach((docData, idx) => {\n        const migratedDocData: any | null = migratedDocuments[idx];\n        const action = {\n            res: null as any,\n            type: '',\n            migrated: migratedDocData,\n            doc: docData,\n            oldCollection,\n            newestCollection: oldCollection.newestCollection\n        };\n        actions.push(action);\n\n        /**\n         * Determiniticly handle the revision\n         * so migrating the same data on multiple instances\n         * will result in the same output.\n         */\n        if (isDocumentDataWithoutRevisionEqual(docData, migratedDocData)) {\n            /**\n             * Data not changed by migration strategies, keep the same revision.\n             * This ensures that other replicated instances that did not migrate already\n             * will still have the same document.\n             */\n            migratedDocData._rev = docData._rev;\n        } else if (migratedDocData !== null) {\n            /**\n             * data changed, increase revision height\n             * so replicating instances use our new document data\n             */\n            const newHeight = getHeightOfRevision(docData._rev) + 1;\n            const newRevision = newHeight + '-' + createRevision(\n                oldCollection.newestCollection.database.hashFunction,\n                migratedDocData\n            );\n            migratedDocData._rev = newRevision;\n        }\n\n\n        if (migratedDocData) {\n            /**\n             * save to newest collection\n             * notice that this data also contains the attachments data\n             */\n            const attachmentsBefore = migratedDocData._attachments;\n            const saveData: WithAttachmentsData<any> = migratedDocData;\n            saveData._attachments = attachmentsBefore;\n            saveData._meta.lwt = now();\n            bulkWriteToStorageInput.push(saveData);\n            action.res = saveData;\n            action.type = 'success';\n        } else {\n            /**\n             * Migration strategy returned null\n             * which means we should not migrate this document,\n             * just drop it.\n             */\n            action.type = 'deleted';\n        }\n    });\n\n    /**\n     * Write the documents to the newest collection.\n     * We need to add as revision\n     * because we provide the _rev by our own\n     * to have deterministic revisions in case the migration\n     * runs on multiple nodes which must lead to the equal storage state.\n     */\n    if (bulkWriteToStorageInput.length) {\n        /**\n         * To ensure that we really keep that revision, we\n         * hackly insert this document via the RxStorageInstance.originalStorageInstance\n         * so that getWrappedStorageInstance() does not overwrite its own revision.\n         */\n        const originalStorageInstance: RxStorageInstance<any, any, any> = (oldCollection.newestCollection.storageInstance as any).originalStorageInstance;\n        await originalStorageInstance.bulkWrite(\n            bulkWriteToStorageInput.map(document => ({ document })),\n            'data-migrator-import'\n        );\n    }\n\n    // run hooks\n    await Promise.all(\n        actions.map(action => runAsyncPluginHooks(\n            'postMigrateDocument',\n            action\n        ))\n    );\n\n    // remove the documents from the old collection storage instance\n    const bulkDeleteInputData = documentsData.map(docData => {\n        const writeDeleted = flatClone(docData);\n        writeDeleted._deleted = true;\n        writeDeleted._attachments = {};\n        return {\n            previous: docData,\n            document: writeDeleted\n        };\n    });\n\n    if (bulkDeleteInputData.length) {\n        await oldCollection.storageInstance.bulkWrite(\n            bulkDeleteInputData,\n            'data-migrator-delete'\n        );\n    }\n\n    return actions;\n}\n\n\n/**\n * deletes this.storageInstance and removes it from the database.collectionsCollection\n */\nexport function deleteOldCollection(\n    oldCollection: OldRxCollection\n): Promise<void> {\n    return oldCollection.storageInstance.remove()\n        .then(\n            () => oldCollection.database.removeCollectionDoc(\n                oldCollection.dataMigrator.name,\n                oldCollection.schema\n            )\n        );\n}\n\n/**\n * runs the migration on all documents and deletes the storage instance afterwards\n */\nexport function migrateOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize = 10\n): Observable<any> {\n    if (oldCollection._migrate) {\n        // already running\n        throw newRxError('DM3');\n    }\n    oldCollection._migrate = true;\n\n    const observer = new Subject();\n\n    /**\n     * TODO this is a side-effect which might throw\n     * @see DataMigrator.migrate()\n     */\n    (() => {\n        let error: any;\n        const allBatchesDone = () => {\n            // remove this oldCollection\n            return deleteOldCollection(oldCollection)\n                .then(() => observer.complete());\n        };\n        const handleOneBatch = () => {\n            return getBatchOfOldCollection(oldCollection, batchSize)\n                .then(batch => {\n                    if (batch.length === 0) {\n                        allBatchesDone();\n                        return false;\n                    } else {\n                        return _migrateDocuments(oldCollection, batch)\n                            .then((actions: any[]) => actions.forEach(action => observer.next(action)))\n                            .catch(e => error = e)\n                            .then(() => true);\n                    }\n                })\n                .then(next => {\n                    if (!next) {\n                        return;\n                    }\n                    if (error) {\n                        observer.error(error);\n                    } else {\n                        handleOneBatch();\n                    }\n                });\n        };\n        handleOneBatch();\n    })();\n\n    return observer.asObservable();\n}\n\nexport function migratePromise(\n    oldCollection: OldRxCollection,\n    batchSize?: number\n): Promise<any> {\n    if (!oldCollection._migratePromise) {\n        oldCollection._migratePromise = new Promise((res, rej) => {\n            const state$ = migrateOldCollection(oldCollection, batchSize);\n            (state$ as any).subscribe(null, rej, res);\n        });\n    }\n    return oldCollection._migratePromise;\n}\n"],"mappings":"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"}