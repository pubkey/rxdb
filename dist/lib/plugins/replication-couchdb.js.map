{"version":3,"file":"replication-couchdb.js","names":["INTERNAL_POUCHDBS","WeakSet","RxCouchDBReplicationStateBase","collection","syncOptions","_subs","_subjects","change","Subject","docs","denied","active","BehaviorSubject","complete","alive","error","canceled","Object","keys","forEach","key","defineProperty","get","asObservable","awaitInitialReplication","options","live","newRxError","database","name","multiInstance","waitForLeadership","that","firstValueFrom","complete$","pipe","filter","x","cancel","PROMISE_RESOLVE_FALSE","ret","PROMISE_RESOLVE_TRUE","_pouchEventEmitterObject","Promise","res","ensureNotFalsy","on","sub","unsubscribe","setPouchEventEmitter","rxRepState","evEmitter","push","fromEvent","subscribe","ev","next","observers","length","direction","doc","language","info","promiseWait","first","mergeMap","requestIdlePromise","then","getIsAlive","emitter","state","pull","reduce","acc","val","isAlive","resolve","skipUntil","createRxCouchDBReplicationState","pouchReplicationFunction","pouch","sync","bind","replicate","to","from","syncCouchDB","remote","retry","query","useOptions","flatClone","isInstanceOfPouchDB","has","isRxCollection","storageInstance","internals","getPouchDBOfRxCollection","syncFun","selector","getPreparedQuery","repState","waitTillRun","destroyed","pouchSync","onDestroy","RxDBReplicationCouchDBPlugin","rxdb","init","addPouchPlugin","PouchReplicationPlugin","prototypes","RxCollection","proto","hooks","createRxCollection","after","args","add"],"sources":["../../../src/plugins/replication-couchdb.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.sync()-function to rxdb\n * you can use it to sync collections with remote or local couchdb-instances\n */\n\nimport PouchReplicationPlugin from 'pouchdb-replication';\nimport {\n    BehaviorSubject,\n    Subject,\n    fromEvent,\n    Subscription,\n    Observable,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    skipUntil,\n    filter,\n    first,\n    mergeMap\n} from 'rxjs/operators';\n\nimport {\n    promiseWait,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE,\n    ensureNotFalsy\n} from '../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    isInstanceOf as isInstanceOfPouchDB,\n    addPouchPlugin,\n    getPouchDBOfRxCollection\n} from '../plugins/pouchdb';\n\nimport {\n    isRxCollection\n} from '../rx-collection';\nimport type {\n    RxCollection,\n    PouchSyncHandler,\n    PouchReplicationOptions,\n    RxPlugin,\n    SyncOptions,\n    PouchDBInstance\n} from '../types';\n\n/**\n * Contains all pouchdb instances that\n * are used inside of RxDB by collections or databases.\n * Used to ensure the remote of a replication cannot be an internal pouchdb.\n */\nconst INTERNAL_POUCHDBS = new WeakSet();\n\nexport class RxCouchDBReplicationStateBase {\n    public _subs: Subscription[] = [];\n\n    // can be used for debugging or custom event-handling\n    // will be set some time after sync() is called\n    public _pouchEventEmitterObject?: PouchSyncHandler | null;\n    public _subjects = {\n        change: new Subject(),\n        docs: new Subject(),\n        denied: new Subject(),\n        active: new BehaviorSubject(false),\n        complete: new BehaviorSubject(false),\n        alive: new BehaviorSubject(false),\n        error: new Subject(),\n    };\n\n    public canceled: boolean = false;\n\n    constructor(\n        public readonly collection: RxCollection,\n        public readonly syncOptions: SyncOptions\n    ) {\n        // create getters\n        Object.keys(this._subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this._subjects[key].asObservable();\n                }\n            });\n        });\n    }\n\n    awaitInitialReplication(): Promise<void> {\n        if (this.syncOptions.options && this.syncOptions.options.live) {\n            throw newRxError('RC4', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n        if (this.collection.database.multiInstance && this.syncOptions.waitForLeadership) {\n            throw newRxError('RC5', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n\n        const that: RxCouchDBReplicationState = this as any;\n        return firstValueFrom(\n            that.complete$.pipe(\n                filter(x => !!x)\n            )\n        );\n    }\n\n    /**\n     * Returns false when the replication has already been canceled\n     */\n    cancel(): Promise<boolean> {\n        if (this.canceled) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        this.canceled = true;\n        let ret = PROMISE_RESOLVE_TRUE;\n        if (this._pouchEventEmitterObject) {\n            /**\n             * Calling cancel() does not return a promise,\n             * so we have to await the complete event\n             * to know that everything is cleaned up properly.\n             */\n            ret = new Promise<true>(res => {\n                ensureNotFalsy(this._pouchEventEmitterObject)\n                    .on('complete', () => {\n                        res(true);\n                    });\n            });\n            this._pouchEventEmitterObject.cancel();\n        }\n        this._subs.forEach(sub => sub.unsubscribe());\n        return ret;\n    }\n}\n\nexport type RxCouchDBReplicationState = RxCouchDBReplicationStateBase & {\n    change$: Observable<any>;\n    docs$: Observable<any>;\n    denied$: Observable<any>;\n    active$: Observable<any>;\n    alive$: Observable<boolean>;\n    complete$: Observable<any>;\n    error$: Observable<any>;\n};\n\nexport function setPouchEventEmitter(\n    rxRepState: RxCouchDBReplicationState,\n    evEmitter: PouchSyncHandler\n) {\n    if (rxRepState._pouchEventEmitterObject) {\n        throw newRxError('RC1');\n    }\n    rxRepState._pouchEventEmitterObject = evEmitter;\n\n    // change\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'change')\n            .subscribe(ev => {\n                rxRepState._subjects.change.next(ev);\n            })\n    );\n\n    // denied\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'denied')\n            .subscribe(ev => rxRepState._subjects.denied.next(ev))\n    );\n\n    // docs\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'change')\n            .subscribe(ev => {\n                if (\n                    rxRepState._subjects.docs.observers.length === 0 ||\n                    (ev as any).direction !== 'pull'\n                ) return;\n\n                (ev as any).change.docs\n                    .filter((doc: any) => doc.language !== 'query') // remove internal docs\n                    // do primary-swap and keycompression\n                    .forEach((doc: any) => rxRepState._subjects.docs.next(doc));\n            }));\n\n    // error\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'error')\n            .subscribe(ev => rxRepState._subjects.error.next(ev))\n    );\n\n    // active\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'active')\n            .subscribe(() => rxRepState._subjects.active.next(true))\n    );\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'paused')\n            .subscribe(() => rxRepState._subjects.active.next(false))\n    );\n\n    // complete\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'complete')\n            .subscribe(async (info: any) => {\n                /**\n                 * when complete fires, it might be that not all changeEvents\n                 * have passed through, because of the delay of .wachtForChanges()\n                 * Therefore we have to first ensure that all previous changeEvents have been handled\n                 */\n                await promiseWait(100);\n                rxRepState._subjects.complete.next(info);\n            })\n    );\n    // auto-cancel one-time replications on complelete to not cause memory leak\n    if (\n        !rxRepState.syncOptions.options ||\n        !rxRepState.syncOptions.options.live\n    ) {\n        rxRepState._subs.push(\n            rxRepState.complete$.pipe(\n                filter(x => !!x),\n                first(),\n                mergeMap(() => {\n                    return rxRepState.collection.database\n                        .requestIdlePromise()\n                        .then(() => rxRepState.cancel());\n                })\n            ).subscribe()\n        );\n    }\n\n    function getIsAlive(emitter: any): Promise<boolean> {\n        // \"state\" will live in emitter.state if single direction replication\n        // or in emitter.push.state & emitter.pull.state when syncing for both\n        let state = emitter.state;\n        if (!state) {\n            state = [emitter.pull.state, emitter.push.state]\n                .reduce((acc, val) => {\n                    if (acc === 'active' || val === 'active') return 'active';\n                    return acc === 'stopped' ? acc : val;\n                }, '');\n        }\n\n        // If it's active, we can't determine whether the connection is active\n        // or not yet\n        if (state === 'active') {\n            return promiseWait(15).then(() => getIsAlive(emitter));\n        }\n\n        const isAlive = state !== 'stopped';\n        return Promise.resolve(isAlive);\n    }\n\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'paused')\n            .pipe(\n                skipUntil(fromEvent(evEmitter as any, 'active'))\n            ).subscribe(() => {\n                getIsAlive(rxRepState._pouchEventEmitterObject)\n                    .then(isAlive => rxRepState._subjects.alive.next(isAlive));\n            })\n    );\n}\n\nexport function createRxCouchDBReplicationState(\n    collection: RxCollection,\n    syncOptions: SyncOptions\n): RxCouchDBReplicationState {\n    return new RxCouchDBReplicationStateBase(\n        collection,\n        syncOptions\n    ) as RxCouchDBReplicationState;\n}\n\n/**\n * get the correct function-name for pouchdb-replication\n */\nexport function pouchReplicationFunction(\n    pouch: PouchDBInstance,\n    {\n        pull = true,\n        push = true\n    }\n): any {\n    if (pull && push) {\n        return pouch.sync.bind(pouch);\n    }\n    if (!pull && push) {\n        return (pouch.replicate as any).to.bind(pouch);\n    }\n    if (pull && !push) {\n        return (pouch.replicate as any).from.bind(pouch);\n    }\n    if (!pull && !push) {\n        throw newRxError('UT3', {\n            pull,\n            push\n        });\n    }\n}\n\nexport function syncCouchDB(\n    this: RxCollection,\n    {\n        remote,\n        waitForLeadership = true,\n        direction = {\n            pull: true,\n            push: true\n        },\n        options = {\n            live: true,\n            retry: true\n        },\n        query\n    }: SyncOptions) {\n    const useOptions: PouchReplicationOptions & { selector: any } = flatClone(options) as any;\n\n    // prevent #641 by not allowing internal pouchdbs as remote\n    if (\n        isInstanceOfPouchDB(remote) &&\n        INTERNAL_POUCHDBS.has(remote)\n    ) {\n        throw newRxError('RC3', {\n            database: this.database.name,\n            collection: this.name\n        });\n    }\n\n    // if remote is RxCollection, get internal pouchdb\n    if (isRxCollection(remote)) {\n        remote = (remote as RxCollection).storageInstance.internals.pouch;\n    }\n\n    if (query && this !== query.collection) {\n        throw newRxError('RC2', {\n            query\n        });\n    }\n\n    const pouch = getPouchDBOfRxCollection(this);\n    const syncFun = pouchReplicationFunction(pouch, direction);\n    if (query) {\n        useOptions.selector = query.getPreparedQuery().selector;\n    }\n\n    const repState: any = createRxCouchDBReplicationState(\n        this,\n        {\n            remote,\n            waitForLeadership,\n            direction,\n            options,\n            query\n        }\n    );\n\n    // run internal so .sync() does not have to be async\n    const waitTillRun = (\n        waitForLeadership &&\n        this.database.multiInstance // do not await leadership if not multiInstance\n    ) ? this.database.waitForLeadership() : promiseWait(0);\n    (waitTillRun as any).then(() => {\n        if (this.destroyed || repState.canceled) {\n            return;\n        }\n        const pouchSync = syncFun(remote, useOptions);\n        setPouchEventEmitter(repState, pouchSync);\n\n        this.onDestroy.push(() => repState.cancel());\n    });\n\n    return repState;\n}\n\n\n\nexport const RxDBReplicationCouchDBPlugin: RxPlugin = {\n    name: 'replication-couchdb',\n    rxdb: true,\n    init() {\n        // add pouchdb-replication-plugin\n        addPouchPlugin(PouchReplicationPlugin);\n    },\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncCouchDB = syncCouchDB;\n        }\n    },\n    hooks: {\n        createRxCollection: {\n            after: args => {\n                const collection = args.collection;\n                const pouch: PouchDBInstance | undefined = collection.storageInstance.internals.pouch;\n                if (pouch) {\n                    INTERNAL_POUCHDBS.add(collection.storageInstance.internals.pouch);\n                }\n            }\n        }\n    }\n};\n"],"mappings":"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"}