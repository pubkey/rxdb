{"version":3,"file":"rx-storage-remote.js","names":["_rxjs","require","_utils","_messageChannelCache","_rxStorageHelper","RxStorageRemote","exports","settings","name","seed","randomCouchString","lastRequestId","statics","mode","messageChannelIfOneMode","getMessageChannel","_proto","prototype","getRequestId","newId","createStorageInstance","params","ensureRxStorageInstanceParamsAreCorrect","connectionId","cacheKeys","push","collectionName","databaseName","messageChannel","requestId","waitForOkPromise","firstValueFrom","messages$","pipe","filter","msg","answerTo","send","method","waitForOkResult","error","Error","JSON","stringify","RxStorageInstanceRemote","schema","options","customRequest","data","messageChannelCreator","waitForAnswerPromise","response","close","return","getMessageReturn","parse","storage","internals","changes$","Subject","conflicts$","subs","closed","subscribe","next","_proto2","requestRemote","methodName","responsePromise","message","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","digest","getChangedDocumentsSince","limit","checkpoint","changeStream","asObservable","cleanup","minDeletedTime","Promise","reject","forEach","sub","unsubscribe","complete","closeMessageChannel","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","getRxStorageRemote","withDefaults","Object","assign"],"sources":["../../../../src/plugins/storage-remote/rx-storage-remote.ts"],"sourcesContent":["import {\n    firstValueFrom,\n    filter,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageStatics\n} from '../../types';\nimport {\n    randomCouchString\n} from '../../plugins/utils';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RemoteMessageChannel,\n    RxStorageRemoteInternals,\n    RxStorageRemoteSettings\n} from './storage-remote-types';\nimport { closeMessageChannel, getMessageChannel } from './message-channel-cache';\nimport { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper';\n\n\nexport class RxStorageRemote implements RxStorage<RxStorageRemoteInternals, any> {\n    public readonly statics: RxStorageStatics;\n    public readonly name: string = 'remote';\n    private seed: string = randomCouchString(10);\n    private lastRequestId: number = 0;\n    public messageChannelIfOneMode?: Promise<RemoteMessageChannel>;\n    constructor(\n        public readonly settings: RxStorageRemoteSettings\n    ) {\n        this.statics = settings.statics;\n        if (settings.mode === 'one') {\n            this.messageChannelIfOneMode = getMessageChannel(\n                settings,\n                [],\n                true\n            );\n        }\n    }\n\n    public getRequestId() {\n        const newId = this.lastRequestId++;\n        return this.seed + '|' + newId;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceRemote<RxDocType>> {\n        ensureRxStorageInstanceParamsAreCorrect(params);\n\n        const connectionId = 'c|' + this.getRequestId();\n\n        const cacheKeys: string[] = [\n            'mode-' + this.settings.mode\n        ];\n        switch (this.settings.mode) {\n            case 'collection':\n                cacheKeys.push('collection-' + params.collectionName);\n            // eslint-disable-next-line no-fallthrough\n            case 'database':\n                cacheKeys.push('database-' + params.databaseName);\n            // eslint-disable-next-line no-fallthrough\n            case 'storage':\n                cacheKeys.push('seed-' + this.seed);\n        }\n        const messageChannel = await (this.messageChannelIfOneMode ?\n            this.messageChannelIfOneMode :\n            getMessageChannel(\n                this.settings,\n                cacheKeys\n            )\n        );\n\n        const requestId = this.getRequestId();\n        const waitForOkPromise = firstValueFrom(messageChannel.messages$.pipe(\n            filter(msg => msg.answerTo === requestId)\n        ));\n        messageChannel.send({\n            connectionId,\n            method: 'create',\n            requestId,\n            params\n        });\n\n        const waitForOkResult = await waitForOkPromise;\n        if (waitForOkResult.error) {\n            throw new Error('could not create instance ' + JSON.stringify(waitForOkResult.error));\n        }\n\n        return new RxStorageInstanceRemote(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                params,\n                connectionId,\n                messageChannel\n            },\n            params.options\n        );\n    }\n\n    async customRequest<In, Out>(data: In): Promise<Out> {\n        const messageChannel = await this.settings.messageChannelCreator();\n        const requestId = this.getRequestId();\n        const connectionId = 'custom|request|' + requestId;\n        const waitForAnswerPromise = firstValueFrom(messageChannel.messages$.pipe(\n            filter(msg => msg.answerTo === requestId)\n        ));\n        messageChannel.send({\n            connectionId,\n            method: 'custom',\n            requestId,\n            params: data\n        });\n        const response = await waitForAnswerPromise;\n        if (response.error) {\n            await messageChannel.close();\n            throw new Error('could not run customRequest(): ' + JSON.stringify({\n                data,\n                error: response.error\n            }));\n        } else {\n            await messageChannel.close();\n            return response.return;\n        }\n\n    }\n}\n\n/**\n * Because postMessage() can be very slow on complex objects,\n * and some RxStorage implementations do need a JSON-string internally\n * anyway, it is allowed to transfer a string instead of an object\n * which must then be JSON.parse()-ed before RxDB can use it.\n * @link https://surma.dev/things/is-postmessage-slow/\n */\nfunction getMessageReturn(\n    msg: MessageFromRemote\n) {\n    if (msg.method === 'getAttachmentData') {\n        return msg.return;\n    } else {\n        if (typeof msg.return === 'string') {\n            return JSON.parse(msg.return);\n        } else {\n            return msg.return;\n        }\n    }\n}\n\nexport class RxStorageInstanceRemote<RxDocType> implements RxStorageInstance<RxDocType, RxStorageRemoteInternals, any, any> {\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n    messages$: Observable<MessageFromRemote>;\n\n    constructor(\n        public readonly storage: RxStorageRemote,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: RxStorageRemoteInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.messages$ = this.internals.messageChannel.messages$.pipe(\n            filter(msg => msg.connectionId === this.internals.connectionId)\n        );\n        this.subs.push(\n            this.messages$.subscribe(msg => {\n                if (msg.method === 'changeStream') {\n                    this.changes$.next(getMessageReturn(msg));\n                }\n                if (msg.method === 'conflictResultionTasks') {\n                    this.conflicts$.next(msg.return);\n                }\n            })\n        );\n    }\n\n    private async requestRemote(\n        methodName: keyof RxStorageInstance<any, any, any>,\n        params: any\n    ) {\n        const requestId = this.storage.getRequestId();\n        const responsePromise = firstValueFrom(\n            this.messages$.pipe(\n                filter(msg => msg.answerTo === requestId)\n            )\n        );\n        const message: MessageToRemote = {\n            connectionId: this.internals.connectionId,\n            requestId,\n            method: methodName,\n            params\n        };\n        this.internals.messageChannel.send(message);\n        const response = await responsePromise;\n        if (response.error) {\n            throw new Error('could not requestRemote: ' + JSON.stringify({\n                methodName,\n                params,\n                error: response.error\n            }, null, 4));\n        } else {\n            return getMessageReturn(response);\n        }\n    }\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.requestRemote('bulkWrite', [documentWrites, context]);\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.requestRemote('findDocumentsById', [ids, deleted]);\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.requestRemote('query', [preparedQuery]);\n    }\n    count(preparedQuery: any): Promise<RxStorageCountResult> {\n        return this.requestRemote('count', [preparedQuery]);\n    }\n    getAttachmentData(documentId: string, attachmentId: string, digest: string): Promise<string> {\n        return this.requestRemote('getAttachmentData', [documentId, attachmentId, digest]);\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<\n        {\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n        return this.requestRemote('getChangedDocumentsSince', [limit, checkpoint]);\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number): Promise<boolean> {\n        return this.requestRemote('cleanup', [minDeletedTime]);\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.changes$.complete();\n        await this.requestRemote('close', []);\n        await closeMessageChannel(this.internals.messageChannel);\n    }\n    async remove(): Promise<void> {\n        this.closed = true;\n        await this.requestRemote('remove', []);\n        await closeMessageChannel(this.internals.messageChannel);\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.conflicts$;\n    }\n    async resolveConflictResultionTask(taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        await this.requestRemote('resolveConflictResultionTask', [taskSolution]);\n    }\n}\n\nexport function getRxStorageRemote(settings: RxStorageRemoteSettings): RxStorageRemote {\n    const withDefaults = Object.assign({\n        mode: 'storage'\n    }, settings);\n    return new RxStorageRemote(withDefaults);\n}\n"],"mappings":"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"}