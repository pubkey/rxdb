{"version":3,"file":"lokijs-helper.js","names":["CHANGES_COLLECTION_SUFFIX","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","RX_STORAGE_NAME_LOKIJS","stripLokiKey","docData","$loki","cloned","flatClone","$lastWriteAt","_meta","lwt","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","LOKI_DATABASE_STATE_BY_NAME","Map","getLokiDatabase","databaseName","databaseSettings","databaseState","get","hasPersistence","adapter","persistenceMethod","useSettings","Object","assign","autoload","verbose","autosave","throttledSaves","database","lokijs","lokiSaveQueue","LokiSaveQueue","loadDatabasePromise","Promise","res","rej","loadDatabase","recursiveWait","err","autoloadCallback","saveQueue","then","unloads","push","unloadAdd","run","state","collections","set","closeLokiCollections","forEach","collection","collectionName","name","keys","length","delete","u","remove","close","getLokiSortComparator","_schema","query","sort","newRxError","sortOptions","fun","a","b","compareResult","find","sortPart","fieldName","direction","values","directionMultiplier","valueA","getProperty","valueB","args","getLokiLeaderElector","databaseInstanceToken","broadcastChannelRefObject","broadcastChannel","getBroadcastChannelReference","elector","getLeaderElectorByBroadcastChannel","requestRemoteInstance","instance","operation","params","isRxStorageInstanceLoki","messageType","leaderElector","ensureNotFalsy","internals","waitUntilHasLeader","whenDeathListener","leaderDeadPromise","msg","context","action","retry","addEventListener","requestId","randomCouchString","responseListener","responsePromise","_rej","type","response","isError","error","result","postMessage","race","firstResolved","removeEventListener","handleRemoteRequest","console","dir","hasLeader","applyOnce","promiseWait","mustUseLocalState","closed","instanceClosed","localState","isLeader","createLokiLocalState","options","schema","multiInstance","transformRegexToRegExp","selector","ret","key","value","RegExp","opts","Array","isArray","map","item"],"sources":["../../../../src/plugins/storage-lokijs/lokijs-helper.ts"],"sourcesContent":["import { createLokiLocalState, RxStorageInstanceLoki } from './rx-storage-instance-loki';\nimport lokijs, { Collection } from 'lokijs';\nimport type {\n    DeterministicSortComparator,\n    LokiDatabaseSettings,\n    LokiDatabaseState,\n    LokiLocalDatabaseState,\n    LokiRemoteResponseBroadcastMessage,\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types';\nimport {\n    add as unloadAdd,\n    AddReturn\n} from 'unload';\nimport { ensureNotFalsy, flatClone, getProperty, promiseWait, randomCouchString } from '../utils';\nimport { LokiSaveQueue } from './loki-save-queue';\nimport { newRxError } from '../../rx-error';\nimport {\n    LeaderElector,\n    OnMessageHandler\n} from 'broadcast-channel';\nimport { getBroadcastChannelReference } from '../../rx-storage-multiinstance';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\nexport const RX_STORAGE_NAME_LOKIJS = 'lokijs';\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: RxDocumentData<T> & { $loki?: number; }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n\n    /**\n     * In RxDB version 12.0.0,\n     * we introduced the _meta field that already contains the last write time.\n     * To be backwards compatible, we have to move the $lastWriteAt to the _meta field.\n     * TODO remove this in the next major version.\n     */\n    if ((cloned as any).$lastWriteAt) {\n        cloned._meta = {\n            lwt: (cloned as any).$lastWriteAt\n        };\n        delete (cloned as any).$lastWriteAt;\n    }\n\n    delete cloned.$loki;\n    return cloned;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<CollectionOptions<any>> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n};\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiDatabaseState> {\n    let databaseState: Promise<LokiDatabaseState> | undefined = LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        /**\n         * We assume that as soon as an adapter is passed,\n         * the database has to be persistend.\n         */\n        const hasPersistence: boolean = !!databaseSettings.adapter;\n        databaseState = (async () => {\n            let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n            if (databaseSettings.persistenceMethod) {\n                persistenceMethod = databaseSettings.persistenceMethod;\n            }\n            const useSettings = Object.assign(\n                // defaults\n                {\n                    autoload: hasPersistence,\n                    persistenceMethod,\n                    verbose: true\n                },\n                databaseSettings,\n                // overwrites\n                {\n                    /**\n                     * RxDB uses its custom load and save handling\n                     * so we disable the LokiJS save/load handlers.\n                     */\n                    autoload: false,\n                    autosave: false,\n                    throttledSaves: false\n                }\n            );\n            const database = new lokijs(\n                databaseName + '.db',\n                flatClone(useSettings)\n            );\n            const lokiSaveQueue = new LokiSaveQueue(\n                database,\n                useSettings\n            );\n\n            /**\n             * Wait until all data is loaded from persistence adapter.\n             * Wrap the loading into the saveQueue to ensure that when many\n             * collections are created at the same time, the load-calls do not interfere\n             * with each other and cause error logs.\n             */\n            if (hasPersistence) {\n                const loadDatabasePromise = new Promise<void>((res, rej) => {\n                    try {\n                        database.loadDatabase({\n                            recursiveWait: false\n                        }, (err) => {\n                            if (useSettings.autoloadCallback) {\n                                useSettings.autoloadCallback(err);\n                            }\n                            if (err) {\n                                rej(err);\n                            } else {\n                                res();\n                            }\n                        });\n                    } catch (err) {\n                        rej(err);\n                    }\n                });\n                lokiSaveQueue.saveQueue = lokiSaveQueue.saveQueue.then(() => loadDatabasePromise);\n                await loadDatabasePromise;\n            }\n\n            /**\n             * Autosave database on process end\n             */\n            const unloads: AddReturn[] = [];\n            if (hasPersistence) {\n                unloads.push(\n                    unloadAdd(() => lokiSaveQueue.run())\n                );\n            }\n\n            const state: LokiDatabaseState = {\n                database,\n                databaseSettings: useSettings,\n                saveQueue: lokiSaveQueue,\n                collections: {},\n                unloads\n            };\n\n            return state;\n        })();\n        LOKI_DATABASE_STATE_BY_NAME.set(databaseName, databaseState);\n    }\n    return databaseState;\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: Collection[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    await databaseState.saveQueue.run();\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.collections[collectionName];\n    });\n    if (Object.keys(databaseState.collections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        databaseState.unloads.forEach(u => u.remove());\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close(err => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            });\n        });\n    }\n}\n\n/**\n * This function is at lokijs-helper\n * because we need it in multiple places.\n */\nexport function getLokiSortComparator<RxDocType>(\n    _schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: MangoQuery<RxDocType>\n): DeterministicSortComparator<RxDocType> {\n    if (!query.sort) {\n        throw newRxError('SNH', { query });\n    }\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort;\n\n    const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n        let compareResult: number = 0; // 1 | -1\n        sortOptions.find(sortPart => {\n            const fieldName: string = Object.keys(sortPart)[0];\n            const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n            const directionMultiplier = direction === 'asc' ? 1 : -1;\n            const valueA: any = getProperty(a as any, fieldName);\n            const valueB: any = getProperty(b as any, fieldName);\n            if (valueA === valueB) {\n                return false;\n            } else {\n                if (valueA > valueB) {\n                    compareResult = 1 * directionMultiplier;\n                    return true;\n                } else {\n                    compareResult = -1 * directionMultiplier;\n                    return true;\n                }\n            }\n        });\n\n        /**\n         * Two different objects should never have the same sort position.\n         * We ensure this by having the unique primaryKey in the sort params\n         * which is added by RxDB if not existing yet.\n         */\n        if (!compareResult) {\n            throw newRxError('SNH', { args: { query, a, b } });\n        }\n\n        return compareResult as any;\n    };\n    return fun;\n}\n\nexport function getLokiLeaderElector(\n    databaseInstanceToken: string,\n    broadcastChannelRefObject: any,\n    databaseName: string\n): LeaderElector {\n    const broadcastChannel = getBroadcastChannelReference(\n        databaseInstanceToken,\n        databaseName,\n        broadcastChannelRefObject\n    );\n    const elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    return elector;\n}\n\n/**\n * For multi-instance usage, we send requests to the RxStorage\n * to the current leading instance over the BroadcastChannel.\n */\nexport async function requestRemoteInstance(\n    instance: RxStorageInstanceLoki<any>,\n    operation: string,\n    params: any[]\n): Promise<any | any[]> {\n    const isRxStorageInstanceLoki = typeof (instance as any).query === 'function';\n    const messageType = isRxStorageInstanceLoki ? LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE : LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE;\n\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n    await waitUntilHasLeader(leaderElector);\n    const broadcastChannel = leaderElector.broadcastChannel;\n\n    type WinningPromise = {\n        retry: boolean;\n        result?: any;\n        error?: any;\n    };\n\n    let whenDeathListener: OnMessageHandler<any>;\n    const leaderDeadPromise = new Promise<WinningPromise>(res => {\n        whenDeathListener = (msg: any) => {\n            if (msg.context === 'leader' && msg.action === 'death') {\n                res({\n                    retry: true\n                });\n            }\n        };\n        broadcastChannel.addEventListener('internal', whenDeathListener);\n    });\n    const requestId = randomCouchString(12);\n    let responseListener: OnMessageHandler<any>;\n    const responsePromise = new Promise<WinningPromise>((res, _rej) => {\n        responseListener = (msg: any) => {\n            if (\n                msg.type === messageType &&\n                msg.response === true &&\n                msg.requestId === requestId\n            ) {\n                if (msg.isError) {\n                    res({\n                        retry: false,\n                        error: msg.result\n                    });\n                } else {\n                    res({\n                        retry: false,\n                        result: msg.result\n                    });\n                }\n            }\n        };\n        broadcastChannel.addEventListener('message', responseListener);\n    });\n\n    // send out the request to the other instance\n    broadcastChannel.postMessage({\n        response: false,\n        type: messageType,\n        operation,\n        params,\n        requestId,\n        databaseName: instance.databaseName,\n        collectionName: instance.collectionName\n    });\n\n\n    return Promise.race([\n        leaderDeadPromise,\n        responsePromise\n    ]).then(firstResolved => {\n\n        // clean up listeners\n        broadcastChannel.removeEventListener('message', responseListener);\n        broadcastChannel.removeEventListener('internal', whenDeathListener);\n\n        if (firstResolved.retry) {\n            /**\n             * The leader died while a remote request was running\n             * we re-run the whole operation.\n             * We cannot just re-run requestRemoteInstance()\n             * because the current instance might be the new leader now\n             * and then we have to use the local state instead of requesting the remote.\n             */\n            return (instance as any)[operation](...params);\n        } else {\n            if (firstResolved.error) {\n                throw firstResolved.error;\n            } else {\n                return firstResolved.result;\n            }\n        }\n    });\n}\n\n/**\n * Handles a request that came from a remote instance via requestRemoteInstance()\n * Runs the requested operation over the local db instance and sends back the result.\n */\nexport async function handleRemoteRequest(\n    instance: RxStorageInstanceLoki<any>,\n    msg: any\n) {\n    if (\n        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n        msg.requestId &&\n        msg.databaseName === instance.databaseName &&\n        msg.collectionName === instance.collectionName &&\n        !msg.response\n    ) {\n        const operation = (msg as any).operation;\n        const params = (msg as any).params;\n        let result: any;\n        let isError = false;\n        try {\n            result = await (instance as any)[operation](...params);\n        } catch (err) {\n            console.dir(err);\n            isError = true;\n            result = err;\n        }\n        const response: LokiRemoteResponseBroadcastMessage = {\n            response: true,\n            requestId: msg.requestId,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            result,\n            isError,\n            type: msg.type\n        };\n        ensureNotFalsy(instance.internals.leaderElector).broadcastChannel.postMessage(response);\n    }\n}\n\n\nexport async function waitUntilHasLeader(leaderElector: LeaderElector) {\n    while (\n        !leaderElector.hasLeader\n    ) {\n        await leaderElector.applyOnce();\n        await promiseWait(0);\n    }\n}\n\n/**\n * If the local state must be used, that one is returned.\n * Returns false if a remote instance must be used.\n */\nexport async function mustUseLocalState(\n    instance: RxStorageInstanceLoki<any>\n): Promise<LokiLocalDatabaseState | false> {\n    if (instance.closed) {\n        /**\n         * If this happens, it means that RxDB made a call to an already closed storage instance.\n         * This must never happen because when RxDB closes a collection or database,\n         * all tasks must be cleared so that no more calls are made the the storage.\n         */\n        throw newRxError('SNH', {\n            args: {\n                instanceClosed: instance.closed,\n                databaseName: instance.databaseName,\n                collectionName: instance.collectionName\n            }\n        });\n    }\n\n\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n    await waitUntilHasLeader(leaderElector);\n\n    /**\n     * It might already have a localState after the applying\n     * because another subtask also called mustUSeLocalState()\n     */\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n\n    if (\n        leaderElector.isLeader &&\n        !instance.internals.localState\n    ) {\n        // own is leader, use local instance\n        instance.internals.localState = createLokiLocalState<any>({\n            databaseInstanceToken: instance.databaseInstanceToken,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            options: instance.options,\n            schema: (instance as RxStorageInstanceLoki<any>).schema,\n            multiInstance: instance.internals.leaderElector ? true : false\n        }, instance.databaseSettings);\n        return ensureNotFalsy(instance.internals.localState);\n    } else {\n        // other is leader, send message to remote leading instance\n        return false;\n    }\n}\n\n\n/**\n * LokiJS does not understand the 'official' $regex operator,\n * so we have to transform these back into RegExp objects.\n * @recursive\n */\nexport function transformRegexToRegExp(selector: any) {\n    if (typeof selector !== 'object' || selector === null) {\n        return selector;\n    }\n\n    const keys = Object.keys(selector);\n    const ret: any = {};\n    keys.forEach(key => {\n        const value: any = selector[key];\n        if (key === '$options') {\n            return;\n        }\n        if (\n            key === '$regex' &&\n            !(value instanceof RegExp)\n        ) {\n            const opts = selector['$options'];\n            ret[key] = new RegExp(value, opts);\n        } else if (Array.isArray(value)) {\n            ret[key] = value.map(item => transformRegexToRegExp(item));\n        } else {\n            ret[key] = transformRegexToRegExp(value);\n        }\n    });\n    return ret;\n}\n"],"mappings":"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"}