{"version":3,"file":"loki-save-queue.js","names":["_utils","require","LokiSaveQueue","exports","lokiDatabase","databaseSettings","writesSinceLastRun","saveQueue","PROMISE_RESOLVE_VOID","saveQueueC","_proto","prototype","addWrite","run","adapter","then","requestIdlePromise","writeAmount","Promise","res","rej","saveDatabase","err","autosaveCallback","catch"],"sources":["../../../../src/plugins/storage-lokijs/loki-save-queue.ts"],"sourcesContent":["import type { LokiDatabaseSettings } from '../../types';\nimport {\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise\n} from '../utils';\n\n/**\n * The autosave feature of lokijs has strange behaviors\n * and often runs a save in critical moments when other\n * more important tasks are running.\n * So instead we use a custom save queue that ensures we\n * only run loki.saveDatabase() when nothing else is running.\n */\nexport class LokiSaveQueue {\n    public writesSinceLastRun: number = 0;\n\n    /**\n     * Ensures that we do not run multiple saves\n     * in parallel\n     */\n    public saveQueue: Promise<void> = PROMISE_RESOLVE_VOID;\n    // track amount of non-finished save calls in the queue.\n    public saveQueueC = 0;\n\n    constructor(\n        public readonly lokiDatabase: Loki,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n\n    }\n\n    public addWrite() {\n        this.writesSinceLastRun = this.writesSinceLastRun + 1;\n        this.run();\n    }\n\n    public run() {\n        if (\n            // no persistence adapter given, so we do not need to save\n            !this.databaseSettings.adapter ||\n            // do not add more then two pending calls to the queue.\n            this.saveQueueC > 2\n\n        ) {\n            return this.saveQueue;\n        }\n\n        this.saveQueueC = this.saveQueueC + 1;\n        this.saveQueue = this.saveQueue\n            .then(async () => {\n                /**\n                 * Always wait until the JavaScript process is idle.\n                 * This ensures that CPU blocking writes are finished\n                 * before we proceed.\n                 */\n                await requestIdlePromise();\n\n                // no write happened since the last save call\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                /**\n                 * Because LokiJS is a in-memory database,\n                 * we can just wait until the JavaScript process is idle\n                 * via requestIdlePromise(). Then we know that nothing important\n                 * is running at the moment.\n                 */\n                await requestIdlePromise().then(() => requestIdlePromise());\n\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                const writeAmount = this.writesSinceLastRun;\n                this.writesSinceLastRun = 0;\n                return new Promise<void>((res, rej) => {\n                    this.lokiDatabase.saveDatabase(err => {\n                        if (err) {\n                            this.writesSinceLastRun = this.writesSinceLastRun + writeAmount;\n                            rej(err);\n                        } else {\n                            if (this.databaseSettings.autosaveCallback) {\n                                this.databaseSettings.autosaveCallback();\n                            }\n                            res();\n                        }\n                    });\n                });\n            })\n            .catch(() => { })\n            .then(() => {\n                this.saveQueueC = this.saveQueueC - 1;\n            });\n        return this.saveQueue;\n    }\n}\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAOaC,aAAa,GAAAC,OAAA,CAAAD,aAAA;EAGtB;AACJ;AACA;AACA;;EAEI;;EAGA,SAAAA,cACoBE,YAAkB,EAClBC,gBAAsC,EACxD;IAAA,KAbKC,kBAAkB,GAAW,CAAC;IAAA,KAM9BC,SAAS,GAAkBC,2BAAoB;IAAA,KAE/CC,UAAU,GAAG,CAAC;IAAA,KAGDL,YAAkB,GAAlBA,YAAkB;IAAA,KAClBC,gBAAsC,GAAtCA,gBAAsC;EAG1D;EAAC,IAAAK,MAAA,GAAAR,aAAA,CAAAS,SAAA;EAAAD,MAAA,CAEME,QAAQ,GAAf,SAAAA,SAAA,EAAkB;IACd,IAAI,CAACN,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,GAAG,CAAC;IACrD,IAAI,CAACO,GAAG,CAAC,CAAC;EACd,CAAC;EAAAH,MAAA,CAEMG,GAAG,GAAV,SAAAA,IAAA,EAAa;IACT;IACI;IACA,CAAC,IAAI,CAACR,gBAAgB,CAACS,OAAO;IAC9B;IACA,IAAI,CAACL,UAAU,GAAG,CAAC,EAErB;MACE,OAAO,IAAI,CAACF,SAAS;IACzB;IAEA,IAAI,CAACE,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG,CAAC;IACrC,IAAI,CAACF,SAAS,GAAG,IAAI,CAACA,SAAS,CAC1BQ,IAAI,CAAC,YAAY;MACd;AAChB;AACA;AACA;AACA;MACgB,MAAM,IAAAC,yBAAkB,EAAC,CAAC;;MAE1B;MACA,IAAI,IAAI,CAACV,kBAAkB,KAAK,CAAC,EAAE;QAC/B;MACJ;;MAEA;AAChB;AACA;AACA;AACA;AACA;MACgB,MAAM,IAAAU,yBAAkB,EAAC,CAAC,CAACD,IAAI,CAAC,MAAM,IAAAC,yBAAkB,EAAC,CAAC,CAAC;MAE3D,IAAI,IAAI,CAACV,kBAAkB,KAAK,CAAC,EAAE;QAC/B;MACJ;MAEA,IAAMW,WAAW,GAAG,IAAI,CAACX,kBAAkB;MAC3C,IAAI,CAACA,kBAAkB,GAAG,CAAC;MAC3B,OAAO,IAAIY,OAAO,CAAO,CAACC,GAAG,EAAEC,GAAG,KAAK;QACnC,IAAI,CAAChB,YAAY,CAACiB,YAAY,CAACC,GAAG,IAAI;UAClC,IAAIA,GAAG,EAAE;YACL,IAAI,CAAChB,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,GAAGW,WAAW;YAC/DG,GAAG,CAACE,GAAG,CAAC;UACZ,CAAC,MAAM;YACH,IAAI,IAAI,CAACjB,gBAAgB,CAACkB,gBAAgB,EAAE;cACxC,IAAI,CAAClB,gBAAgB,CAACkB,gBAAgB,CAAC,CAAC;YAC5C;YACAJ,GAAG,CAAC,CAAC;UACT;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,CAAC,CACDK,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC,CAChBT,IAAI,CAAC,MAAM;MACR,IAAI,CAACN,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG,CAAC;IACzC,CAAC,CAAC;IACN,OAAO,IAAI,CAACF,SAAS;EACzB,CAAC;EAAA,OAAAL,aAAA;AAAA"}