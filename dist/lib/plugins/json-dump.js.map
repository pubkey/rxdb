{"version":3,"file":"json-dump.js","names":["dumpRxDatabase","collections","json","name","instanceToken","token","useCollections","Object","keys","filter","colName","includes","charAt","map","Promise","all","col","exportJSON","then","cols","importDumpRxDatabase","dump","missingCollections","length","newRxError","colDump","importJSON","dumpRxCollection","schemaHash","schema","hash","docs","query","createRxQuery","_getDefaultQuery","queryCollection","docData","flatClone","_rev","_attachments","importDumpRxCollection","exportedJSON","own","storageInstance","bulkWrite","document","assign","_meta","lwt","now","getDefaultRevision","_deleted","RxDBJsonDumpPlugin","rxdb","prototypes","RxDatabase","proto","RxCollection","overwritable"],"sources":["../../../src/plugins/json-dump.ts"],"sourcesContent":["/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport {\n    createRxQuery,\n    queryCollection,\n    _getDefaultQuery\n} from '../rx-query';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDatabase,\n    RxCollection,\n    RxPlugin,\n    RxDocumentData\n} from '../types';\nimport {\n    flatClone,\n    getDefaultRevision,\n    now\n} from '../util';\n\nfunction dumpRxDatabase(\n    this: RxDatabase,\n    collections?: string[]\n): Promise<any> {\n    const json: any = {\n        name: this.name,\n        instanceToken: this.token,\n        collections: []\n    };\n\n    const useCollections = Object.keys(this.collections)\n        .filter(colName => !collections || collections.includes(colName))\n        .filter(colName => colName.charAt(0) !== '_')\n        .map(colName => this.collections[colName]);\n\n    return Promise.all(\n        useCollections\n            .map(col => col.exportJSON())\n    ).then(cols => {\n        json.collections = cols;\n        return json;\n    });\n}\n\nconst importDumpRxDatabase = function (\n    this: RxDatabase,\n    dump: any\n) {\n    /**\n     * collections must be created before the import\n     * because we do not know about the other collection-settings here\n     */\n    const missingCollections = dump.collections\n        .filter((col: any) => !this.collections[col.name])\n        .map((col: any) => col.name);\n    if (missingCollections.length > 0) {\n        throw newRxError('JD1', {\n            missingCollections\n        });\n    }\n\n    return Promise.all(\n        dump.collections\n            .map((colDump: any) => this.collections[colDump.name].importJSON(colDump))\n    );\n};\n\nconst dumpRxCollection = function (\n    this: RxCollection\n) {\n    const json: any = {\n        name: this.name,\n        schemaHash: this.schema.hash,\n        docs: []\n    };\n\n    const query = createRxQuery(\n        'find',\n        _getDefaultQuery(),\n        this\n    );\n    return queryCollection(query)\n        .then((docs: any) => {\n            json.docs = docs.map((docData: any) => {\n                docData = flatClone(docData);\n                delete docData._rev;\n                delete docData._attachments;\n                return docData;\n            });\n            return json;\n        });\n};\n\nfunction importDumpRxCollection<RxDocType>(\n    this: RxCollection<RxDocType>,\n    exportedJSON: any\n): Promise<any> {\n    // check schemaHash\n    if (exportedJSON.schemaHash !== this.schema.hash) {\n        throw newRxError('JD2', {\n            schemaHash: exportedJSON.schemaHash,\n            own: this.schema.hash\n        });\n    }\n\n    const docs: RxDocType[] = exportedJSON.docs;\n    return this.storageInstance.bulkWrite(\n        docs.map(docData => {\n            const document: RxDocumentData<RxDocType> = Object.assign(\n                {},\n                docData,\n                {\n                    _meta: {\n                        lwt: now()\n                    },\n                    _rev: getDefaultRevision(),\n                    _attachments: {},\n                    _deleted: false\n                }\n            );\n            return {\n                document\n            }\n        }),\n        'json-dump-import'\n    );\n}\n\nexport const RxDBJsonDumpPlugin: RxPlugin = {\n    name: 'json-dump',\n    rxdb: true,\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.exportJSON = dumpRxDatabase;\n            proto.importJSON = importDumpRxDatabase;\n        },\n        RxCollection: (proto: any) => {\n            proto.exportJSON = dumpRxCollection;\n            proto.importJSON = importDumpRxCollection;\n        }\n    },\n    overwritable: {}\n};\n"],"mappings":"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"}