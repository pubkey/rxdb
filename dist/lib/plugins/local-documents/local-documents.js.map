{"version":3,"file":"local-documents.js","names":["getLocal","id","getLocalDocStateByParent","state","docCache","found","get","Promise","resolve","getSingleDocument","storageInstance","then","docData","doc","createRxLocalDocument","insertLocal","data","_deleted","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","writeSingle","document","res","flatClone","newDoc","upsertLocal","existing","docPromise","atomicUpdate","getLocal$","$","pipe","startWith","mergeMap","cE","changeEvent","changeEventOrDoc","isLocal","documentId","use","filter","filterFlagged","map"],"sources":["../../../../src/plugins/local-documents/local-documents.ts"],"sourcesContent":["import {\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta\n} from '../../util';\n\nimport type {\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxDocumentWriteData,\n    RxLocalDocument,\n    RxLocalDocumentData\n} from '../../types';\n\nimport {\n    filter,\n    map,\n    startWith,\n    mergeMap\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { createRxLocalDocument } from './rx-local-document';\nimport { getLocalDocStateByParent } from './local-documents-helper';\nimport { getSingleDocument, writeSingle } from '../../rx-storage-helper';\n\n\n\n/**\n * save the local-document-data\n * throws if already exists\n */\nexport async function insertLocal<DocData = any>(\n    this: RxDatabase | RxCollection,\n    id: string,\n    data: DocData\n): Promise<RxLocalDocument<DocData>> {\n    const state = await getLocalDocStateByParent(this);\n\n    // create new one\n    let docData: RxDocumentWriteData<RxLocalDocumentData<DocData>> = {\n        id: id,\n        data,\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    return writeSingle(\n        state.storageInstance,\n        {\n            document: docData\n        },\n        'local-document-insert'\n    ).then(res => {\n        docData = flatClone(docData);\n        docData._rev = res._rev;\n        const newDoc = createRxLocalDocument(id, docData as any, this, state);\n        return newDoc as any;\n    });\n}\n\n/**\n * save the local-document-data\n * overwrites existing if exists\n */\nexport function upsertLocal<DocData = any>(\n    this: any,\n    id: string,\n    data: DocData\n): Promise<RxLocalDocument<DocData>> {\n    return this.getLocal(id)\n        .then((existing: RxDocument) => {\n            if (!existing) {\n                // create new one\n                const docPromise = this.insertLocal(id, data);\n                return docPromise;\n            } else {\n                // update existing\n                return existing.atomicUpdate(() => {\n                    return data;\n                }).then(() => existing);\n            }\n        });\n}\n\nexport async function getLocal<DocData = any>(this: any, id: string): Promise<RxLocalDocument<DocData> | null> {\n    const state = await getLocalDocStateByParent(this);\n    const docCache = state.docCache;\n\n    // check in doc-cache\n    const found = docCache.get(id);\n    if (found) {\n        return Promise.resolve(found as any);\n    }\n\n    // if not found, check in storage instance\n    return getSingleDocument(state.storageInstance, id)\n        .then((docData) => {\n            if (!docData) {\n                return null;\n            }\n            const doc = createRxLocalDocument(id, docData, this, state);\n            return doc as any;\n        })\n        .catch(() => null);\n}\n\nexport function getLocal$<DocData = any>(this: RxCollection, id: string): Observable<RxLocalDocument<DocData> | null> {\n    return this.$.pipe(\n        startWith(null),\n        mergeMap(async (cE: RxChangeEvent<RxLocalDocumentData> | null) => {\n            if (cE) {\n                return {\n                    changeEvent: cE\n                };\n            } else {\n                const doc = await this.getLocal(id);\n                return {\n                    doc: doc\n                };\n            }\n        }),\n        mergeMap(async (changeEventOrDoc) => {\n            if (changeEventOrDoc.changeEvent) {\n                const cE = changeEventOrDoc.changeEvent;\n                if (!cE.isLocal || cE.documentId !== id) {\n                    return {\n                        use: false\n                    };\n                } else {\n                    const doc = await this.getLocal(id);\n                    return {\n                        use: true,\n                        doc: doc\n                    };\n                }\n            } else {\n                return {\n                    use: true,\n                    doc: changeEventOrDoc.doc\n                };\n            }\n        }),\n        filter(filterFlagged => filterFlagged.use),\n        map(filterFlagged => {\n            return filterFlagged.doc as any;\n        })\n    );\n}\n"],"mappings":"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"}