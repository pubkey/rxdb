{"version":3,"file":"rx-storage-instance-loki.js","names":["createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseInstanceToken","databaseName","collectionName","schema","internals","options","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_LOKIJS","leaderElector","broadcastChannel","undefined","multiInstance","closeBefore","close","bind","removeBroadcastChannelReference","broadcastChannelRefObject","removeBefore","remove","ensureNotFalsy","awaitLeadership","then","closed","mustUseLocalState","getLokiLeaderElector","localState","createLokiLocalState","getLokiDatabase","databaseState","indices","indexes","forEach","idx","isMaybeReadonlyArray","push","primaryKey","getPrimaryFieldOfPrimaryKey","lokiCollectionName","version","collectionOptions","Object","assign","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","collection","database","addCollection","collections","ret","instanceId","now","changes$","Subject","primaryPath","OPEN_LOKIJS_STORAGE_INSTANCES","add","copiedSelf","bulkWrite","changeStream","cleanup","query","count","findDocumentsById","conflictResultionTasks","getAttachmentData","getChangedDocumentsSince","resolveConflictResultionTask","addEventListener","msg","handleRemoteRequest","documentWrites","context","length","newRxError","args","requestRemoteInstance","success","error","docsInDb","Map","docsInDbWithLokiKey","writeRow","id","document","documentInDb","by","set","stripLokiKey","categorized","categorizeBulkWriteRows","errors","bulkInsertDocs","docId","insert","flatClone","bulkUpdateDocs","documentInDbWithLokiKey","getFromMapOrThrow","writeDoc","$loki","update","saveQueue","addWrite","eventBulk","events","lastState","getNewestOfDocumentStates","values","checkpoint","lwt","_meta","next","ids","deleted","_deleted","preparedQuery","chain","find","selector","sort","getLokiSortComparator","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","result","mode","_documentId","_attachmentId","Error","sinceLwt","RX_META_LWT_MINIMUM","$gte","getSortDocumentsByLastWriteTimeComparator","changedDocs","first","shift","slice","lastDoc","lastOfArray","docData","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","complete","dbState","run","closeLokiCollections","removeCollection","name","_taskSolution"],"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM,\n    lastOfArray\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows, getNewestOfDocumentStates } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                count: this.count.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                getChangedDocumentsSince: this.getChangedDocumentsSince.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            }\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentDataById<RxDocType> = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    async count(\n        preparedQuery: MangoQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint | null\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs.map(docData => stripLokiKey(docData)),\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath],\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance)\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}