{"version":3,"file":"websocket-client.js","names":["ensureIsWebsocket","w","is","CLOSING","console","dir","Error","replicateWithWebsocketServer","options","getWebSocket","url","collection","database","socketState","wsClient","socket","messages$","message$","requestCounter","getRequestId","count","token","requestFlag","randomCouchString","replicationState","replicateRxCollection","replicationIdentifier","pull","batchSize","stream$","pipe","filter","msg","id","name","map","result","handler","lastPulledCheckpoint","requestId","request","method","params","send","JSON","stringify","firstValueFrom","push","docs","error$","subscribe","err","subjects","error","next","connected$","isConnected","reSync","streamRequest","onDestroy","removeWebSocketRef","cacheKey","has","WEBSOCKET_BY_CACHE_KEY","get","IsomorphicWebSocket","ReconnectingWebSocket","WebSocket","BehaviorSubject","openPromise","Promise","res","onopen","onclose","Subject","onmessage","messageObj","message","parse","data","onerror","emitError","newRxError","errors","Array","isArray","direction","refCount","set","Map","obj","getFromMapOrThrow","complete","close"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import { replicateRxCollection, RxReplicationState } from '../replication';\nimport {\n    WebsocketClientOptions,\n    WebsocketMessageResponseType,\n    WebsocketMessageType\n} from './websocket-types';\n\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport IsomorphicWebSocket from 'isomorphic-ws';\nimport {\n    getFromMapOrThrow,\n    randomCouchString\n} from '../../util';\nimport {\n    filter,\n    map,\n    Subject,\n    firstValueFrom,\n    BehaviorSubject\n} from 'rxjs';\nimport {\n    RxDatabase,\n    RxError,\n    RxReplicationWriteToMasterRow\n} from '../../types';\nimport { newRxError } from '../../rx-error';\n\nexport type WebsocketWithRefCount = {\n    url: string;\n    socket: ReconnectingWebSocket;\n    refCount: number;\n    openPromise: Promise<void>;\n    connected$: BehaviorSubject<boolean>;\n    message$: Subject<WebsocketMessageResponseType>;\n    error$: Subject<RxError>\n};\n\n\n/**\n * Copied and adapter from the 'reconnecting-websocket' npm module.\n * Some bundlers have problems with bundling the isomorphic-ws plugin\n * so we directly check the correctness in RxDB to ensure that we can\n * throw a helpful error.\n */\nfunction ensureIsWebsocket(w: typeof IsomorphicWebSocket) {\n    const is = typeof w !== 'undefined' && !!w && w.CLOSING === 2;\n    if (!is) {\n        console.dir(w);\n        throw new Error('websocket not valid');\n    }\n}\n\n/**\n * Reuse the same socket even when multiple\n * collection replicate with the same server at once.\n */\nexport const WEBSOCKET_BY_CACHE_KEY: Map<string, WebsocketWithRefCount> = new Map();\nexport async function getWebSocket(\n    url: string,\n    database: RxDatabase<any, any, any>\n): Promise<WebsocketWithRefCount> {\n    /**\n     * Also use the database token as cache-key\n     * to make it easier to test and debug\n     * multi-instance setups.\n     */\n    const cacheKey = url + '|||' + database.token;\n\n    let has = WEBSOCKET_BY_CACHE_KEY.get(cacheKey);\n    if (!has) {\n        ensureIsWebsocket(IsomorphicWebSocket);\n        const wsClient = new ReconnectingWebSocket(\n            url,\n            [],\n            {\n                WebSocket: IsomorphicWebSocket\n            }\n        );\n\n        const connected$ = new BehaviorSubject<boolean>(false);\n        const openPromise = new Promise<void>(res => {\n            wsClient.onopen = () => {\n                connected$.next(true);\n                res();\n            };\n        });\n        wsClient.onclose = () => {\n            connected$.next(false);\n        };\n\n        const message$ = new Subject<WebsocketMessageResponseType>();\n        wsClient.onmessage = (messageObj) => {\n            const message: WebsocketMessageResponseType = JSON.parse(messageObj.data);\n            message$.next(message);\n        };\n\n        const error$ = new Subject<any>();\n        wsClient.onerror = (err) => {\n            const emitError = newRxError('RC_STREAM', {\n                errors: Array.isArray(err) ? err as any : [err],\n                direction: 'pull'\n            });\n            error$.next(emitError);\n        }\n\n\n        has = {\n            url,\n            socket: wsClient,\n            openPromise,\n            refCount: 1,\n            connected$,\n            message$,\n            error$\n        };\n        WEBSOCKET_BY_CACHE_KEY.set(cacheKey, has);\n    } else {\n        has.refCount = has.refCount + 1;\n    }\n\n\n    await has.openPromise;\n    return has;\n}\n\nexport function removeWebSocketRef(\n    url: string,\n    database: RxDatabase\n) {\n    const cacheKey = url + '|||' + database.token;\n    const obj = getFromMapOrThrow(WEBSOCKET_BY_CACHE_KEY, cacheKey);\n    obj.refCount = obj.refCount - 1;\n    if (obj.refCount === 0) {\n        WEBSOCKET_BY_CACHE_KEY.delete(cacheKey);\n        obj.connected$.complete();\n        obj.socket.close();\n    }\n}\n\n\n\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\n    options: WebsocketClientOptions<RxDocType>\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\n    const socketState = await getWebSocket(options.url, options.collection.database);\n    const wsClient = socketState.socket;\n\n    const messages$ = socketState.message$;\n\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\n    }\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\n        collection: options.collection,\n        replicationIdentifier: 'websocket-' + options.url,\n        pull: {\n            batchSize: options.batchSize,\n            stream$: messages$.pipe(\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\n                map(msg => msg.result)\n            ),\n            async handler(lastPulledCheckpoint: CheckpointType, batchSize: number) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterChangesSince',\n                    params: [lastPulledCheckpoint, batchSize]\n                }\n                wsClient.send(JSON.stringify(request));\n                const result = await firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n                return result;\n            }\n        },\n        push: {\n            batchSize: options.batchSize,\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterWrite',\n                    params: [docs]\n                }\n                wsClient.send(JSON.stringify(request));\n                return firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n            }\n        }\n    });\n\n    socketState.error$.subscribe(err => replicationState.subjects.error.next(err));\n\n    socketState.connected$.subscribe(isConnected => {\n        if (isConnected) {\n            /**\n             * When the client goes offline and online again,\n             * we have to send a 'RESYNC' signal because the client\n             * might have missed out events while being offline.\n             */\n            replicationState.reSync();\n\n            /**\n             * Because reconnecting creates a new websocket-instance,\n             * we have to start the changestream from the remote again\n             * each time.\n             */\n            const streamRequest: WebsocketMessageType = {\n                id: 'stream',\n                collection: options.collection.name,\n                method: 'masterChangeStream$',\n                params: []\n            }\n            wsClient.send(JSON.stringify(streamRequest));\n        }\n    });\n\n    options.collection.onDestroy.push(() => removeWebSocketRef(options.url, options.collection.database));\n    return replicationState;\n}\n"],"mappings":";;;;;;;;;AAAA;AAOA;AACA;AACA;AAIA;AAYA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,CAACC,CAA6B,EAAE;EACtD,IAAMC,EAAE,GAAG,OAAOD,CAAC,KAAK,WAAW,IAAI,CAAC,CAACA,CAAC,IAAIA,CAAC,CAACE,OAAO,KAAK,CAAC;EAC7D,IAAI,CAACD,EAAE,EAAE;IACLE,OAAO,CAACC,GAAG,CAACJ,CAAC,CAAC;IACd,MAAM,IAAIK,KAAK,CAAC,qBAAqB,CAAC;EAC1C;AACJ;;AAEA;AACA;AACA;AACA;AAHA,IAyFsBC,4BAA4B,YAA5BA,4BAA4B,CAC9CC,OAA0C;EAAA,IACY;IAAA,uBAC5BC,YAAY,CAACD,OAAO,CAACE,GAAG,EAAEF,OAAO,CAACG,UAAU,CAACC,QAAQ,CAAC,iBAA1EC,WAAW;MACjB,IAAMC,QAAQ,GAAGD,WAAW,CAACE,MAAM;MAEnC,IAAMC,SAAS,GAAGH,WAAW,CAACI,QAAQ;MAEtC,IAAIC,cAAc,GAAG,CAAC;MAEtB,SAASC,YAAY,GAAG;QACpB,IAAMC,KAAK,GAAGF,cAAc,EAAE;QAC9B,OAAOV,OAAO,CAACG,UAAU,CAACC,QAAQ,CAACS,KAAK,GAAG,GAAG,GAAGC,WAAW,GAAG,GAAG,GAAGF,KAAK;MAC9E;MAJA,IAAME,WAAW,GAAG,IAAAC,uBAAiB,EAAC,EAAE,CAAC;MAKzC,IAAMC,gBAAgB,GAAG,IAAAC,kCAAqB,EAA4B;QACtEd,UAAU,EAAEH,OAAO,CAACG,UAAU;QAC9Be,qBAAqB,EAAE,YAAY,GAAGlB,OAAO,CAACE,GAAG;QACjDiB,IAAI,EAAE;UACFC,SAAS,EAAEpB,OAAO,CAACoB,SAAS;UAC5BC,OAAO,EAAEb,SAAS,CAACc,IAAI,CACnB,IAAAC,YAAM,EAAC,UAAAC,GAAG;YAAA,OAAIA,GAAG,CAACC,EAAE,KAAK,QAAQ,IAAID,GAAG,CAACrB,UAAU,KAAKH,OAAO,CAACG,UAAU,CAACuB,IAAI;UAAA,EAAC,EAChF,IAAAC,SAAG,EAAC,UAAAH,GAAG;YAAA,OAAIA,GAAG,CAACI,MAAM;UAAA,EAAC,CACzB;UACKC,OAAO,mBAACC,oBAAoC,EAAEV,SAAiB;YAAA,IAAE;cACnE,IAAMW,SAAS,GAAGpB,YAAY,EAAE;cAChC,IAAMqB,OAA6B,GAAG;gBAClCP,EAAE,EAAEM,SAAS;gBACb5B,UAAU,EAAEH,OAAO,CAACG,UAAU,CAACuB,IAAI;gBACnCO,MAAM,EAAE,oBAAoB;gBAC5BC,MAAM,EAAE,CAACJ,oBAAoB,EAAEV,SAAS;cAC5C,CAAC;cACDd,QAAQ,CAAC6B,IAAI,CAACC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC,CAAC;cAAC,uBAClB,IAAAM,oBAAc,EAC/B9B,SAAS,CAACc,IAAI,CACV,IAAAC,YAAM,EAAC,UAAAC,GAAG;gBAAA,OAAIA,GAAG,CAACC,EAAE,KAAKM,SAAS;cAAA,EAAC,EACnC,IAAAJ,SAAG,EAAC,UAAAH,GAAG;gBAAA,OAAIA,GAAG,CAACI,MAAM;cAAA,EAAC,CACzB,CACJ;YAEL,CAAC;cAAA;YAAA;UAAA;QACL,CAAC;QACDW,IAAI,EAAE;UACFnB,SAAS,EAAEpB,OAAO,CAACoB,SAAS;UAC5BS,OAAO,mBAACW,IAAgD,EAAE;YACtD,IAAMT,SAAS,GAAGpB,YAAY,EAAE;YAChC,IAAMqB,OAA6B,GAAG;cAClCP,EAAE,EAAEM,SAAS;cACb5B,UAAU,EAAEH,OAAO,CAACG,UAAU,CAACuB,IAAI;cACnCO,MAAM,EAAE,aAAa;cACrBC,MAAM,EAAE,CAACM,IAAI;YACjB,CAAC;YACDlC,QAAQ,CAAC6B,IAAI,CAACC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC,CAAC;YACtC,OAAO,IAAAM,oBAAc,EACjB9B,SAAS,CAACc,IAAI,CACV,IAAAC,YAAM,EAAC,UAAAC,GAAG;cAAA,OAAIA,GAAG,CAACC,EAAE,KAAKM,SAAS;YAAA,EAAC,EACnC,IAAAJ,SAAG,EAAC,UAAAH,GAAG;cAAA,OAAIA,GAAG,CAACI,MAAM;YAAA,EAAC,CACzB,CACJ;UACL;QACJ;MACJ,CAAC,CAAC;MAEFvB,WAAW,CAACoC,MAAM,CAACC,SAAS,CAAC,UAAAC,GAAG;QAAA,OAAI3B,gBAAgB,CAAC4B,QAAQ,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC;MAAA,EAAC;MAE9EtC,WAAW,CAAC0C,UAAU,CAACL,SAAS,CAAC,UAAAM,WAAW,EAAI;QAC5C,IAAIA,WAAW,EAAE;UACb;AACZ;AACA;AACA;AACA;UACYhC,gBAAgB,CAACiC,MAAM,EAAE;;UAEzB;AACZ;AACA;AACA;AACA;UACY,IAAMC,aAAmC,GAAG;YACxCzB,EAAE,EAAE,QAAQ;YACZtB,UAAU,EAAEH,OAAO,CAACG,UAAU,CAACuB,IAAI;YACnCO,MAAM,EAAE,qBAAqB;YAC7BC,MAAM,EAAE;UACZ,CAAC;UACD5B,QAAQ,CAAC6B,IAAI,CAACC,IAAI,CAACC,SAAS,CAACa,aAAa,CAAC,CAAC;QAChD;MACJ,CAAC,CAAC;MAEFlD,OAAO,CAACG,UAAU,CAACgD,SAAS,CAACZ,IAAI,CAAC;QAAA,OAAMa,kBAAkB,CAACpD,OAAO,CAACE,GAAG,EAAEF,OAAO,CAACG,UAAU,CAACC,QAAQ,CAAC;MAAA,EAAC;MACrG,OAAOY,gBAAgB;IAAC;EAC5B,CAAC;IAAA;EAAA;AAAA;AAAA;AAAA,IA9KqBf,YAAY,YAAZA,YAAY,CAC9BC,GAAW,EACXE,QAAmC;EAAA,IACL;IAC9B;AACJ;AACA;AACA;AACA;IACI,IAAMiD,QAAQ,GAAGnD,GAAG,GAAG,KAAK,GAAGE,QAAQ,CAACS,KAAK;IAE7C,IAAIyC,GAAG,GAAGC,sBAAsB,CAACC,GAAG,CAACH,QAAQ,CAAC;IAC9C,IAAI,CAACC,GAAG,EAAE;MACN9D,iBAAiB,CAACiE,wBAAmB,CAAC;MACtC,IAAMnD,QAAQ,GAAG,IAAIoD,iCAAqB,CACtCxD,GAAG,EACH,EAAE,EACF;QACIyD,SAAS,EAAEF;MACf,CAAC,CACJ;MAED,IAAMV,UAAU,GAAG,IAAIa,qBAAe,CAAU,KAAK,CAAC;MACtD,IAAMC,WAAW,GAAG,IAAIC,OAAO,CAAO,UAAAC,GAAG,EAAI;QACzCzD,QAAQ,CAAC0D,MAAM,GAAG,YAAM;UACpBjB,UAAU,CAACD,IAAI,CAAC,IAAI,CAAC;UACrBiB,GAAG,EAAE;QACT,CAAC;MACL,CAAC,CAAC;MACFzD,QAAQ,CAAC2D,OAAO,GAAG,YAAM;QACrBlB,UAAU,CAACD,IAAI,CAAC,KAAK,CAAC;MAC1B,CAAC;MAED,IAAMrC,QAAQ,GAAG,IAAIyD,aAAO,EAAgC;MAC5D5D,QAAQ,CAAC6D,SAAS,GAAG,UAACC,UAAU,EAAK;QACjC,IAAMC,OAAqC,GAAGjC,IAAI,CAACkC,KAAK,CAACF,UAAU,CAACG,IAAI,CAAC;QACzE9D,QAAQ,CAACqC,IAAI,CAACuB,OAAO,CAAC;MAC1B,CAAC;MAED,IAAM5B,MAAM,GAAG,IAAIyB,aAAO,EAAO;MACjC5D,QAAQ,CAACkE,OAAO,GAAG,UAAC7B,GAAG,EAAK;QACxB,IAAM8B,SAAS,GAAG,IAAAC,mBAAU,EAAC,WAAW,EAAE;UACtCC,MAAM,EAAEC,KAAK,CAACC,OAAO,CAAClC,GAAG,CAAC,GAAGA,GAAG,GAAU,CAACA,GAAG,CAAC;UAC/CmC,SAAS,EAAE;QACf,CAAC,CAAC;QACFrC,MAAM,CAACK,IAAI,CAAC2B,SAAS,CAAC;MAC1B,CAAC;MAGDnB,GAAG,GAAG;QACFpD,GAAG,EAAHA,GAAG;QACHK,MAAM,EAAED,QAAQ;QAChBuD,WAAW,EAAXA,WAAW;QACXkB,QAAQ,EAAE,CAAC;QACXhC,UAAU,EAAVA,UAAU;QACVtC,QAAQ,EAARA,QAAQ;QACRgC,MAAM,EAANA;MACJ,CAAC;MACDc,sBAAsB,CAACyB,GAAG,CAAC3B,QAAQ,EAAEC,GAAG,CAAC;IAC7C,CAAC,MAAM;MACHA,GAAG,CAACyB,QAAQ,GAAGzB,GAAG,CAACyB,QAAQ,GAAG,CAAC;IACnC;IAAC,uBAGKzB,GAAG,CAACO,WAAW;MACrB,OAAOP,GAAG;IAAC;EACf,CAAC;IAAA;EAAA;AAAA;AAAA;AAnEM,IAAMC,sBAA0D,GAAG,IAAI0B,GAAG,EAAE;AAAC;AAqE7E,SAAS7B,kBAAkB,CAC9BlD,GAAW,EACXE,QAAoB,EACtB;EACE,IAAMiD,QAAQ,GAAGnD,GAAG,GAAG,KAAK,GAAGE,QAAQ,CAACS,KAAK;EAC7C,IAAMqE,GAAG,GAAG,IAAAC,uBAAiB,EAAC5B,sBAAsB,EAAEF,QAAQ,CAAC;EAC/D6B,GAAG,CAACH,QAAQ,GAAGG,GAAG,CAACH,QAAQ,GAAG,CAAC;EAC/B,IAAIG,GAAG,CAACH,QAAQ,KAAK,CAAC,EAAE;IACpBxB,sBAAsB,UAAO,CAACF,QAAQ,CAAC;IACvC6B,GAAG,CAACnC,UAAU,CAACqC,QAAQ,EAAE;IACzBF,GAAG,CAAC3E,MAAM,CAAC8E,KAAK,EAAE;EACtB;AACJ"}