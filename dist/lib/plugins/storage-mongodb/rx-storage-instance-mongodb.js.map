{"version":3,"file":"rx-storage-instance-mongodb.js","names":["_rxjs","require","_rxSchemaHelper","_utils","_mongodb","_rxStorageHelper","_mongodbHelper","RxStorageInstanceMongoDB","exports","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","Subject","runningOperations","BehaviorSubject","runningWrites","mongoObjectIdCache","WeakMap","attachments","Error","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","inMongoPrimaryPath","MONGO_ID_SUBSTITUTE_FIELDNAME","mongoClient","MongoClient","databaseSettings","connection","mongoDatabase","db","version","indexes","slice","map","index","arIndex","isMaybeReadonlyArray","push","mongoCollectionPromise","createCollection","then","mongoCollection","createIndexes","mongoIndex","forEach","field","name","getMongoDBIndexName","key","_proto","prototype","bulkWrite","documentWrites","context","next","getValue","firstValueFrom","pipe","filter","c","Promise","reject","ret","success","error","docIds","d","document","documentStates","findDocumentsById","categorized","categorizeBulkWriteRows","errors","eventBulk","events","all","bulkInsertDocs","writeRow","docId","writeResult","findOneAndUpdate","$setOnInsert","swapRxDocToMongo","upsert","includeResultMetadata","value","conflictError","status","documentId","documentInDb","swapMongoToRxDoc","isError","event","changeByDocId","get","bulkUpdateDocs","findOneAndReplace","_rev","ensureNotFalsy","previous","currentDocState","currentDoc","getFromObjectOrThrow","getFromMapOrThrow","length","lastState","newestRow","checkpoint","id","lwt","_meta","withDeleted","session","plainQuery","$in","_deleted","result","queryResult","find","toArray","row","query","preparedQuery","mongoSelector","skip","limit","sort","mongoSort","resultDocs","documents","count","countDocuments","mode","getChangedDocumentsSince","sinceLwt","RX_META_LWT_MINIMUM","$or","$gt","$eq","lastDoc","lastOfArray","cleanup","minimumDeletedTime","maxDeletionTime","now","deleteMany","$lt","getAttachmentData","_documentId","_attachmentId","_digest","changeStream","remove","drop","close","requestIdlePromise","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createMongoDBStorageInstance","params","instance","resolve"],"sources":["../../../../src/plugins/storage-mongodb/rx-storage-instance-mongodb.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    Observable,\n    Subject,\n    filter,\n    firstValueFrom\n} from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageWriteErrorConflict,\n    StringKeys\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    getFromObjectOrThrow,\n    isMaybeReadonlyArray,\n    lastOfArray,\n    now,\n    requestIdlePromise,\n    RX_META_LWT_MINIMUM\n} from '../../plugins/utils';\nimport {\n    MongoDBPreparedQuery,\n    MongoDBStorageInternals,\n    MongoQuerySelector,\n    RxStorageMongoDBInstanceCreationOptions,\n    RxStorageMongoDBSettings\n} from './mongodb-types';\nimport { RxStorageMongoDB } from './rx-storage-mongodb';\nimport {\n    Db as MongoDatabase,\n    Collection as MongoCollection,\n    MongoClient,\n    ObjectId,\n    ClientSession\n} from 'mongodb';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\nimport {\n    MONGO_ID_SUBSTITUTE_FIELDNAME,\n    getMongoDBIndexName,\n    swapMongoToRxDoc,\n    swapRxDocToMongo\n} from './mongodb-helper';\n\nexport class RxStorageInstanceMongoDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MongoDBStorageInternals,\n    RxStorageMongoDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public readonly inMongoPrimaryPath: string;\n    public closed = false;\n    private readonly changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly mongoClient: MongoClient;\n    public readonly mongoDatabase: MongoDatabase;\n    public readonly mongoCollectionPromise: Promise<MongoCollection<RxDocumentData<RxDocType> | any>>;\n    // public mongoChangeStream?: MongoChangeStream<any, ChangeStreamDocument<any>>;\n\n\n    /**\n     * Closing the connection must not happen when\n     * an operation is running, otherwise we get an error.\n     * So we store all running operations here so that\n     * they can be awaited.\n     */\n    public readonly runningOperations = new BehaviorSubject(0);\n    public readonly runningWrites = new BehaviorSubject(0);\n\n    /**\n     * We use this to be able to still fetch\n     * the objectId after transforming the document from mongo-style (with _id)\n     * to RxDB\n     */\n    public readonly mongoObjectIdCache = new WeakMap<RxDocumentData<RxDocType>, ObjectId>();\n\n    constructor(\n        public readonly storage: RxStorageMongoDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MongoDBStorageInternals,\n        public readonly options: Readonly<RxStorageMongoDBInstanceCreationOptions>,\n        public readonly settings: RxStorageMongoDBSettings\n    ) {\n        if (this.schema.attachments) {\n            throw new Error('attachments not supported in mongodb storage, make a PR if you need that');\n        }\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        this.inMongoPrimaryPath = this.primaryPath === '_id' ? MONGO_ID_SUBSTITUTE_FIELDNAME : this.primaryPath;\n        this.mongoClient = new MongoClient(storage.databaseSettings.connection);\n        this.mongoDatabase = this.mongoClient.db(databaseName + '-v' + this.schema.version);\n\n        const indexes = (this.schema.indexes ? this.schema.indexes.slice() : []).map(index => {\n            const arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n            return arIndex;\n        });\n        indexes.push([this.inMongoPrimaryPath]);\n\n        this.mongoCollectionPromise = this.mongoDatabase.createCollection(collectionName)\n            .then(async (mongoCollection) => {\n                await mongoCollection.createIndexes(\n                    indexes.map(index => {\n                        const mongoIndex: any = {};\n                        index.forEach(field => mongoIndex[field] = 1);\n                        return { name: getMongoDBIndexName(index), key: mongoIndex };\n                    })\n                );\n\n                /**\n                 * TODO in a setup where multiple servers run node.js\n                 * processes that use the mongodb storage, we should propagate\n                 * events by listening to the mongodb changestream.\n                 * This maybe should be a premium feature.\n                 */\n                // this.mongoChangeStream = mongoCollection.watch(\n                //     undefined, {\n                //     batchSize: 100\n                // }\n                // ).on('change', change => {\n\n\n                //     const eventBulkId = randomCouchString(10);\n                //     const newDocData: RxDocumentData<RxDocType> = (change as any).fullDocument;\n                //     const documentId = newDocData[this.primaryPath] as any;\n\n                //     const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint> = {\n                //         checkpoint: {\n                //             id: newDocData[this.primaryPath] as any,\n                //             lwt: newDocData._meta.lwt\n                //         },\n                //         context: 'mongodb-write',\n                //         id: eventBulkId,\n                //         events: [{\n                //             documentData: newDocData,\n                //             documentId,\n                //             eventId: randomCouchString(10),\n                //             operation: 'INSERT',\n                //             previousDocumentData: undefined,\n                //             startTime: now(),\n                //             endTime: now()\n                //         }]\n                //     };\n\n                //     this.changes$.next(eventBulk);\n                // });\n\n\n                return mongoCollection;\n            });\n\n\n    }\n\n    /**\n     * Bulk writes on the mongodb storage.\n     * Notice that MongoDB does not support cross-document transactions\n     * so we have to do a update-if-previous-is-correct like operations.\n     * (Similar to what RxDB does with the revision system)\n     */\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        await firstValueFrom(this.runningWrites.pipe(filter(c => c === 0)));\n        this.runningWrites.next(this.runningWrites.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        const primaryPath = this.primaryPath;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docIds = documentWrites.map(d => (d.document as any)[primaryPath]);\n        const documentStates = await this.findDocumentsById(\n            docIds,\n            true\n        );\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            primaryPath as any,\n            documentStates,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        /**\n         * Reset the event bulk because\n         * conflicts can still appear after the categorization\n         */\n        const eventBulk = categorized.eventBulk;\n        eventBulk.events = [];\n\n        await Promise.all([\n            /**\n             * Inserts\n             * @link https://sparkbyexamples.com/mongodb/mongodb-insert-if-not-exists/\n             */\n            Promise.all(\n                categorized.bulkInsertDocs.map(async (writeRow) => {\n                    const docId: string = writeRow.document[primaryPath] as any;\n                    const writeResult = await mongoCollection.findOneAndUpdate(\n                        {\n                            [this.inMongoPrimaryPath]: docId\n                        },\n                        {\n                            $setOnInsert: swapRxDocToMongo(writeRow.document)\n                        },\n                        {\n                            upsert: true,\n                            includeResultMetadata: true\n                        }\n                    );\n                    if (writeResult.value) {\n                        // had insert conflict\n                        const conflictError: RxStorageWriteErrorConflict<RxDocType> = {\n                            status: 409,\n                            documentId: docId,\n                            writeRow,\n                            documentInDb: swapMongoToRxDoc(writeResult.value),\n                            isError: true\n                        };\n                        ret.error[docId] = conflictError;\n                    } else {\n                        const event = categorized.changeByDocId.get(docId);\n                        if (event) {\n                            eventBulk.events.push(event);\n                        }\n                        ret.success[docId as any] = writeRow.document;\n                    }\n                })\n            ),\n            /**\n             * Updates\n             */\n            Promise.all(\n                categorized.bulkUpdateDocs.map(async (writeRow) => {\n                    const docId = writeRow.document[primaryPath] as string;\n                    const writeResult = await mongoCollection.findOneAndReplace(\n                        {\n                            [this.inMongoPrimaryPath]: docId,\n                            _rev: ensureNotFalsy(writeRow.previous)._rev\n                        },\n                        swapRxDocToMongo(writeRow.document),\n                        {\n                            includeResultMetadata: true,\n                            upsert: false\n                        }\n                    );\n                    if (!writeResult.value) {\n                        const currentDocState = await this.findDocumentsById([docId], true);\n                        const currentDoc = getFromObjectOrThrow(currentDocState, docId);\n                        // had insert conflict\n                        const conflictError: RxStorageWriteErrorConflict<RxDocType> = {\n                            status: 409,\n                            documentId: docId,\n                            writeRow,\n                            documentInDb: currentDoc,\n                            isError: true\n                        };\n                        ret.error[docId] = conflictError;\n                    } else {\n                        const event = getFromMapOrThrow(categorized.changeByDocId, docId);\n                        eventBulk.events.push(event);\n                        ret.success[docId as any] = writeRow.document;\n                    }\n\n                })\n            )\n        ]);\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        this.runningWrites.next(this.runningWrites.getValue() - 1);\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return ret;\n    }\n\n    async findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean,\n        session?: ClientSession\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const primaryPath = this.primaryPath;\n\n        const plainQuery: MongoQuerySelector<any> = {\n            [primaryPath]: {\n                $in: docIds\n            }\n        };\n        if (!withDeleted) {\n            plainQuery._deleted = false;\n        }\n        const result: ById<RxDocumentData<RxDocType>> = {};\n        const queryResult = await mongoCollection.find(\n            plainQuery,\n            {\n                session\n            }\n        ).toArray();\n        queryResult.forEach(row => {\n            result[(row as any)[primaryPath]] = swapMongoToRxDoc(\n                row as any\n            );\n        });\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return result;\n    }\n\n    async query(\n        preparedQuery: MongoDBPreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n\n        let query = mongoCollection.find(preparedQuery.mongoSelector);\n        if (preparedQuery.query.skip) {\n            query = query.skip(preparedQuery.query.skip);\n        }\n        if (preparedQuery.query.limit) {\n            query = query.limit(preparedQuery.query.limit);\n        }\n        if (preparedQuery.query.sort) {\n            query = query.sort(preparedQuery.mongoSort);\n        }\n        const resultDocs = await query.toArray();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            documents: resultDocs.map(d => swapMongoToRxDoc(d))\n        };\n    }\n\n    async count(\n        preparedQuery: MongoDBPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const count = await mongoCollection.countDocuments(preparedQuery.mongoSelector);\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            count,\n            mode: 'fast'\n        };\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const plainQuery = {\n            $or: [\n                {\n                    '_meta.lwt': {\n                        $gt: sinceLwt\n                    }\n                },\n                {\n                    '_meta.lwt': {\n                        $eq: sinceLwt\n                    },\n                    [this.inMongoPrimaryPath]: {\n                        $gt: checkpoint ? checkpoint.id : ''\n                    }\n                }\n            ]\n        };\n        const query = mongoCollection.find(plainQuery)\n            .sort({\n                '_meta.lwt': 1,\n                [this.inMongoPrimaryPath]: 1\n            })\n            .limit(limit);\n        const documents = await query.toArray();\n        const lastDoc = lastOfArray(documents);\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            documents: documents.map(d => swapMongoToRxDoc(d)),\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath],\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        await mongoCollection.deleteMany({\n            _deleted: true,\n            '_meta.lwt': {\n                $lt: maxDeletionTime\n            }\n        });\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return true;\n    }\n\n    async getAttachmentData(\n        _documentId: string,\n        _attachmentId: string,\n        _digest: string\n    ): Promise<string> {\n        await this.mongoCollectionPromise;\n        throw new Error('attachments not implemented, make a PR');\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$;\n    }\n\n    async remove(): Promise<void> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        await mongoCollection.drop();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        await this.close();\n    }\n\n    async close(): Promise<void> {\n        // TODO without this next-tick we have random fails in the tests\n        await requestIdlePromise(200);\n\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        await this.mongoCollectionPromise;\n        await firstValueFrom(this.runningOperations.pipe(filter(c => c === 0)));\n        // await ensureNotFalsy(this.mongoChangeStream).close();\n        await this.mongoClient.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n}\n\nexport function createMongoDBStorageInstance<RxDocType>(\n    storage: RxStorageMongoDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMongoDBInstanceCreationOptions>,\n    settings: RxStorageMongoDBSettings\n): Promise<RxStorageInstanceMongoDB<RxDocType>> {\n    const instance = new RxStorageInstanceMongoDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        {},\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}