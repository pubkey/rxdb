{"version":3,"file":"rx-storage-mongodb.js","names":["_rxStorageHelper","require","_rxSchemaHelper","_mongodbHelper","_rxStorageInstanceMongodb","RxStorageMongoDBStatics","exports","prepareQuery","schema","mutateableQuery","primaryKey","getPrimaryFieldOfPrimaryKey","preparedQuery","query","mongoSelector","primarySwapMongoDBQuerySelector","selector","mongoSort","swapToMongoSort","sort","checkpointSchema","DEFAULT_CHECKPOINT_SCHEMA","RxStorageMongoDB","databaseSettings","name","RX_STORAGE_NAME_MONGODB","statics","_proto","prototype","createStorageInstance","params","ensureRxStorageInstanceParamsAreCorrect","createMongoDBStorageInstance","getRxStorageMongoDB","storage"],"sources":["../../../../src/plugins/storage-mongodb/rx-storage-mongodb.ts"],"sourcesContent":["import type {\n    FilledMangoQuery,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageStatics\n} from '../../types';\n\nimport { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper';\nimport { DEFAULT_CHECKPOINT_SCHEMA, getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { RX_STORAGE_NAME_MONGODB, primarySwapMongoDBQuerySelector, swapToMongoSort } from './mongodb-helper';\nimport type { MongoDBDatabaseSettings, MongoDBPreparedQuery, MongoDBSettings, MongoDBStorageInternals } from './mongodb-types';\nimport { RxStorageInstanceMongoDB, createMongoDBStorageInstance } from './rx-storage-instance-mongodb';\n\nexport const RxStorageMongoDBStatics: RxStorageStatics = {\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: FilledMangoQuery<RxDocType>\n    ) {\n        const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as any;\n        const preparedQuery: MongoDBPreparedQuery<RxDocType> = {\n            query: mutateableQuery,\n            mongoSelector: primarySwapMongoDBQuerySelector(\n                primaryKey,\n                mutateableQuery.selector\n            ),\n            mongoSort: swapToMongoSort(mutateableQuery.sort)\n        };\n        return preparedQuery;\n    },\n    checkpointSchema: DEFAULT_CHECKPOINT_SCHEMA\n};\n\nexport class RxStorageMongoDB implements RxStorage<MongoDBStorageInternals, MongoDBSettings> {\n    public name = RX_STORAGE_NAME_MONGODB;\n    public statics = RxStorageMongoDBStatics;\n\n    constructor(\n        public databaseSettings: MongoDBDatabaseSettings\n    ) { }\n\n    public createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, MongoDBSettings>\n    ): Promise<RxStorageInstanceMongoDB<RxDocType>> {\n        ensureRxStorageInstanceParamsAreCorrect(params);\n        return createMongoDBStorageInstance(this, params, this.databaseSettings);\n    }\n}\n\nexport function getRxStorageMongoDB(\n    databaseSettings: MongoDBDatabaseSettings\n): RxStorageMongoDB {\n    const storage = new RxStorageMongoDB(databaseSettings);\n    return storage;\n}\n"],"mappings":";;;;;;;AASA,IAAAA,gBAAA,GAAAC,OAAA;AACA,IAAAC,eAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAF,OAAA;AAEA,IAAAG,yBAAA,GAAAH,OAAA;AAEO,IAAMI,uBAAyC,GAAAC,OAAA,CAAAD,uBAAA,GAAG;EACrDE,YAAYA,CACRC,MAA+C,EAC/CC,eAA4C,EAC9C;IACE,IAAMC,UAAU,GAAG,IAAAC,2CAA2B,EAACH,MAAM,CAACE,UAAU,CAAQ;IACxE,IAAME,aAA8C,GAAG;MACnDC,KAAK,EAAEJ,eAAe;MACtBK,aAAa,EAAE,IAAAC,8CAA+B,EAC1CL,UAAU,EACVD,eAAe,CAACO,QACpB,CAAC;MACDC,SAAS,EAAE,IAAAC,8BAAe,EAACT,eAAe,CAACU,IAAI;IACnD,CAAC;IACD,OAAOP,aAAa;EACxB,CAAC;EACDQ,gBAAgB,EAAEC;AACtB,CAAC;AAAC,IAEWC,gBAAgB,GAAAhB,OAAA,CAAAgB,gBAAA;EAIzB,SAAAA,iBACWC,gBAAyC,EAClD;IAAA,KALKC,IAAI,GAAGC,sCAAuB;IAAA,KAC9BC,OAAO,GAAGrB,uBAAuB;IAAA,KAG7BkB,gBAAyC,GAAzCA,gBAAyC;EAChD;EAAC,IAAAI,MAAA,GAAAL,gBAAA,CAAAM,SAAA;EAAAD,MAAA,CAEEE,qBAAqB,GAA5B,SAAAA,sBACIC,MAAmE,EACvB;IAC5C,IAAAC,wDAAuC,EAACD,MAAM,CAAC;IAC/C,OAAO,IAAAE,sDAA4B,EAAC,IAAI,EAAEF,MAAM,EAAE,IAAI,CAACP,gBAAgB,CAAC;EAC5E,CAAC;EAAA,OAAAD,gBAAA;AAAA;AAGE,SAASW,mBAAmBA,CAC/BV,gBAAyC,EACzB;EAChB,IAAMW,OAAO,GAAG,IAAIZ,gBAAgB,CAACC,gBAAgB,CAAC;EACtD,OAAOW,OAAO;AAClB"}