{"version":3,"file":"index.js","names":["_utils","require","_firestore","_leaderElection","_replication","_","_rxjs","_firestoreHelper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_firestoreTypes","RxFirestoreReplicationState","_RxReplicationState","_inheritsLoose2","default","firestore","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","_this","RxReplicationState","replicateFirestore","options","addRxPlugin","RxDBLeaderElectionPlugin","pullStream$","Subject","replicationPrimitivesPull","waitForLeadership","serverTimestampField","primaryPath","schema","schemaPart","getSchemaByObjectPath","jsonSchema","includes","newRxError","field","pullFilters","filter","undefined","toArray","pullQuery","query","handler","lastPulledCheckpoint","batchSize","newerQuery","sameTimeQuery","lastServerTimestamp","isoStringToServerTimestamp","serverTimestamp","where","orderBy","limit","id","mustsReRun","useDocs","waitForPendingWrites","database","runTransaction","_tx","newerQueryResult","sameTimeQueryResult","Promise","all","getDocs","metadata","hasPendingWrites","ensureNotFalsy","docs","missingAmount","length","additionalDocs","slice","x","appendToArray","checkpoint","documents","lastDoc","lastOfArray","map","row","firestoreRowToDocData","newCheckpoint","serverTimestampToIsoString","data","ret","modifier","stream$","asObservable","replicationPrimitivesPush","pushFilter","rows","asyncFilter","newDocumentState","writeRowsById","docIds","docId","conflicts","getQuery","ids","documentId","docsInDbResult","getContentByIds","docsInDbById","docDataInDb","stripServerTimestampField","batch","writeBatch","hasWrite","entries","writeRow","docInDb","assumedMasterState","conflictHandler","realMasterState","isEqual","docRef","doc","writeDocData","flatClone","set","stripPrimaryKey","update","commit","replicationState","FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX","hashFunction","projectId","startBefore","start","bind","cancelBefore","cancel","lastChangeQuery","unsubscribe","onSnapshot","_querySnapshot","reSync","error","subjects","next","errorToPlainJson","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-firestore/index.ts"],"sourcesContent":["import {\n    appendToArray,\n    asyncFilter,\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    lastOfArray,\n    toArray\n} from '../../plugins/utils';\n\nimport {\n    doc,\n    query,\n    where,\n    orderBy,\n    limit,\n    getDocs,\n    onSnapshot,\n    runTransaction,\n    writeBatch,\n    serverTimestamp,\n    QueryDocumentSnapshot,\n    waitForPendingWrites,\n    documentId\n} from 'firebase/firestore';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    ById,\n    getSchemaByObjectPath,\n    newRxError,\n    WithDeleted\n} from '../../';\n\nimport type {\n    FirestoreCheckpointType,\n    FirestoreOptions,\n    SyncOptionsFirestore\n} from './firestore-types';\nimport { Subject } from 'rxjs';\nimport {\n    firestoreRowToDocData,\n    FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX,\n    getContentByIds,\n    isoStringToServerTimestamp,\n    serverTimestampToIsoString,\n    stripPrimaryKey,\n    stripServerTimestampField\n} from './firestore-helper';\n\nexport * from './firestore-helper';\nexport * from './firestore-types';\n\nexport class RxFirestoreReplicationState<RxDocType> extends RxReplicationState<RxDocType, FirestoreCheckpointType> {\n    constructor(\n        public readonly firestore: FirestoreOptions<RxDocType>,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateFirestore<RxDocType>(\n    options: SyncOptionsFirestore<RxDocType>\n): RxFirestoreReplicationState<RxDocType> {\n    const collection = options.collection;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, FirestoreCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined;\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;\n    options.serverTimestampField = serverTimestampField;\n    const primaryPath = collection.schema.primaryPath;\n\n    /**\n     * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.\n     */\n    const schemaPart = getSchemaByObjectPath(collection.schema.jsonSchema, serverTimestampField);\n    if (\n        schemaPart ||\n        // also must not be nested.\n        serverTimestampField.includes('.')\n    ) {\n        throw newRxError('RC6', {\n            field: serverTimestampField,\n            schema: collection.schema.jsonSchema\n        });\n    }\n\n    const pullFilters = options.pull?.filter !== undefined\n        ? toArray(options.pull.filter)\n        : [];\n\n    const pullQuery = query(options.firestore.collection, ...pullFilters);\n\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: FirestoreCheckpointType,\n                batchSize: number\n            ) {\n                let newerQuery: ReturnType<typeof query>;\n                let sameTimeQuery: ReturnType<typeof query> | undefined;\n\n                if (lastPulledCheckpoint) {\n                    const lastServerTimestamp = isoStringToServerTimestamp(lastPulledCheckpoint.serverTimestamp);\n                    newerQuery = query(pullQuery,\n                        where(serverTimestampField, '>', lastServerTimestamp),\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                    sameTimeQuery = query(pullQuery,\n                        where(serverTimestampField, '==', lastServerTimestamp),\n                        where(primaryPath, '>', lastPulledCheckpoint.id),\n                        orderBy(primaryPath, 'asc'),\n                        limit(batchSize)\n                    );\n                } else {\n                    newerQuery = query(pullQuery,\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                }\n\n                let mustsReRun = true;\n                let useDocs: QueryDocumentSnapshot<RxDocType>[] = [];\n                while (mustsReRun) {\n                    /**\n                     * Local writes that have not been persisted to the server\n                     * are in pending state and do not have a correct serverTimestamp set.\n                     * We have to ensure we only use document states that are in sync with the server.\n                     * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b\n                     */\n                    await waitForPendingWrites(options.firestore.database);\n                    await runTransaction(options.firestore.database, async (_tx) => {\n                        useDocs = [];\n                        const [\n                            newerQueryResult,\n                            sameTimeQueryResult\n                        ] = await Promise.all([\n                            getDocs(newerQuery),\n                            sameTimeQuery ? getDocs(sameTimeQuery) : undefined\n                        ]);\n\n                        if (\n                            newerQueryResult.metadata.hasPendingWrites ||\n                            (sameTimeQuery && ensureNotFalsy(sameTimeQueryResult).metadata.hasPendingWrites)\n                        ) {\n                            return;\n                        } else {\n                            mustsReRun = false;\n\n                            if (sameTimeQuery) {\n                                useDocs = ensureNotFalsy(sameTimeQueryResult).docs as any;\n                            }\n                            const missingAmount = batchSize - useDocs.length;\n                            if (missingAmount > 0) {\n                                const additionalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);\n                                appendToArray(useDocs, additionalDocs);\n                            }\n                        }\n                    });\n                }\n\n                if (useDocs.length === 0) {\n                    return {\n                        checkpoint: lastPulledCheckpoint,\n                        documents: []\n                    };\n                }\n                const lastDoc = ensureNotFalsy(lastOfArray(useDocs));\n                const documents: WithDeleted<RxDocType>[] = useDocs\n                    .map(row => firestoreRowToDocData(\n                        serverTimestampField,\n                        primaryPath,\n                        row\n                    ));\n                const newCheckpoint: FirestoreCheckpointType = {\n                    id: lastDoc.id,\n                    serverTimestamp: serverTimestampToIsoString(serverTimestampField, lastDoc.data())\n                };\n                const ret = {\n                    documents: documents,\n                    checkpoint: newCheckpoint\n                };\n                return ret;\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        const pushFilter = options.push?.filter;\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                if (pushFilter !== undefined) {\n                    rows = await asyncFilter(rows, (row) => pushFilter(row.newDocumentState));\n                }\n\n                const writeRowsById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n                const docIds: string[] = rows.map(row => {\n                    const docId = (row.newDocumentState as any)[primaryPath];\n                    writeRowsById[docId] = row;\n                    return docId;\n                });\n                await waitForPendingWrites(options.firestore.database);\n                let conflicts: WithDeleted<RxDocType>[] = [];\n\n                /**\n                 * Everything must run INSIDE of the transaction\n                 * because on tx-errors, firebase will re-run the transaction on some cases.\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions\n                 */\n                await runTransaction(options.firestore.database, async (_tx) => {\n                    conflicts = []; // reset in case the tx has re-run.\n                    /**\n                     * @link https://stackoverflow.com/a/48423626/3443137\n                     */\n\n                    const getQuery = (ids: string[]) => {\n                        return getDocs(\n                            query(\n                                options.firestore.collection,\n                                where(documentId(), 'in', ids)\n                            )\n                        );\n                    };\n\n                    const docsInDbResult = await getContentByIds<RxDocType>(docIds, getQuery);\n\n                    const docsInDbById: ById<RxDocType> = {};\n                    docsInDbResult.forEach(row => {\n                        const docDataInDb = stripServerTimestampField(serverTimestampField, row.data());\n                        const docId = row.id;\n                        (docDataInDb as any)[primaryPath] = docId;\n                        docsInDbById[docId] = docDataInDb;\n                    });\n\n                    /**\n                     * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\n                     */\n                    const batch = writeBatch(options.firestore.database);\n                    let hasWrite = false;\n                    await Promise.all(\n                        Object.entries(writeRowsById).map(async ([docId, writeRow]) => {\n                            const docInDb: RxDocType | undefined = docsInDbById[docId];\n\n                            if (\n                                docInDb &&\n                                (\n                                    !writeRow.assumedMasterState ||\n                                    (await collection.conflictHandler({\n                                        newDocumentState: docInDb as any,\n                                        realMasterState: writeRow.assumedMasterState\n                                    }, 'replication-firestore-push')).isEqual === false\n                                )\n                            ) {\n                                // conflict\n                                conflicts.push(docInDb as any);\n                            } else {\n                                // no conflict\n                                hasWrite = true;\n                                const docRef = doc(options.firestore.collection, docId);\n                                const writeDocData = flatClone(writeRow.newDocumentState);\n                                (writeDocData as any)[serverTimestampField] = serverTimestamp();\n                                if (!docInDb) {\n                                    // insert\n                                    batch.set(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                } else {\n                                    // update\n                                    batch.update(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                }\n                            }\n                        })\n                    );\n\n                    if (hasWrite) {\n                        await batch.commit();\n                    }\n                });\n                await waitForPendingWrites(options.firestore.database);\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n\n    const replicationState = new RxFirestoreReplicationState<RxDocType>(\n        options.firestore,\n        FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX + options.collection.database.hashFunction(options.firestore.projectId),\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const lastChangeQuery = query(\n                pullQuery,\n                orderBy(serverTimestampField, 'desc'),\n                limit(1)\n            );\n            const unsubscribe = onSnapshot(\n                lastChangeQuery,\n                (_querySnapshot) => {\n                    /**\n                     * There is no good way to observe the event stream in firestore.\n                     * So instead we listen to any write to the collection\n                     * and then emit a 'RESYNC' flag.\n                     */\n                    replicationState.reSync();\n                },\n                (error) => {\n                    replicationState.subjects.error.next(\n                        newRxError('RC_STREAM', { error: errorToPlainJson(error) })\n                    );\n                }\n            );\n            replicationState.cancel = () => {\n                unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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"}