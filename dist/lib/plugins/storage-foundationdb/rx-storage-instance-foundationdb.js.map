{"version":3,"file":"rx-storage-instance-foundationdb.js","names":["_rxjs","require","_rxSchemaHelper","_rxStorageHelper","_foundationdbHelpers","_customIndex","_utils","_foundationdbQuery","_queryPlanner","_storageMemory","RxStorageInstanceFoundationDB","exports","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","dbs","dbsPromise","ret","success","error","writeBatches","batchArray","FOUNDATION_DB_WRITE_BATCH_SIZE","Promise","all","map","writeBatch","categorized","root","doTransaction","tx","ids","row","document","mainTx","at","main","subspace","attachmentTx","attachments","docsInDB","Map","id","doc","get","set","categorizeBulkWriteRows","Object","keys","errors","forEach","errorKey","ensureNotFalsy","bulkInsertDocs","writeRow","docId","values","indexes","indexMeta","indexString","getIndexableString","indexTx","db","bulkUpdateDocs","oldIndexString","previous","newIndexString","delete","attachmentsAdd","attachment","attachmentMapKey","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","eventBulk","events","length","lastState","newestRow","checkpoint","lwt","_meta","next","findDocumentsById","withDeleted","docInDb","_deleted","query","preparedQuery","queryFoundationDB","count","result","documents","mode","getAttachmentData","_digest","data","getChangedDocumentsSince","limit","keySelector","StreamingMode","index","indexName","getFoundationDBIndexName","lowerBoundString","checkpointPartialDoc","innerResult","range","getRangeAll","firstGreaterThan","INDEX_MAX","streamingMode","Exact","docIds","docsData","appendToArray","lastDoc","lastOfArray","changeStream","asObservable","remove","clearRange","PROMISE_RESOLVE_VOID","close","cleanup","minimumDeletedTime","maxDeletionTime","now","CLEANUP_INDEX","getStartIndexStringFromLowerBound","upperBoundString","getStartIndexStringFromUpperBound","noMoreUndeleted","batchSize","pop","indexMetaInner","subIndexDB","docData","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","reject","Error","complete","createFoundationDBStorageInstance","params","open","directory","encoders","connection","clusterFile","dir","createOrOpen","version","withKeyEncoding","string","withValueEncoding","json","indexDBs","useIndexes","slice","push","useIndexesFinal","indexAr","toArray","unshift","indexDB","getIndexableStringMonad","instance","resolve"],"sources":["../../../../src/plugins/storage-foundationdb/rx-storage-instance-foundationdb.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport type {\n    FoundationDBDatabase,\n    FoundationDBIndexMeta,\n    FoundationDBPreparedQuery,\n    FoundationDBStorageInternals,\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types';\n// import {\n//     open as foundationDBOpen,\n//     directory as foundationDBDirectory,\n//     encoders as foundationDBEncoders,\n//     keySelector as foundationDBKeySelector,\n//     StreamingMode as foundationDBStreamingMode\n// } from 'foundationdb';\nimport {\n    categorizeBulkWriteRows\n} from '../../rx-storage-helper';\nimport {\n\n    CLEANUP_INDEX,\n    FOUNDATION_DB_WRITE_BATCH_SIZE,\n    getFoundationDBIndexName\n} from './foundationdb-helpers';\nimport {\n    getIndexableStringMonad,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport {\n    appendToArray,\n    batchArray,\n    ensureNotFalsy,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_VOID,\n    toArray\n} from '../../plugins/utils';\nimport { queryFoundationDB } from './foundationdb-query';\nimport { INDEX_MAX } from '../../query-planner';\nimport { attachmentMapKey } from '../storage-memory';\n\nexport class RxStorageInstanceFoundationDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    FoundationDBStorageInternals<RxDocType>,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed = false;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageFoundationDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: FoundationDBStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageFoundationDBInstanceCreationOptions>,\n        public readonly settings: RxStorageFoundationDBSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        /**\n         * Doing too many write in a single transaction\n         * will throw with a 'Transaction exceeds byte limit'\n         * so we have to batch up the writes.\n         */\n        const writeBatches = batchArray(documentWrites, FOUNDATION_DB_WRITE_BATCH_SIZE);\n        await Promise.all(\n            writeBatches.map(async (writeBatch) => {\n                let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n                await dbs.root.doTransaction(async (tx: any) => {\n                    const ids = writeBatch.map(row => (row.document as any)[this.primaryPath]);\n                    const mainTx = tx.at(dbs.main.subspace);\n                    const attachmentTx = tx.at(dbs.attachments.subspace);\n                    const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n                    /**\n                     * TODO this might be faster if fdb\n                     * any time adds a bulk-fetch-by-key method.\n                     */\n                    await Promise.all(\n                        ids.map(async (id) => {\n                            const doc = await mainTx.get(id);\n                            docsInDB.set(id, doc);\n                        })\n                    );\n\n\n                    categorized = categorizeBulkWriteRows<RxDocType>(\n                        this,\n                        this.primaryPath as any,\n                        docsInDB,\n                        writeBatch,\n                        context\n                    );\n\n                    Object.keys(categorized.errors).forEach(errorKey => {\n                        ret.error[errorKey] = ensureNotFalsy(categorized).errors[errorKey];\n                    });\n\n                    // INSERTS\n                    categorized.bulkInsertDocs.forEach(writeRow => {\n                        const docId: string = writeRow.document[this.primaryPath] as any;\n                        ret.success[docId] = writeRow.document as any;\n\n                        // insert document data\n                        mainTx.set(docId, writeRow.document);\n\n                        // insert secondary indexes\n                        Object.values(dbs.indexes).forEach(indexMeta => {\n                            const indexString = indexMeta.getIndexableString(writeRow.document as any);\n                            const indexTx = tx.at(indexMeta.db.subspace);\n                            indexTx.set(indexString, docId);\n                        });\n                    });\n                    // UPDATES\n                    categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                        const docId: string = writeRow.document[this.primaryPath] as any;\n\n                        // overwrite document data\n                        mainTx.set(docId, writeRow.document);\n\n                        // update secondary indexes\n                        Object.values(dbs.indexes).forEach(indexMeta => {\n                            const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                            const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\n                            if (oldIndexString !== newIndexString) {\n                                const indexTx = tx.at(indexMeta.db.subspace);\n                                indexTx.delete(oldIndexString);\n                                indexTx.set(newIndexString, docId);\n                            }\n                        });\n                        ret.success[docId] = writeRow.document as any;\n                    });\n\n                    // attachments\n                    categorized.attachmentsAdd.forEach(attachment => {\n                        attachmentTx.set(\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                            attachment.attachmentData\n                        );\n                    });\n                    categorized.attachmentsUpdate.forEach(attachment => {\n                        attachmentTx.set(\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                            attachment.attachmentData\n                        );\n                    });\n                    categorized.attachmentsRemove.forEach(attachment => {\n                        attachmentTx.delete(\n                            attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                        );\n                    });\n                });\n                categorized = ensureNotFalsy(categorized);\n                /**\n                 * The events must be emitted AFTER the transaction\n                 * has finished.\n                 * Otherwise an observable changestream might cause a read\n                 * to a document that does not already exist outside of the transaction.\n                 */\n                if (categorized.eventBulk.events.length > 0) {\n                    const lastState = ensureNotFalsy(categorized.newestRow).document;\n                    categorized.eventBulk.checkpoint = {\n                        id: lastState[this.primaryPath],\n                        lwt: lastState._meta.lwt\n                    };\n                    this.changes$.next(categorized.eventBulk);\n                }\n            })\n        );\n\n\n        return ret;\n    }\n\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        return dbs.main.doTransaction(async (tx: any) => {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            await Promise.all(\n                ids.map(async (docId) => {\n                    const docInDb = await tx.get(docId);\n                    if (\n                        docInDb &&\n                        (\n                            !docInDb._deleted ||\n                            withDeleted\n                        )\n                    ) {\n                        ret[docId] = docInDb;\n                    }\n                })\n            );\n            return ret;\n        });\n    }\n    query(preparedQuery: FoundationDBPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryFoundationDB(this, preparedQuery);\n    }\n    async count(\n        preparedQuery: FoundationDBPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2022), FoundationDB does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/apple/foundationdb/issues/5981\n         */\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    async getAttachmentData(documentId: string, attachmentId: string, _digest: string): Promise<string> {\n        const dbs = await this.internals.dbsPromise;\n        const attachment = await dbs.attachments.get(attachmentMapKey(documentId, attachmentId));\n        return attachment.data;\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const dbs = await this.internals.dbsPromise;\n        const index = [\n            '_meta.lwt',\n            this.primaryPath as any\n        ];\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        let lowerBoundString = '';\n        if (checkpoint) {\n            const checkpointPartialDoc: any = {\n                [this.primaryPath]: checkpoint.id,\n                _meta: {\n                    lwt: checkpoint.lwt\n                }\n            };\n            lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n        }\n        const result: RxDocumentData<RxDocType>[] = await dbs.root.doTransaction(async (tx: any) => {\n            const innerResult: RxDocumentData<RxDocType>[] = [];\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                INDEX_MAX,\n                {\n                    limit,\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(\n                docIds.map((docId: string) => mainTx.get(docId))\n            );\n            appendToArray(innerResult, docsData);\n            return innerResult;\n        });\n        const lastDoc = lastOfArray(result);\n        return {\n            documents: result,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        const dbs = await this.internals.dbsPromise;\n        await dbs.root.doTransaction((tx: any) => {\n            tx.clearRange('', INDEX_MAX);\n            return PROMISE_RESOLVE_VOID;\n        });\n        return this.close();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const dbs = await this.internals.dbsPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ],\n            false\n        );\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ],\n            true\n        );\n        let noMoreUndeleted: boolean = true;\n        await dbs.root.doTransaction(async (tx: any) => {\n            const batchSize = ensureNotFalsy(this.settings.batchSize);\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                upperBoundString,\n                {\n                    limit: batchSize + 1, // get one more extra to detect what to return from cleanup()\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            if (range.length > batchSize) {\n                noMoreUndeleted = false;\n                range.pop();\n            }\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n\n            Object\n                .values(dbs.indexes)\n                .forEach(indexMetaInner => {\n                    const subIndexDB = tx.at(indexMetaInner.db.subspace);\n                    docsData.forEach(docData => {\n                        const indexString = indexMetaInner.getIndexableString(docData);\n                        subIndexDB.delete(indexString);\n                    });\n                });\n            docIds.forEach((id: string) => mainTx.delete(id));\n        });\n\n        return noMoreUndeleted;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async close() {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        const dbs = await this.internals.dbsPromise;\n        dbs.root.close();\n\n        // TODO shouldn't we close the index databases?\n        // Object.values(dbs.indexes).forEach(db => db.close());\n    }\n}\n\n\nexport function createFoundationDBStorageInstance<RxDocType>(\n    storage: RxStorageFoundationDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>,\n    settings: RxStorageFoundationDBSettings\n): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const {\n        open,\n        directory,\n        encoders\n    } = require('foundationdb');\n\n    const connection = open(settings.clusterFile);\n    const dbsPromise = (async () => {\n        const dir = await directory.createOrOpen(connection, 'rxdb');\n\n        const root = connection\n            .at(dir)\n            .at(params.databaseName + '.')\n            .at(params.collectionName + '.')\n            .at(params.schema.version + '.');\n        const main: FoundationDBDatabase<RxDocType> = root\n            .at('main.')\n            .withKeyEncoding(encoders.string) // automatically encode & decode keys using tuples\n            .withValueEncoding(encoders.json) as any; // and values using JSON\n\n\n        const events: FoundationDBDatabase<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = root\n            .at('events.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n        const attachments: FoundationDBDatabase<RxAttachmentWriteData> = root\n            .at('attachments.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n\n        const indexDBs: { [indexName: string]: FoundationDBIndexMeta<RxDocType>; } = {};\n        const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n        useIndexes.push([primaryPath]);\n        const useIndexesFinal = useIndexes.map(index => {\n            const indexAr = toArray(index);\n            indexAr.unshift('_deleted');\n            return indexAr;\n        });\n        // used for `getChangedDocumentsSince()`\n        useIndexesFinal.push([\n            '_meta.lwt',\n            primaryPath\n        ]);\n        useIndexesFinal.push(CLEANUP_INDEX);\n        useIndexesFinal.forEach(indexAr => {\n            const indexName = getFoundationDBIndexName(indexAr);\n            const indexDB = root.at(indexName + '.')\n                .withKeyEncoding(encoders.string)\n                .withValueEncoding(encoders.string);\n            indexDBs[indexName] = {\n                indexName,\n                db: indexDB,\n                getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n                index: indexAr\n            };\n        });\n\n        return {\n            root,\n            main,\n            events,\n            attachments,\n            indexes: indexDBs\n        };\n    })();\n\n\n    const internals: FoundationDBStorageInternals<RxDocType> = {\n        connection,\n        dbsPromise: dbsPromise\n    };\n\n    const instance = new RxStorageInstanceFoundationDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}