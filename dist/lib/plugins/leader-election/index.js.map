{"version":3,"file":"index.js","names":["_broadcastChannel","require","_rxStorageMultiinstance","_utils","LEADER_ELECTORS_OF_DB","WeakMap","LEADER_ELECTOR_BY_BROADCAST_CHANNEL","getLeaderElectorByBroadcastChannel","broadcastChannel","getFromMapOrCreate","createLeaderElection","getForDatabase","getBroadcastChannelReference","token","name","oldDestroy","destroy","bind","removeBroadcastChannelReference","elector","set","leaderElector","isLeader","multiInstance","waitForLeadership","PROMISE_RESOLVE_TRUE","awaitLeadership","then","onDestroy","db","has","get","die","rxdb","exports","prototypes","RxDatabase","proto","RxDBLeaderElectionPlugin","hooks","preDestroyRxDatabase","after"],"sources":["../../../../src/plugins/leader-election/index.ts"],"sourcesContent":["/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\n\nimport {\n    createLeaderElection,\n    LeaderElector,\n    BroadcastChannel\n} from 'broadcast-channel';\nimport {\n    getBroadcastChannelReference,\n    removeBroadcastChannelReference\n} from '../../rx-storage-multiinstance';\n\nimport type {\n    RxDatabase,\n    RxPlugin\n} from '../../types';\nimport { PROMISE_RESOLVE_TRUE, getFromMapOrCreate } from '../utils';\n\nconst LEADER_ELECTORS_OF_DB: WeakMap<RxDatabase, LeaderElector> = new WeakMap();\nconst LEADER_ELECTOR_BY_BROADCAST_CHANNEL: WeakMap<BroadcastChannel, LeaderElector> = new WeakMap();\n\n\n/**\n * Returns the leader elector of a broadcast channel.\n * Used to ensure we reuse the same elector for the channel each time.\n */\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel: BroadcastChannel): LeaderElector {\n    return getFromMapOrCreate(\n        LEADER_ELECTOR_BY_BROADCAST_CHANNEL,\n        broadcastChannel,\n        () => createLeaderElection(broadcastChannel)\n    );\n}\n\n/**\n * @overwrites RxDatabase().leaderElector for caching\n */\nexport function getForDatabase(this: RxDatabase): LeaderElector {\n\n\n    const broadcastChannel = getBroadcastChannelReference(\n        this.token,\n        this.name,\n        this\n    );\n\n    /**\n     * Clean up the reference on RxDatabase.destroy()\n     */\n    const oldDestroy = this.destroy.bind(this);\n    this.destroy = function () {\n        removeBroadcastChannelReference(this.token, this);\n        return oldDestroy();\n    };\n\n\n    let elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    if (!elector) {\n        elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n        LEADER_ELECTORS_OF_DB.set(\n            this,\n            elector\n        );\n    }\n\n    /**\n     * Overwrite for caching\n     */\n    this.leaderElector = () => elector;\n\n    return elector;\n}\n\nexport function isLeader(this: RxDatabase): boolean {\n    if (!this.multiInstance) {\n        return true;\n    }\n    return this.leaderElector().isLeader;\n}\n\nexport function waitForLeadership(this: RxDatabase): Promise<boolean> {\n    if (!this.multiInstance) {\n        return PROMISE_RESOLVE_TRUE;\n    } else {\n        return this.leaderElector()\n            .awaitLeadership()\n            .then(() => true);\n    }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db: RxDatabase) {\n    const has = LEADER_ELECTORS_OF_DB.get(db);\n    if (has) {\n        has.die();\n    }\n}\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxDatabase: (proto: any) => {\n        proto.leaderElector = getForDatabase;\n        proto.isLeader = isLeader;\n        proto.waitForLeadership = waitForLeadership;\n    }\n};\n\nexport const RxDBLeaderElectionPlugin: RxPlugin = {\n    name: 'leader-election',\n    rxdb,\n    prototypes,\n    hooks: {\n        preDestroyRxDatabase: {\n            after: onDestroy\n        }\n    }\n};\n"],"mappings":";;;;;;;;;;;;AAIA,IAAAA,iBAAA,GAAAC,OAAA;AAKA,IAAAC,uBAAA,GAAAD,OAAA;AASA,IAAAE,MAAA,GAAAF,OAAA;AAlBA;AACA;AACA;;AAkBA,IAAMG,qBAAyD,GAAG,IAAIC,OAAO,CAAC,CAAC;AAC/E,IAAMC,mCAA6E,GAAG,IAAID,OAAO,CAAC,CAAC;;AAGnG;AACA;AACA;AACA;AACO,SAASE,kCAAkCA,CAACC,gBAAkC,EAAiB;EAClG,OAAO,IAAAC,yBAAkB,EACrBH,mCAAmC,EACnCE,gBAAgB,EAChB,MAAM,IAAAE,sCAAoB,EAACF,gBAAgB,CAC/C,CAAC;AACL;;AAEA;AACA;AACA;AACO,SAASG,cAAcA,CAAA,EAAkC;EAG5D,IAAMH,gBAAgB,GAAG,IAAAI,oDAA4B,EACjD,IAAI,CAACC,KAAK,EACV,IAAI,CAACC,IAAI,EACT,IACJ,CAAC;;EAED;AACJ;AACA;EACI,IAAMC,UAAU,GAAG,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1C,IAAI,CAACD,OAAO,GAAG,YAAY;IACvB,IAAAE,uDAA+B,EAAC,IAAI,CAACL,KAAK,EAAE,IAAI,CAAC;IACjD,OAAOE,UAAU,CAAC,CAAC;EACvB,CAAC;EAGD,IAAII,OAAO,GAAGZ,kCAAkC,CAACC,gBAAgB,CAAC;EAClE,IAAI,CAACW,OAAO,EAAE;IACVA,OAAO,GAAGZ,kCAAkC,CAACC,gBAAgB,CAAC;IAC9DJ,qBAAqB,CAACgB,GAAG,CACrB,IAAI,EACJD,OACJ,CAAC;EACL;;EAEA;AACJ;AACA;EACI,IAAI,CAACE,aAAa,GAAG,MAAMF,OAAO;EAElC,OAAOA,OAAO;AAClB;AAEO,SAASG,QAAQA,CAAA,EAA4B;EAChD,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO,IAAI,CAACF,aAAa,CAAC,CAAC,CAACC,QAAQ;AACxC;AAEO,SAASE,iBAAiBA,CAAA,EAAqC;EAClE,IAAI,CAAC,IAAI,CAACD,aAAa,EAAE;IACrB,OAAOE,2BAAoB;EAC/B,CAAC,MAAM;IACH,OAAO,IAAI,CAACJ,aAAa,CAAC,CAAC,CACtBK,eAAe,CAAC,CAAC,CACjBC,IAAI,CAAC,MAAM,IAAI,CAAC;EACzB;AACJ;;AAEA;AACA;AACA;AACO,SAASC,SAASA,CAACC,EAAc,EAAE;EACtC,IAAMC,GAAG,GAAG1B,qBAAqB,CAAC2B,GAAG,CAACF,EAAE,CAAC;EACzC,IAAIC,GAAG,EAAE;IACLA,GAAG,CAACE,GAAG,CAAC,CAAC;EACb;AACJ;AAEO,IAAMC,IAAI,GAAAC,OAAA,CAAAD,IAAA,GAAG,IAAI;AACjB,IAAME,UAAU,GAAAD,OAAA,CAAAC,UAAA,GAAG;EACtBC,UAAU,EAAGC,KAAU,IAAK;IACxBA,KAAK,CAAChB,aAAa,GAAGV,cAAc;IACpC0B,KAAK,CAACf,QAAQ,GAAGA,QAAQ;IACzBe,KAAK,CAACb,iBAAiB,GAAGA,iBAAiB;EAC/C;AACJ,CAAC;AAEM,IAAMc,wBAAkC,GAAAJ,OAAA,CAAAI,wBAAA,GAAG;EAC9CxB,IAAI,EAAE,iBAAiB;EACvBmB,IAAI;EACJE,UAAU;EACVI,KAAK,EAAE;IACHC,oBAAoB,EAAE;MAClBC,KAAK,EAAEb;IACX;EACJ;AACJ,CAAC"}