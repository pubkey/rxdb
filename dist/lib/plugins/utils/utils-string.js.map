{"version":3,"file":"utils-string.js","names":["randomCouchString","length","text","possible","i","charAt","Math","floor","random","RANDOM_STRING","exports","ucfirst","str","f","toUpperCase","substr","trimDots","slice","isFolderPath","name","includes","arrayBufferToString","buf","String","fromCharCode","apply","Uint16Array","stringToArrayBuffer","ArrayBuffer","bufView","strLen","charCodeAt"],"sources":["../../../../src/plugins/utils/utils-string.ts"],"sourcesContent":["/**\n * get a random string which can be used with couchdb\n * @link http://stackoverflow.com/a/1349426/3443137\n */\nexport function randomCouchString(length: number = 10): string {\n    let text = '';\n    const possible = 'abcdefghijklmnopqrstuvwxyz';\n\n    for (let i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    return text;\n}\n\n\n/**\n * A random string that is never inside of any storage\n */\nexport const RANDOM_STRING = 'Fz7SZXPmYJujkzjY1rpXWvlWBqoGAfAX';\n\n/**\n * uppercase first char\n */\nexport function ucfirst(str: string): string {\n    str += '';\n    const f = str.charAt(0)\n        .toUpperCase();\n    return f + str.substr(1);\n}\n\n/**\n * removes trailing and ending dots from the string\n */\nexport function trimDots(str: string): string {\n    // start\n    while (str.charAt(0) === '.') {\n        str = str.substr(1);\n    }\n\n    // end\n    while (str.slice(-1) === '.') {\n        str = str.slice(0, -1);\n    }\n\n    return str;\n}\n\n/**\n * returns true if the given name is likely a folder path\n */\nexport function isFolderPath(name: string) {\n    // do not check, if foldername is given\n    if (\n        name.includes('/') || // unix\n        name.includes('\\\\') // windows\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * @link https://gist.github.com/andreburgaud/6f73fd2d690b629346b8\n */\nexport function arrayBufferToString(buf: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function stringToArrayBuffer(str: string): ArrayBuffer {\n    const buf = new ArrayBuffer(str.length * 2);\n    const bufView = new Uint16Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACO,SAASA,iBAAiBA,CAACC,MAAc,GAAG,EAAE,EAAU;EAC3D,IAAIC,IAAI,GAAG,EAAE;EACb,IAAMC,QAAQ,GAAG,4BAA4B;EAE7C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC7BF,IAAI,IAAIC,QAAQ,CAACE,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,QAAQ,CAACF,MAAM,CAAC,CAAC;EACxE;EAEA,OAAOC,IAAI;AACf;;AAGA;AACA;AACA;AACO,IAAMO,aAAa,GAAAC,OAAA,CAAAD,aAAA,GAAG,kCAAkC;;AAE/D;AACA;AACA;AACO,SAASE,OAAOA,CAACC,GAAW,EAAU;EACzCA,GAAG,IAAI,EAAE;EACT,IAAMC,CAAC,GAAGD,GAAG,CAACP,MAAM,CAAC,CAAC,CAAC,CAClBS,WAAW,CAAC,CAAC;EAClB,OAAOD,CAAC,GAAGD,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC;AAC5B;;AAEA;AACA;AACA;AACO,SAASC,QAAQA,CAACJ,GAAW,EAAU;EAC1C;EACA,OAAOA,GAAG,CAACP,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC1BO,GAAG,GAAGA,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC;EACvB;;EAEA;EACA,OAAOH,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC1BL,GAAG,GAAGA,GAAG,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B;EAEA,OAAOL,GAAG;AACd;;AAEA;AACA;AACA;AACO,SAASM,YAAYA,CAACC,IAAY,EAAE;EACvC;EACA,IACIA,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC;EAAI;EACtBD,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,CAAC;EAAA,EACtB;IACE,OAAO,IAAI;EACf,CAAC,MAAM;IACH,OAAO,KAAK;EAChB;AACJ;;AAGA;AACA;AACA;AACO,SAASC,mBAAmBA,CAACC,GAAgB,EAAU;EAC1D,OAAOC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,IAAIC,WAAW,CAACJ,GAAG,CAAQ,CAAC;AACvE;AAEO,SAASK,mBAAmBA,CAACf,GAAW,EAAe;EAC1D,IAAMU,GAAG,GAAG,IAAIM,WAAW,CAAChB,GAAG,CAACX,MAAM,GAAG,CAAC,CAAC;EAC3C,IAAM4B,OAAO,GAAG,IAAIH,WAAW,CAACJ,GAAG,CAAC;EACpC,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAE0B,MAAM,GAAGlB,GAAG,CAACX,MAAM,EAAEG,CAAC,GAAG0B,MAAM,EAAE1B,CAAC,EAAE,EAAE;IAClDyB,OAAO,CAACzB,CAAC,CAAC,GAAGQ,GAAG,CAACmB,UAAU,CAAC3B,CAAC,CAAC;EAClC;EACA,OAAOkB,GAAG;AACd"}