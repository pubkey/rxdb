{"version":3,"file":"rx-storage-instance-dexie.js","names":["_rxjs","require","_utils","_dexieHelper","_dexieQuery","_rxSchemaHelper","_rxStorageHelper","_rxStorageMultiinstance","_rxError","instanceId","now","RxStorageInstanceDexie","exports","storage","databaseName","collectionName","schema","internals","options","settings","changes$","Subject","closed","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ensureNotClosed","forEach","row","document","_rev","previous","newRxError","args","state","ret","success","error","documentKeys","map","writeRow","categorized","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDbMap","Map","docsInDbWithInternals","getDocsInDb","docWithDexieInternals","doc","fromDexieToStorage","set","categorizeBulkWriteRows","errors","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","bulkInsertDocs","docId","push","bulkUpdateDocs","_deleted","Promise","all","length","bulkPut","d","fromStorageToDexie","PROMISE_RESOLVE_VOID","bulkDelete","ensureNotFalsy","eventBulk","events","lastState","newestRow","checkpoint","id","lwt","_meta","endTime","event","next","findDocumentsById","ids","deleted","docsInDb","bulkGet","idx","documentInDb","query","preparedQuery","dexieQuery","count","queryPlan","selectorSatisfiedByIndex","result","dexieCount","mode","documents","getChangedDocumentsSince","limit","sinceLwt","RX_META_LWT_MINIMUM","sinceId","changedDocsNormal","changedDocsDeleted","table","where","above","changedDocuments","toArray","changedDocs","slice","appendToArray","sortDocumentsByLastWriteTime","lastDoc","lastOfArray","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","toRemove","below","removeIds","getAttachmentData","_documentId","_attachmentId","_digest","Error","complete","closeDexieDb","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","getDexieDbWithTables","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_DEXIE","resolve"],"sources":["../../../../src/plugins/storage-dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray,\n    ensureNotFalsy,\n    appendToArray\n} from '../utils';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    CategorizeBulkWriteRowsOutput,\n    RxStorageCountResult,\n    DefaultPreparedQuery\n} from '../../types';\nimport {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper';\nimport { dexieCount, dexieQuery } from './dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance';\nimport { newRxError } from '../../rx-error';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n\n\n        /**\n         * Check some assumptions to ensure RxDB\n         * does not call the storage with an invalid write.\n         */\n        documentWrites.forEach(row => {\n            // ensure revision is set\n            if (\n                !row.document._rev ||\n                (\n                    row.previous &&\n                    !row.previous._rev\n                )\n            ) {\n                throw newRxError('SNH', { args: { row } });\n            }\n        });\n\n\n\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                const docsInDbMap = new Map<string, RxDocumentData<RxDocType>>();\n                const docsInDbWithInternals = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDbWithInternals.forEach(docWithDexieInternals => {\n                    const doc = docWithDexieInternals ? fromDexieToStorage(docWithDexieInternals) : docWithDexieInternals;\n                    if (doc) {\n                        docsInDbMap.set(doc[this.primaryPath], doc);\n                    }\n                    return doc;\n                });\n\n                categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDbMap,\n                    documentWrites,\n                    context\n                );\n                ret.error = categorized.errors;\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n\n                categorized.bulkInsertDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success[docId] = row.document as any;\n                    bulkPutDocs.push(row.document);\n                });\n                categorized.bulkUpdateDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success[docId] = row.document as any;\n                    if (\n                        row.document._deleted &&\n                        (row.previous && !row.previous._deleted)\n                    ) {\n                        // newly deleted\n                        bulkRemoveDocs.push(docId);\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (\n                        row.document._deleted &&\n                        row.previous && row.previous._deleted\n                    ) {\n                        // deleted was modified but is still deleted\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (!row.document._deleted) {\n                        // non-deleted was changed\n                        bulkPutDocs.push(row.document);\n                    } else {\n                        throw newRxError('SNH', { args: { row } });\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        categorized = ensureNotFalsy(categorized);\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            const endTime = now();\n            categorized.eventBulk.events.forEach(event => (event as any).endTime = endTime);\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentDataById<RxDocType> = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids);\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DefaultPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n    async count(\n        preparedQuery: DefaultPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        if (preparedQuery.queryPlan.selectorSatisfiedByIndex) {\n            const result = await dexieCount(this, preparedQuery);\n            return {\n                count: result,\n                mode: 'fast'\n            };\n        } else {\n            const result = await dexieQuery(this, preparedQuery);\n            return {\n                count: result.documents.length,\n                mode: 'slow'\n            };\n        }\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.slice(0);\n        appendToArray(changedDocs, changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string, _digest: string): Promise<string> {\n        ensureNotClosed(this);\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    close(): Promise<void> {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}