{"version":3,"file":"attachments.js","names":["preMigrateDocument","data","attachments","docData","_attachments","newAttachments","Promise","all","Object","keys","map","attachmentId","attachment","docPrimary","oldCollection","schema","primaryPath","storageInstance","getAttachmentData","rawAttachmentData","digest","length","type","putAttachment","attachmentData","skipIfSame","ensureSchemaSupportsAttachments","dataSize","blobBufferUtil","size","toBase64String","dataString","id","hashAttachmentData","then","hash","newDigest","_atomicQueue","_data","currentMeta","getAttachment","docWriteData","flatCloneDocWithMeta","flatClone","writeRow","previous","document","writeSingle","collection","writeResult","fromStorageInstanceResult","newData","_rev","_dataSync$","next","attachmentBase64String","binary","b64DecodeUnicode","err","console","log","pouchHash","getAttachmentSize","atob","doc","schemaJson","jsonSchema","newRxError","link","_assignMethodsToAttachment","entries","forEach","funName","fun","defineProperty","get","bind","RxAttachment","remove","getData","primary","plainDataBase64","createBlobBufferFromBase64","getStringData","toString","rxDocument","getValue","allAttachments","postMigrateDocument","_action","PROMISE_RESOLVE_VOID","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","pipe","attachmentsData","overwritable","hooks","after"],"sources":["../../../src/plugins/attachments.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs/operators';\n\nimport {\n    b64DecodeUnicode,\n    blobBufferUtil,\n    flatClone,\n    PROMISE_RESOLVE_VOID\n} from './../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDocument,\n    RxPlugin,\n    BlobBuffer,\n    OldRxCollection,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData\n} from '../types';\nimport { flatCloneDocWithMeta, writeSingle } from '../rx-storage-helper';\nimport { pouchHash } from './pouchdb';\n\n\n/**\n * To be able to support PouchDB with attachments,\n * we have to use the md5 hashing here, even if the RxDatabase itself\n * has a different hashing function.\n */\nexport function hashAttachmentData(\n    attachmentBase64String: string\n): Promise<string> {\n    let binary;\n    try {\n        binary = b64DecodeUnicode(attachmentBase64String);\n    } catch (err) {\n        console.log('could not run b64DecodeUnicode() on ' + attachmentBase64String);\n        throw err;\n    }\n    return pouchHash(binary);\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\nfunction ensureSchemaSupportsAttachments(doc: any) {\n    const schemaJson = doc.collection.schema.jsonSchema;\n    if (!schemaJson.attachments) {\n        throw newRxError('AT1', {\n            link: 'https://pubkey.github.io/rxdb/rx-attachment.html'\n        });\n    }\n}\n\nconst _assignMethodsToAttachment = function (attachment: any) {\n    Object\n        .entries(attachment.doc.collection.attachments)\n        .forEach(([funName, fun]) => {\n            Object.defineProperty(attachment, funName, {\n                get: () => (fun as any).bind(attachment)\n            });\n        });\n};\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        _assignMethodsToAttachment(this);\n    }\n\n    remove(): Promise<void> {\n        this.doc._atomicQueue = this.doc._atomicQueue\n            .then(async () => {\n                const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this.doc._data);\n                docWriteData._attachments = flatClone(docWriteData._attachments);\n                delete docWriteData._attachments[this.id];\n                const writeResult: RxDocumentData<any> = await writeSingle(\n                    this.doc.collection.storageInstance,\n                    {\n                        previous: flatClone(this.doc._data), // TODO do we need a flatClone here?\n                        document: docWriteData\n                    },\n                    'attachment-remove'\n                );\n\n                const newData = flatClone(this.doc._data);\n                newData._rev = writeResult._rev;\n                newData._attachments = writeResult._attachments;\n                this.doc._dataSync$.next(newData);\n\n            });\n        return this.doc._atomicQueue;\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<BlobBuffer> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id\n        );\n        const ret = await blobBufferUtil.createBlobBufferFromBase64(\n            plainDataBase64,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobBufferUtil.toString(data);\n        return asString;\n    }\n}\n\nexport function fromStorageInstanceResult(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\nexport async function putAttachment(\n    this: RxDocument,\n    attachmentData: RxAttachmentCreator,\n    /**\n     * If set to true, the write will be skipped\n     * when the attachment already contains the same data.\n     */\n    skipIfSame: boolean = true\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n    const dataSize = blobBufferUtil.size(attachmentData.data);\n    const dataString = await blobBufferUtil.toBase64String(attachmentData.data);\n\n    const id = attachmentData.id;\n    const type = attachmentData.type;\n    const data = dataString;\n\n    const newDigest = await hashAttachmentData(\n        dataString\n    ).then(hash => 'md5-' + hash);\n\n    this._atomicQueue = this._atomicQueue\n        .then(async () => {\n            if (skipIfSame && this._data._attachments && this._data._attachments[id]) {\n                const currentMeta = this._data._attachments[id];\n                if (currentMeta.type === type && currentMeta.digest === newDigest) {\n                    // skip because same data and same type\n                    return this.getAttachment(id);\n                }\n            }\n\n            const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this._data);\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n\n            docWriteData._attachments[id] = {\n                digest: newDigest,\n                length: dataSize,\n                type,\n                data\n            };\n            const writeRow = {\n                previous: flatClone(this._data),\n                document: flatClone(docWriteData)\n            };\n\n            const writeResult = await writeSingle(\n                this.collection.storageInstance,\n                writeRow,\n                'attachment-put'\n            );\n\n            const attachmentData = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentData,\n                this\n            );\n\n            const newData = flatClone(this._data);\n            newData._rev = writeResult._rev;\n            newData._attachments = writeResult._attachments;\n            this._dataSync$.next(newData);\n\n            return attachment;\n        });\n    return this._atomicQueue;\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: OldRxCollection\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(docPrimary, attachmentId);\n                newAttachments[attachmentId] = {\n                    digest: attachment.digest,\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachemnts data buffers directly in the document.\n     */\n    return PROMISE_RESOLVE_VOID;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$() {\n                    return this._dataSync$\n                        .pipe(\n                            map((data: any) => {\n                                if (!data['_attachments']) {\n                                    return {};\n                                }\n                                return data['_attachments'];\n                            }),\n                            map((attachmentsData: any) => Object.entries(\n                                attachmentsData\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n"],"mappings":"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"}