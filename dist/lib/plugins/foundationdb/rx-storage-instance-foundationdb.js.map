{"version":3,"file":"rx-storage-instance-foundationdb.js","names":["RxStorageInstanceFoundationDB","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","bulkWrite","documentWrites","context","dbsPromise","dbs","categorized","root","doTransaction","tx","ret","success","error","ids","map","row","document","mainTx","at","main","subspace","attachmentTx","attachments","docsInDB","Map","Promise","all","id","get","doc","set","categorizeBulkWriteRows","errors","bulkInsertDocs","forEach","writeRow","docId","Object","values","indexes","indexMeta","indexString","getIndexableString","indexTx","db","bulkUpdateDocs","oldIndexString","ensureNotFalsy","previous","newIndexString","attachmentsAdd","attachment","attachmentMapKey","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","result","eventBulk","events","length","lastState","getNewestOfDocumentStates","checkpoint","lwt","_meta","next","findDocumentsById","withDeleted","docInDb","_deleted","query","preparedQuery","queryFoundationDB","count","documents","mode","getAttachmentData","data","getChangedDocumentsSince","limit","require","keySelector","StreamingMode","index","indexName","getFoundationDBIndexName","lowerBoundString","checkpointPartialDoc","innerResult","getRangeAll","firstGreaterThan","INDEX_MAX","streamingMode","Exact","range","docIds","docsData","concat","lastDoc","lastOfArray","changeStream","asObservable","remove","clearRange","PROMISE_RESOLVE_VOID","close","cleanup","minimumDeletedTime","maxDeletionTime","now","CLEANUP_INDEX","getStartIndexStringFromLowerBound","upperBoundString","getStartIndexStringFromUpperBound","noMoreUndeleted","batchSize","pop","subIndexDB","docData","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","reject","newRxError","database","collection","complete","createFoundationDBStorageInstance","params","open","directory","encoders","connection","clusterFile","createOrOpen","dir","version","withKeyEncoding","string","withValueEncoding","json","indexDBs","useIndexes","slice","push","useIndexesFinal","indexAr","Array","isArray","unshift","indexDB","getIndexableStringMonad","instance","resolve"],"sources":["../../../../src/plugins/foundationdb/rx-storage-instance-foundationdb.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport type {\n    FoundationDBDatabase,\n    FoundationDBIndexMeta,\n    FoundationDBPreparedQuery,\n    FoundationDBStorageInternals,\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types';\n// import {\n//     open as foundationDBOpen,\n//     directory as foundationDBDirectory,\n//     encoders as foundationDBEncoders,\n//     keySelector as foundationDBKeySelector,\n//     StreamingMode as foundationDBStreamingMode\n// } from 'foundationdb';\nimport {\n    categorizeBulkWriteRows,\n    getNewestOfDocumentStates\n} from '../../rx-storage-helper';\nimport {\n\n    CLEANUP_INDEX,\n    getFoundationDBIndexName\n} from './foundationdb-helpers';\nimport { newRxError } from '../../rx-error';\nimport {\n    getIndexableStringMonad,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport {\n    ensureNotFalsy, lastOfArray, now\n    , PROMISE_RESOLVE_VOID\n} from '../../util';\nimport { queryFoundationDB } from './foundationdb-query';\nimport { INDEX_MAX } from '../../query-planner';\nimport { attachmentMapKey } from '../memory';\n\nexport class RxStorageInstanceFoundationDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    FoundationDBStorageInternals<RxDocType>,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed = false;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageFoundationDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: FoundationDBStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageFoundationDBInstanceCreationOptions>,\n        public readonly settings: RxStorageFoundationDBSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n        const result = await dbs.root.doTransaction(async (tx: any) => {\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                success: {},\n                error: {}\n            };\n\n            const ids = documentWrites.map(row => (row.document as any)[this.primaryPath]);\n            const mainTx = tx.at(dbs.main.subspace);\n            const attachmentTx = tx.at(dbs.attachments.subspace);\n            const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n            /**\n             * TODO this might be faster if fdb\n             * any time adds a bulk-fetch-by-key method.\n             */\n            await Promise.all(\n                ids.map(async (id) => {\n                    const doc = await mainTx.get(id);\n                    docsInDB.set(id, doc);\n                })\n            );\n\n\n            categorized = categorizeBulkWriteRows<RxDocType>(\n                this,\n                this.primaryPath as any,\n                docsInDB,\n                documentWrites,\n                context\n            );\n\n            ret.error = categorized.errors;\n\n            // INSERTS\n            categorized.bulkInsertDocs.forEach(writeRow => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n                ret.success[docId] = writeRow.document;\n\n                // insert document data\n                mainTx.set(docId, writeRow.document);\n\n                // insert secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const indexString = indexMeta.getIndexableString(writeRow.document);\n                    const indexTx = tx.at(indexMeta.db.subspace);\n                    indexTx.set(indexString, docId);\n                });\n            });\n            // UPDATES\n            categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n\n                // overwrite document data\n                mainTx.set(docId, writeRow.document);\n\n                // update secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                    const newIndexString = indexMeta.getIndexableString(writeRow.document);\n                    if (oldIndexString !== newIndexString) {\n                        const indexTx = tx.at(indexMeta.db.subspace);\n                        indexTx.delete(oldIndexString);\n                        indexTx.set(newIndexString, docId);\n                    }\n                });\n                ret.success[docId] = writeRow.document;\n            });\n\n            // attachments\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsUpdate.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsRemove.forEach(attachment => {\n                attachmentTx.delete(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                );\n            });\n\n            return ret;\n        });\n        /**\n         * The events must be emitted AFTER the transaction\n         * has finished.\n         * Otherwise an observable changestream might cause a read\n         * to a document that does not already exist outside of the transaction.\n         */\n        if (ensureNotFalsy(categorized).eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates<any>(\n                this.primaryPath as any,\n                Object.values(result.success)\n            );\n            ensureNotFalsy(categorized).eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(ensureNotFalsy(categorized).eventBulk);\n        }\n        return result;\n    }\n\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        return dbs.main.doTransaction(async (tx: any) => {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            await Promise.all(\n                ids.map(async (docId) => {\n                    const docInDb = await tx.get(docId);\n                    if (\n                        docInDb &&\n                        (\n                            !docInDb._deleted ||\n                            withDeleted\n                        )\n                    ) {\n                        ret[docId] = docInDb;\n                    }\n                })\n            );\n            return ret;\n        });\n    }\n    query(preparedQuery: FoundationDBPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryFoundationDB(this, preparedQuery);\n    }\n    async count(\n        preparedQuery: FoundationDBPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        /**\n         * At this point in time (end 2022), FoundationDB does not support\n         * range counts. So we have to run a normal query and use the result set length.\n         * @link https://github.com/apple/foundationdb/issues/5981\n         */\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    async getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        const dbs = await this.internals.dbsPromise;\n        const attachment = await dbs.attachments.get(attachmentMapKey(documentId, attachmentId));\n        return attachment.data;\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const dbs = await this.internals.dbsPromise;\n        const index = [\n            '_meta.lwt',\n            this.primaryPath as any\n        ];\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        let lowerBoundString = '';\n        if (checkpoint) {\n            const checkpointPartialDoc: any = {\n                [this.primaryPath]: checkpoint.id,\n                _meta: {\n                    lwt: checkpoint.lwt\n                }\n            };\n            lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n        }\n        const result: RxDocumentData<RxDocType>[] = await dbs.root.doTransaction(async (tx: any) => {\n            let innerResult: RxDocumentData<RxDocType>[] = [];\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                INDEX_MAX,\n                {\n                    limit,\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(\n                docIds.map((docId: string) => mainTx.get(docId))\n            );\n            innerResult = innerResult.concat(docsData);\n            return innerResult;\n        });\n        const lastDoc = lastOfArray(result);\n        return {\n            documents: result,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        const dbs = await this.internals.dbsPromise;\n        await dbs.root.doTransaction((tx: any) => {\n            tx.clearRange('', INDEX_MAX);\n            return PROMISE_RESOLVE_VOID;\n        });\n        return this.close();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const dbs = await this.internals.dbsPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ],\n            false\n        );\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ],\n            true\n        );\n        let noMoreUndeleted: boolean = true;\n        await dbs.root.doTransaction(async (tx: any) => {\n            const batchSize = ensureNotFalsy(this.settings.batchSize);\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                upperBoundString,\n                {\n                    limit: batchSize + 1, // get one more extra to detect what to return from cleanup()\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            if (range.length > batchSize) {\n                noMoreUndeleted = false;\n                range.pop();\n            }\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n\n            Object\n                .values(dbs.indexes)\n                .forEach(indexMeta => {\n                    const subIndexDB = tx.at(indexMeta.db.subspace);\n                    docsData.forEach(docData => {\n                        const indexString = indexMeta.getIndexableString(docData);\n                        subIndexDB.delete(indexString);\n                    });\n                });\n            docIds.forEach((id: string) => mainTx.delete(id));\n        });\n\n        return noMoreUndeleted;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async close() {\n        if (this.closed) {\n            return Promise.reject(newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            }));\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        const dbs = await this.internals.dbsPromise;\n        dbs.root.close();\n\n        // TODO shouldn't we close the index databases?\n        // Object.values(dbs.indexes).forEach(db => db.close());\n    }\n}\n\n\nexport function createFoundationDBStorageInstance<RxDocType>(\n    storage: RxStorageFoundationDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>,\n    settings: RxStorageFoundationDBSettings\n): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const {\n        open,\n        directory,\n        encoders\n    } = require('foundationdb');\n\n    const connection = open(settings.clusterFile);\n    const dbsPromise = (async () => {\n        const dir = await directory.createOrOpen(connection, 'rxdb');\n\n        const root = connection\n            .at(dir)\n            .at(params.databaseName + '.')\n            .at(params.collectionName + '.')\n            .at(params.schema.version + '.');\n        const main: FoundationDBDatabase<RxDocType> = root\n            .at('main.')\n            .withKeyEncoding(encoders.string) // automatically encode & decode keys using tuples\n            .withValueEncoding(encoders.json) as any; // and values using JSON\n\n\n        const events: FoundationDBDatabase<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = root\n            .at('events.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n        const attachments: FoundationDBDatabase<RxAttachmentWriteData> = root\n            .at('attachments.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n\n        const indexDBs: { [indexName: string]: FoundationDBIndexMeta<RxDocType> } = {};\n        const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n        useIndexes.push([primaryPath]);\n        const useIndexesFinal = useIndexes.map(index => {\n            const indexAr = Array.isArray(index) ? index.slice(0) : [index];\n            indexAr.unshift('_deleted');\n            return indexAr;\n        })\n        // used for `getChangedDocumentsSince()`\n        useIndexesFinal.push([\n            '_meta.lwt',\n            primaryPath\n        ]);\n        useIndexesFinal.push(CLEANUP_INDEX);\n        useIndexesFinal.forEach(indexAr => {\n            const indexName = getFoundationDBIndexName(indexAr);\n            const indexDB = root.at(indexName + '.')\n                .withKeyEncoding(encoders.string)\n                .withValueEncoding(encoders.string);\n            indexDBs[indexName] = {\n                indexName,\n                db: indexDB,\n                getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n                index: indexAr\n            };\n        });\n\n        return {\n            root,\n            main,\n            events,\n            attachments,\n            indexes: indexDBs\n        };\n    })();\n\n\n    const internals: FoundationDBStorageInternals<RxDocType> = {\n        connection,\n        dbsPromise: dbsPromise\n    };\n\n    const instance = new RxStorageInstanceFoundationDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}