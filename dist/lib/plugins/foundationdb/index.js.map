{"version":3,"file":"index.js","names":["versionSet","getRxStorageFoundationDB","settings","apiVersion","Error","require","setAPIVersion","storage","name","statics","RxStorageDexieStatics","createStorageInstance","params","ensureRxStorageInstanceParamsAreCorrect","useSettings","Object","assign","options","batchSize","createFoundationDBStorageInstance"],"sources":["../../../../src/plugins/foundationdb/index.ts"],"sourcesContent":["import { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper';\nimport type {\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport { RxStorageDexieStatics } from '../dexie/rx-storage-dexie';\nimport type {\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types';\n\nimport {\n    createFoundationDBStorageInstance,\n    RxStorageInstanceFoundationDB\n} from './rx-storage-instance-foundationdb';\n\n\nlet versionSet: undefined | number;\n\nexport function getRxStorageFoundationDB(\n    settings: RxStorageFoundationDBSettings\n): RxStorageFoundationDB {\n    if (versionSet && versionSet !== settings.apiVersion) {\n        throw new Error('foundationdb already initialized with api version ' + versionSet);\n    } else if (!versionSet) {\n        versionSet = settings.apiVersion;\n        const { setAPIVersion } = require('foundationdb');\n        setAPIVersion(settings.apiVersion);\n    }\n\n\n    const storage: RxStorageFoundationDB = {\n        name: 'foundationdb',\n        statics: RxStorageDexieStatics,\n        createStorageInstance<RxDocType>(\n            params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>\n        ): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n            ensureRxStorageInstanceParamsAreCorrect(params);\n            const useSettings = Object.assign(\n                {},\n                settings,\n                params.options\n            );\n            if (!useSettings.batchSize) {\n                useSettings.batchSize = 50;\n            }\n            return createFoundationDBStorageInstance(this, params, useSettings);\n        }\n    };\n\n    return storage;\n}\n\n\nexport * from './foundationdb-types';\nexport * from './foundationdb-helpers';\n"],"mappings":";;;;;;;;;;AAAA;;AAIA;;AAOA;;AA2CA;;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;AACA;;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AAtCA,IAAIA,UAAJ;;AAEO,SAASC,wBAAT,CACHC,QADG,EAEkB;EACrB,IAAIF,UAAU,IAAIA,UAAU,KAAKE,QAAQ,CAACC,UAA1C,EAAsD;IAClD,MAAM,IAAIC,KAAJ,CAAU,uDAAuDJ,UAAjE,CAAN;EACH,CAFD,MAEO,IAAI,CAACA,UAAL,EAAiB;IACpBA,UAAU,GAAGE,QAAQ,CAACC,UAAtB;;IACA,eAA0BE,OAAO,CAAC,cAAD,CAAjC;IAAA,IAAQC,aAAR,YAAQA,aAAR;;IACAA,aAAa,CAACJ,QAAQ,CAACC,UAAV,CAAb;EACH;;EAGD,IAAMI,OAA8B,GAAG;IACnCC,IAAI,EAAE,cAD6B;IAEnCC,OAAO,EAAEC,qCAF0B;IAGnCC,qBAHmC,iCAI/BC,MAJ+B,EAKkB;MACjD,IAAAC,wDAAA,EAAwCD,MAAxC;MACA,IAAME,WAAW,GAAGC,MAAM,CAACC,MAAP,CAChB,EADgB,EAEhBd,QAFgB,EAGhBU,MAAM,CAACK,OAHS,CAApB;;MAKA,IAAI,CAACH,WAAW,CAACI,SAAjB,EAA4B;QACxBJ,WAAW,CAACI,SAAZ,GAAwB,EAAxB;MACH;;MACD,OAAO,IAAAC,gEAAA,EAAkC,IAAlC,EAAwCP,MAAxC,EAAgDE,WAAhD,CAAP;IACH;EAhBkC,CAAvC;EAmBA,OAAOP,OAAP;AACH"}