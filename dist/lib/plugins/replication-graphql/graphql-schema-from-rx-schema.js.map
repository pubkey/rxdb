{"version":3,"file":"graphql-schema-from-rx-schema.js","names":["_getGraphqlFromJsonschema","require","_rxSchemaHelper","_utils","SPACING","exports","graphQLSchemaFromRxSchema","input","ret","asString","queries","mutations","subscriptions","inputs","types","Object","entries","forEach","collectionName","collectionSettings","fillUpOptionals","schema","prefixes","ensureNotFalsy","ucCollectionName","ucfirst","collectionNameInput","inputSchema","stripKeysFromSchema","ignoreInputKeys","inputGraphQL","getGraphqlSchemaFromJsonSchema","rootName","direction","pushRowGraphQL","pushRow","type","properties","assumedMasterState","newDocumentState","required","additionalProperties","checkpointSchema","checkpointFields","key","subSchema","push","checkpointInputGraphQL","checkpoint","concat","typeDefinitions","map","str","replaceTopLevelTypeName","headersSchema","headerFields","headerField","headersInputName","headers","headersInputGraphQL","length","outputSchema","ignoreOutputKeys","outputGraphQL","checkpointOutputGraphQL","pullBulkOutputGraphQL","pullBulk","documents","items","queryName","pull","queryKeys","queryString","join","mutationName","mutationString","subscriptionHeaderInputString","subscriptionName","stream","subscriptionString","fullQueryString","fullMutationString","fullSubscriptionString","fullTypeString","fullInputString","fullSchemaString","flatClone","fillWithDefaultSettings","keys","startsWith","deletedField","withRevisions","strip","cloned","clone","replace"],"sources":["../../../../src/plugins/replication-graphql/graphql-schema-from-rx-schema.ts"],"sourcesContent":["import { getGraphqlSchemaFromJsonSchema } from 'get-graphql-from-jsonschema';\n\nimport { fillWithDefaultSettings } from '../../rx-schema-helper';\n\nimport { RxJsonSchema } from '../../types';\nimport { clone, ensureNotFalsy, flatClone, ucfirst } from '../../plugins/utils';\n\nexport type Prefixes = {\n    push?: string;\n    pushRow?: string;\n    checkpoint?: string;\n    pull?: string;\n    pullBulk?: string;\n    stream?: string;\n    headers?: string;\n};\n\n/**\n * just type some common types\n * to have better IDE autocomplete,\n * all strings are allowed\n */\nexport type GraphQLParamType = 'ID' | 'ID!' |\n'String' | 'String!' |\n'Int' | 'Int!' |\n'Float' | 'Float!' |\nstring;\n\nexport type GraphQLSchemaFromRxSchemaInputSingleCollection = {\n    schema: RxJsonSchema<any>;\n    /**\n     * These fields of the document data\n     * will be used for the checkpoint.\n     */\n    checkpointFields: string[];\n    ignoreInputKeys?: string[];\n    ignoreOutputKeys?: string[];\n    withRevisions?: boolean;\n    prefixes?: Prefixes;\n    headerFields?: string[];\n    /**\n     * Name of the boolean field that marks deleted documents.\n     * [default='_deleted']\n     */\n    deletedField?: string;\n};\n\nexport type GraphQLSchemaFromRxSchemaInput = {\n    [collectionName: string]: GraphQLSchemaFromRxSchemaInputSingleCollection;\n};\nexport type GraphQLSchemaFromRxSchemaOutput = {\n    asString: string;\n    queries: string[];\n    mutations: string[];\n    subscriptions: string[];\n    inputs: string[];\n    types: string[];\n};\n\n// we use two spaces because get-graphql-from-jsonschema does also\nexport const SPACING = '  ';\n\n/**\n * Create a GraphQL schema from a given RxJsonSchema\n */\nexport function graphQLSchemaFromRxSchema(\n    input: GraphQLSchemaFromRxSchemaInput\n): GraphQLSchemaFromRxSchemaOutput {\n    const ret: GraphQLSchemaFromRxSchemaOutput = {\n        asString: '',\n        queries: [],\n        mutations: [],\n        subscriptions: [],\n        inputs: [],\n        types: []\n    };\n\n    Object.entries(input).forEach(([collectionName, collectionSettings]) => {\n        collectionSettings = fillUpOptionals(collectionSettings);\n\n        const schema = collectionSettings.schema;\n        const prefixes: Prefixes = ensureNotFalsy(collectionSettings.prefixes);\n        const ucCollectionName = ucfirst(collectionName);\n        const collectionNameInput = ucfirst(collectionName) + 'Input';\n\n        // input\n        const inputSchema = stripKeysFromSchema(schema, ensureNotFalsy(collectionSettings.ignoreInputKeys));\n\n        const inputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionNameInput,\n            schema: inputSchema as any,\n            direction: 'input'\n        });\n        const pushRowGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionNameInput + prefixes.pushRow,\n            schema: {\n                type: 'object',\n                properties: {\n                    assumedMasterState: inputSchema as any,\n                    newDocumentState: inputSchema as any\n                },\n                required: ['newDocumentState'],\n                additionalProperties: false\n            },\n            direction: 'input'\n        });\n\n        const checkpointSchema = {\n            type: 'object',\n            properties: {},\n            required: [],\n            additionalProperties: false\n        } as any;\n        collectionSettings.checkpointFields.forEach(key => {\n            const subSchema: any = schema.properties[key];\n            checkpointSchema.properties[key] = subSchema;\n            checkpointSchema.required.push(key);\n        });\n        const checkpointInputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionNameInput + prefixes.checkpoint,\n            schema: checkpointSchema as any,\n            direction: 'input'\n        });\n\n        ret.inputs = ret.inputs.concat(\n            inputGraphQL\n                .typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput))\n        ).concat(\n            pushRowGraphQL\n                .typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput + prefixes.pushRow))\n        ).concat(\n            checkpointInputGraphQL\n                .typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput + prefixes.checkpoint))\n        );\n\n        const headersSchema: any = {\n            type: 'object',\n            additionalProperties: false,\n            properties: {},\n            required: []\n        };\n        ensureNotFalsy(collectionSettings.headerFields).forEach(headerField => {\n            headersSchema.properties[headerField] = {\n                type: 'string'\n            };\n            headersSchema.required.push(headerField);\n        });\n        const headersInputName = collectionNameInput + prefixes.headers;\n        const headersInputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: headersInputName,\n            schema: headersSchema,\n            direction: 'input'\n        });\n        if (ensureNotFalsy(collectionSettings.headerFields).length > 0) {\n            ret.inputs = ret.inputs.concat(\n                headersInputGraphQL\n                    .typeDefinitions\n                    .map(str => replaceTopLevelTypeName(str, headersInputName))\n            );\n        }\n\n        // output\n        const outputSchema = stripKeysFromSchema(schema, ensureNotFalsy(collectionSettings.ignoreOutputKeys));\n        const outputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionName,\n            schema: outputSchema as any,\n            direction: 'output'\n        });\n        const checkpointOutputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: ucCollectionName + prefixes.checkpoint,\n            schema: checkpointSchema as any,\n            direction: 'output'\n        });\n        const pullBulkOutputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: ucCollectionName + prefixes.pullBulk,\n            schema: {\n                type: 'object',\n                properties: {\n                    documents: {\n                        type: 'array',\n                        items: inputSchema as any\n                    },\n                    checkpoint: checkpointSchema as any\n                },\n                required: ['documents', 'checkpoint'],\n                additionalProperties: false\n            },\n            direction: 'output'\n        });\n        ret.types = ret.types.concat(\n            outputGraphQL.typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName))\n        ).concat(\n            checkpointOutputGraphQL.typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName + prefixes.checkpoint))\n        ).concat(\n            pullBulkOutputGraphQL.typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName + prefixes.pullBulk))\n        );\n\n        // query\n        const queryName = prefixes.pull + ucCollectionName;\n        const queryKeys = [\n            'checkpoint: ' + collectionNameInput + prefixes.checkpoint,\n            'limit: Int!'\n        ];\n        const queryString = queryName + '(' + queryKeys.join(', ') + '): ' + ucCollectionName + prefixes.pullBulk + '!';\n        ret.queries.push(SPACING + queryString);\n\n        // mutation\n        const mutationName = prefixes.push + ucCollectionName;\n        const mutationString = mutationName + '(' + collectionName + prefixes.pushRow + ': [' + collectionNameInput + prefixes.pushRow + ']): [' + ucCollectionName + '!]!';\n        ret.mutations.push(SPACING + mutationString);\n\n        // subscription\n        let subscriptionHeaderInputString = '';\n        if (collectionSettings.headerFields && collectionSettings.headerFields.length > 0) {\n            subscriptionHeaderInputString = '(headers: ' + headersInputName + ')';\n        }\n        const subscriptionName = prefixes.stream + ucCollectionName;\n        const subscriptionString = subscriptionName + subscriptionHeaderInputString + ': ' + ucCollectionName + prefixes.pullBulk + '!';\n        ret.subscriptions.push(SPACING + subscriptionString);\n    });\n\n    // build full string\n    const fullQueryString = 'type Query {\\n' + ret.queries.join('\\n') + '\\n}\\n';\n    const fullMutationString = 'type Mutation {\\n' + ret.mutations.join('\\n') + '\\n}\\n';\n    const fullSubscriptionString = 'type Subscription {\\n' + ret.subscriptions.join('\\n') + '\\n}\\n';\n\n    const fullTypeString = ret.types.join('\\n');\n    const fullInputString = ret.inputs.join('\\n');\n\n    const fullSchemaString = '' +\n        'schema {\\n' +\n        SPACING + 'query: Query\\n' +\n        SPACING + 'mutation: Mutation\\n' +\n        SPACING + 'subscription: Subscription\\n' +\n        '}\\n';\n\n    ret.asString = '' +\n        fullQueryString + '\\n' +\n        fullMutationString + '\\n' +\n        fullSubscriptionString + '\\n' +\n        fullTypeString + '\\n' +\n        fullInputString + '\\n' +\n        fullSchemaString;\n\n    return ret;\n}\n\n\nexport function fillUpOptionals(\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\n): GraphQLSchemaFromRxSchemaInputSingleCollection {\n    input = flatClone(input);\n\n    const schema = fillWithDefaultSettings(input.schema);\n    // strip internal attributes\n    Object.keys(schema.properties).forEach(key => {\n        if (key.startsWith('_')) {\n            delete schema.properties[key];\n        }\n    });\n    input.schema = schema;\n\n    // add deleted field to schema\n    if (!input.deletedField) {\n        input.deletedField = '_deleted';\n    }\n    schema.properties[input.deletedField] = {\n        type: 'boolean'\n    };\n    (schema.required as string[]).push(input.deletedField);\n\n    // fill up prefixes\n    if (!input.prefixes) {\n        input.prefixes = {} as any;\n    }\n    const prefixes: Prefixes = input.prefixes as any;\n    if (!prefixes.push) {\n        prefixes.push = 'push';\n    }\n    if (!prefixes.pushRow) {\n        prefixes.pushRow = 'PushRow';\n    }\n    if (!prefixes.checkpoint) {\n        prefixes.checkpoint = 'Checkpoint';\n    }\n    if (!prefixes.pull) {\n        prefixes.pull = 'pull';\n    }\n    if (!prefixes.pullBulk) {\n        prefixes.pullBulk = 'PullBulk';\n    }\n    if (!prefixes.stream) {\n        prefixes.stream = 'stream';\n    }\n    if (!prefixes.headers) {\n        prefixes.headers = 'Headers';\n    }\n    if (!input.headerFields) {\n        input.headerFields = [];\n    }\n\n\n    if (!input.withRevisions) {\n        input.withRevisions = false;\n    }\n\n    if (!input.ignoreInputKeys) {\n        input.ignoreInputKeys = [];\n    }\n    if (!input.ignoreOutputKeys) {\n        input.ignoreOutputKeys = [];\n    }\n\n    return input;\n}\n\nfunction stripKeysFromSchema<T>(schema: RxJsonSchema<T>, strip: string[]): RxJsonSchema<Partial<T>> {\n    const cloned: any = clone(schema);\n    strip.forEach(key => {\n        delete cloned.properties[key];\n    });\n    return cloned;\n}\n\n/**\n * get-graphql-from-jsonschema add a T0-suffix\n * that we do not want for the top level type\n */\nfunction replaceTopLevelTypeName(str: string, ucCollectionName: string): string {\n    return str.replace(' ' + ucCollectionName + 'T0 ', ' ' + ucCollectionName + ' ');\n}\n"],"mappings":"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"}