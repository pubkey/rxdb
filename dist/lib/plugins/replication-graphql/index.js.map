{"version":3,"file":"index.js","names":["RxGraphQLReplicationState","url","clientState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","setHeaders","headers","client","GraphQLClient","http","RxReplicationState","syncGraphQL","waitForLeadership","mutateableClientState","pullStream$","Subject","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","queryBuilder","pullGraphQL","query","variables","result","errors","dataPath","Object","keys","data","objectPath","get","docsData","documents","newCheckpoint","checkpoint","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","graphqlReplicationState","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","fastUnsecureHash","ws","mustUseSocket","streamQueryBuilder","startBefore","start","bind","wsClient","getGraphQLWebSocket","ensureNotFalsy","clientRequest","request","subscribe","next","firstField","error","onReconnected","cancelBefore","cancel","complete","removeGraphQLWebSocketRef","startReplicationOnLeaderShip","RxDBReplicationGraphQLPlugin","name","init","addRxPlugin","RxDBLeaderElectionPlugin","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\n\nimport GraphQLClient from 'graphql-client';\nimport objectPath from 'object-path';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash\n} from '../../util';\n\nimport {\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    RxPlugin,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket';\nimport { Subject } from 'rxjs';\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: { headers: any; client: any },\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: { [k: string]: string }): void {\n        this.clientState.headers = headers;\n        this.clientState.client = GraphQLClient({\n            url: this.url.http,\n            headers\n        });\n    }\n}\n\nexport function syncGraphQL<RxDocType, CheckpointType>(\n    this: RxCollection,\n    {\n        url,\n        headers = {},\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    const collection = this;\n\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        client: GraphQLClient({\n            url: url.http,\n            headers\n        })\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await mutateableClientState.client.query(pullGraphQL.query, pullGraphQL.variables);\n                if (result.errors) {\n                    throw result.errors;\n                }\n\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                const data: any = objectPath.get(result, dataPath);\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                }\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        }\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await mutateableClientState.client.query(pushObj.query, pushObj.variables);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = Object.keys(result.data)[0];\n                const data: any = objectPath.get(result.data, dataPath);\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(url.http ? url.http : url.ws as any),\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws));\n            const clientRequest = wsClient.request(ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers));\n            clientRequest.subscribe({\n                next(data: any) {\n                    const firstField = Object.keys(data.data)[0];\n                    pullStream$.next(data.data[firstField]);\n                },\n                error(error: any) {\n                    pullStream$.error(error);\n                }\n            });\n            wsClient.onReconnected(() => {\n                pullStream$.next('RESYNC');\n            });\n        }\n        return startBefore();\n    }\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        pullStream$.complete();\n        if (mustUseSocket) {\n            removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n        }\n        return cancelBefore();\n    }\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\nexport * from './graphql-websocket';\n\nexport const RxDBReplicationGraphQLPlugin: RxPlugin = {\n    name: 'replication-graphql',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncGraphQL = syncGraphQL;\n        }\n    }\n};\n"],"mappings":"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"}