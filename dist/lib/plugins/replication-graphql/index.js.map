{"version":3,"file":"index.js","names":["RxGraphQLReplicationState","url","clientState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","setHeaders","headers","setCredentials","credentials","graphQLRequest","queryParams","ensureNotFalsy","http","RxReplicationState","syncGraphQL","waitForLeadership","mutateableClientState","pullStream$","Subject","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","queryBuilder","pullGraphQL","graphqlReplicationState","result","docsData","data","documents","newCheckpoint","checkpoint","errors","dataPath","Object","keys","objectPath","get","responseModifier","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","fastUnsecureHash","ws","mustUseSocket","streamQueryBuilder","startBefore","start","bind","wsClient","getGraphQLWebSocket","on","next","query","subscribe","streamResponse","firstField","error","complete","cancelBefore","cancel","removeGraphQLWebSocketRef","startReplicationOnLeaderShip","RxDBReplicationGraphQLPlugin","name","init","addRxPlugin","RxDBLeaderElectionPlugin","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\nimport objectPath from 'object-path';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash\n} from '../../util';\n\nimport {\n    graphQLRequest,\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    RxPlugin,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem,\n    RxGraphQLReplicationQueryBuilderResponseObject,\n    RxGraphQLReplicationClientState\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket';\nimport { Subject } from 'rxjs';\n\n\n\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: RxGraphQLReplicationClientState,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: { [k: string]: string }): void {\n        this.clientState.headers = headers;\n    }\n\n    setCredentials(credentials: RequestCredentials | undefined) {\n        this.clientState.credentials = credentials\n    }\n\n    graphQLRequest(\n        queryParams: RxGraphQLReplicationQueryBuilderResponseObject\n    ) {\n        return graphQLRequest(\n            ensureNotFalsy(this.url.http),\n            this.clientState,\n            queryParams\n        );\n    }\n}\n\n\nexport function syncGraphQL<RxDocType, CheckpointType>(\n    this: RxCollection,\n    {\n        url,\n        headers = {},\n        credentials,\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    const collection = this;\n\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        credentials\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await graphqlReplicationState.graphQLRequest(pullGraphQL);\n                if (result.errors) {\n                    throw result.errors;\n                }\n\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                let data: any = objectPath.get(result, dataPath);\n\n                if (pull.responseModifier) {\n                    data = await pull.responseModifier(\n                        data,\n                        'handler',\n                        lastPulledCheckpoint\n                    );\n                }\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                }\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        }\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await graphqlReplicationState.graphQLRequest(pushObj);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = Object.keys(result.data)[0];\n                const data: any = objectPath.get(result.data, dataPath);\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(url.http ? url.http : url.ws as any),\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws));\n\n            wsClient.on('connected', () => {\n                pullStream$.next('RESYNC');\n            });\n\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\n\n            wsClient.subscribe(\n                query,\n                {\n                    next: async (streamResponse: any) => {\n                        const firstField = Object.keys(streamResponse.data)[0];\n                        let data = streamResponse.data[firstField];\n                        if (pull.responseModifier) {\n                            data = await pull.responseModifier(\n                                data,\n                                'stream'\n                            );\n                        }\n                        pullStream$.next(data);\n                    },\n                    error: (error: any) => {\n                        pullStream$.error(error);\n                    },\n                    complete: () => {\n                        pullStream$.complete();\n                    }\n                });\n        }\n        return startBefore();\n    }\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        pullStream$.complete();\n        if (mustUseSocket) {\n            removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n        }\n        return cancelBefore();\n    }\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\nexport * from './graphql-websocket';\n\nexport const RxDBReplicationGraphQLPlugin: RxPlugin = {\n    name: 'replication-graphql',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncGraphQL = syncGraphQL;\n        }\n    }\n};\n"],"mappings":"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"}