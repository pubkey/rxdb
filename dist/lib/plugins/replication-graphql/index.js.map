{"version":3,"file":"index.js","names":["_utils","require","_helper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_leaderElection","_replication","_index","_graphqlWebsocket","_rxjs","_graphqlSchemaFromRxSchema","_queryBuilderFromRxSchema","RxGraphQLReplicationState","_RxReplicationState","_inheritsLoose2","default","url","clientState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","_this","_proto","setHeaders","headers","setCredentials","credentials","graphQLRequest","queryParams","ensureNotFalsy","http","RxReplicationState","replicateGraphQL","waitForLeadership","addRxPlugin","RxDBLeaderElectionPlugin","mutateableClientState","pullStream$","Subject","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","pullGraphQL","queryBuilder","result","graphqlReplicationState","errors","dataPath","data","getProperty","responseModifier","docsData","documents","newCheckpoint","checkpoint","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","database","hashFunction","ws","mustUseSocket","streamQueryBuilder","startBefore","start","bind","httpHeaders","includeWsHeaders","undefined","wsClient","getGraphQLWebSocket","on","next","query","subscribe","streamResponse","firstField","error","complete","cancelBefore","cancel","isStopped","removeGraphQLWebSocketRef","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with a remote graphql endpoint.\n */\nimport {\n    ensureNotFalsy,\n    getProperty\n} from '../../plugins/utils';\n\nimport {\n    graphQLRequest,\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem,\n    RxGraphQLReplicationQueryBuilderResponseObject,\n    RxGraphQLReplicationClientState\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket';\nimport { Subject } from 'rxjs';\n\n\n\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: RxGraphQLReplicationClientState,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: { [k: string]: string; }): void {\n        this.clientState.headers = headers;\n    }\n\n    setCredentials(credentials: RequestCredentials | undefined) {\n        this.clientState.credentials = credentials;\n    }\n\n    graphQLRequest(\n        queryParams: RxGraphQLReplicationQueryBuilderResponseObject\n    ) {\n        return graphQLRequest(\n            ensureNotFalsy(this.url.http),\n            this.clientState,\n            queryParams\n        );\n    }\n}\n\nexport function replicateGraphQL<RxDocType, CheckpointType>(\n    {\n        collection,\n        url,\n        headers = {},\n        credentials,\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        credentials\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await graphqlReplicationState.graphQLRequest(pullGraphQL);\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                let data: any = getProperty(result, dataPath);\n                if (pull.responseModifier) {\n                    data = await pull.responseModifier(\n                        data,\n                        'handler',\n                        lastPulledCheckpoint\n                    );\n                }\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                };\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await graphqlReplicationState.graphQLRequest(pushObj);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = push.dataPath || Object.keys(result.data)[0];\n                let data: any = getProperty(result.data, dataPath);\n\n                if (push.responseModifier) {\n                    data = await push.responseModifier(\n                        data,\n                    );\n                }\n\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + collection.database.hashFunction(url.http ? url.http : url.ws as any),\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const httpHeaders = pull.includeWsHeaders ? mutateableClientState.headers : undefined;\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws), httpHeaders);\n\n            wsClient.on('connected', () => {\n                pullStream$.next('RESYNC');\n            });\n\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\n\n            wsClient.subscribe(\n                query,\n                {\n                    next: async (streamResponse: any) => {\n                        const firstField = Object.keys(streamResponse.data)[0];\n                        let data = streamResponse.data[firstField];\n                        if (pull.responseModifier) {\n                            data = await pull.responseModifier(\n                                data,\n                                'stream'\n                            );\n                        }\n                        pullStream$.next(data);\n                    },\n                    error: (error: any) => {\n                        pullStream$.error(error);\n                    },\n                    complete: () => {\n                        pullStream$.complete();\n                    }\n                });\n        }\n        return startBefore();\n    };\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        if (!graphqlReplicationState.isStopped()) {\n            pullStream$.complete();\n            if (mustUseSocket) {\n                removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n            }\n        }\n        return cancelBefore();\n    };\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\nexport * from './graphql-websocket';\n"],"mappings":"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"}