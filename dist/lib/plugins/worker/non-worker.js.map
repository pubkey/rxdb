{"version":3,"file":"non-worker.js","names":["removeWorkerRef","instance","workerState","getFromMapOrThrow","WORKER_BY_INSTANCE","storage","refs","size","workerPromise","then","worker","Thread","terminate","Map","RxStorageWorker","settings","statics","name","createStorageInstance","params","get","spawn","Worker","workerInput","Set","set","instanceId","RxStorageInstanceWorker","databaseName","collectionName","schema","rxStorage","options","ensureNotFalsy","add","internals","changes$","Subject","conflicts$","subs","closed","push","changeStream","subscribe","ev","next","conflictResultionTasks","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","remove","resolveConflictResultionTask","_taskSolution","getRxStorageWorker"],"sources":["../../../../src/plugins/worker/non-worker.ts"],"sourcesContent":["import {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport {\n    spawn,\n    Worker,\n    Thread\n} from 'threads';\nimport type {\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxDocumentData,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageQueryResult,\n    EventBulk,\n    RxStorageStatics,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow\n} from '../../util';\nimport { InWorkerStorage } from './in-worker';\n\ndeclare type WorkerStorageInternals = {\n    rxStorage: RxStorageWorker;\n    instanceId: number;\n    worker: InWorkerStorage<any, any>;\n}\ndeclare type RxStorageWorkerSettings = {\n    statics: RxStorageStatics;\n    workerInput: any;\n}\n\n\n/**\n * We have no way to detect if a worker is no longer needed.\n * So we create the worker process on the first RxStorageInstance\n * and have to close it again of no more RxStorageInstances are non-closed.\n */\nconst WORKER_BY_INSTANCE: Map<RxStorageWorker, {\n    workerPromise: Promise<InWorkerStorage<any, any>>;\n    refs: Set<RxStorageInstanceWorker<any>>;\n}> = new Map();\n\nexport class RxStorageWorker implements RxStorage<WorkerStorageInternals, any> {\n    public name = 'worker';\n\n    constructor(\n        public readonly settings: RxStorageWorkerSettings,\n        public readonly statics: RxStorageStatics\n    ) { }\n\n    createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceWorker<RxDocType>> {\n        let workerState = WORKER_BY_INSTANCE.get(this);\n        if (!workerState) {\n            workerState = {\n                workerPromise: spawn<InWorkerStorage<RxDocType, any>>(new Worker(this.settings.workerInput)) as any,\n                refs: new Set()\n            };\n            WORKER_BY_INSTANCE.set(this, workerState);\n        }\n\n        return workerState.workerPromise.then(worker => {\n            return worker.createStorageInstance(params)\n                .then(instanceId => {\n                    const instance = new RxStorageInstanceWorker(\n                        this,\n                        params.databaseName,\n                        params.collectionName,\n                        params.schema,\n                        {\n                            rxStorage: this,\n                            instanceId,\n                            worker\n                        },\n                        params.options\n                    );\n                    ensureNotFalsy(workerState).refs.add(instance);\n                    return instance;\n                });\n        });\n    }\n}\n\n\nexport class RxStorageInstanceWorker<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    WorkerStorageInternals,\n    any,\n    any\n> {\n    /**\n     * threads.js uses observable-fns instead of rxjs\n     * so we have to transform it.\n     */\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n\n    constructor(\n        public readonly storage: RxStorageWorker,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: WorkerStorageInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.subs.push(\n            this.internals.worker.changeStream(\n                this.internals.instanceId\n            ).subscribe(ev => this.changes$.next(ev as any))\n        );\n        this.subs.push(\n            this.internals.worker.conflictResultionTasks(\n                this.internals.instanceId\n            ).subscribe(ev => this.conflicts$.next(ev as any))\n        );\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.internals.worker.bulkWrite(\n            this.internals.instanceId,\n            documentWrites,\n            context\n        );\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.internals.worker.findDocumentsById(\n            this.internals.instanceId,\n            ids,\n            deleted\n        );\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.internals.worker.query(\n            this.internals.instanceId,\n            preparedQuery\n        );\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.internals.worker.getAttachmentData(\n            this.internals.instanceId,\n            documentId,\n            attachmentId\n        );\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: any;\n    }> {\n        return this.internals.worker.getChangedDocumentsSince(\n            this.internals.instanceId,\n            limit,\n            checkpoint\n        );\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number) {\n        return this.internals.worker.cleanup(\n            this.internals.instanceId,\n            minDeletedTime\n        );\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        await this.internals.worker.close(\n            this.internals.instanceId\n        );\n        await removeWorkerRef(this);\n    }\n    async remove(): Promise<void> {\n        await this.internals.worker.remove(\n            this.internals.instanceId\n        );\n        this.closed = true;\n        await removeWorkerRef(this);\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport function getRxStorageWorker(\n    settings: RxStorageWorkerSettings\n): RxStorageWorker {\n    const storage = new RxStorageWorker(settings, settings.statics);\n    return storage;\n}\n\n/**\n * TODO we have a bug.\n * When the exact same RxStorage opens and closes\n * many RxStorage instances, then it might happen\n * that some calls to createStorageInstance() time out,\n * because the worker thread is in the closing state.\n */\nexport async function removeWorkerRef(\n    instance: RxStorageInstanceWorker<any>\n) {\n    const workerState = getFromMapOrThrow(WORKER_BY_INSTANCE, instance.storage);\n    workerState.refs.delete(instance);\n    if (workerState.refs.size === 0) {\n        WORKER_BY_INSTANCE.delete(instance.storage);\n        await workerState.workerPromise\n            .then(worker => Thread.terminate(worker as any));\n    }\n}\n"],"mappings":"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"}