{"version":3,"file":"index.js","names":["_utils","require","_leaderElection","_replication","_","_rxjs","_nats","_natsHelper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_replicationHelper","_natsTypes","RxNatsReplicationState","_RxReplicationState","_inheritsLoose2","default","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","_this","RxReplicationState","replicateNats","options","waitForLeadership","primaryPath","schema","addRxPlugin","RxDBLeaderElectionPlugin","jc","JSONCodec","connectionStatePromise","nc","connect","connection","jetstreamClient","jetstream","jsm","jetstreamManager","streams","add","name","streamName","subjects","subjectPrefix","natsStream","pullStream$","Subject","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","cn","newCheckpoint","sequence","consumer","getConsumer","opt_start_seq","deliver_policy","DeliverPolicy","LastPerSubject","replay_policy","ReplayPolicy","Instant","fetchedMessages","fetch","max_messages","signal","close","useMessages","m","json","seq","ack","documents","checkpoint","ensureNotFalsy","modifier","stream$","asObservable","replicationPrimitivesPush","rows","conflicts","Promise","all","map","writeRow","docId","newDocumentState","remoteDocState","getNatsServerDocumentState","err","message","includes","assumedMasterState","conflictHandler","realMasterState","isEqual","pushDone","publish","encode","expect","lastSubjectSequence","undefined","newServerState","replicationState","error","next","newRxError","document","errorToPlainJson","awaitRetry","NATS_REPLICATION_PLUGIN_IDENTITY_PREFIX","database","hashFunction","replicationIdentifier","startBefore","start","bind","cancelBefore","cancel","lastSeq","lastDocState","getMessage","last_by_subj","newMessages","consume","docData","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-nats/index.ts"],"sourcesContent":["import {\n    ensureNotFalsy,\n    errorToPlainJson\n} from '../../plugins/utils';\n\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    newRxError,\n    WithDeleted\n} from '../../';\n\nimport { Subject } from 'rxjs';\nimport type {\n    NatsCheckpointType,\n    NatsSyncOptions\n} from './nats-types';\nimport { connect, DeliverPolicy, JSONCodec, ReplayPolicy } from 'nats';\nimport { NATS_REPLICATION_PLUGIN_IDENTITY_PREFIX, getNatsServerDocumentState } from './nats-helper';\nimport { awaitRetry } from '../replication/replication-helper';\n\nexport * from './nats-types';\nexport * from './nats-helper';\n\n\nexport class RxNatsReplicationState<RxDocType> extends RxReplicationState<RxDocType, NatsCheckpointType> {\n    constructor(\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, NatsCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\n\n\nexport function replicateNats<RxDocType>(\n    options: NatsSyncOptions<RxDocType>\n): RxNatsReplicationState<RxDocType> {\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n\n    const collection = options.collection;\n    const primaryPath = collection.schema.primaryPath;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n\n    const jc = JSONCodec();\n\n\n    const connectionStatePromise = (async () => {\n        const nc = await connect(options.connection);\n        const jetstreamClient = nc.jetstream();\n        const jsm = await nc.jetstreamManager();\n        await jsm.streams.add({\n            name: options.streamName, subjects: [\n                options.subjectPrefix + '.*'\n            ]\n        });\n        const natsStream = await jetstreamClient.streams.get(options.streamName);\n        return {\n            nc,\n            jetstreamClient,\n            jsm,\n            natsStream\n        };\n    })();\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, NatsCheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, NatsCheckpointType> | undefined;\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: NatsCheckpointType,\n                batchSize: number\n            ) {\n                const cn = await connectionStatePromise;\n                const newCheckpoint: NatsCheckpointType = {\n                    sequence: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0\n                };\n                const consumer = await cn.natsStream.getConsumer({\n                    opt_start_seq: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0,\n                    deliver_policy: DeliverPolicy.LastPerSubject,\n                    replay_policy: ReplayPolicy.Instant\n                });\n\n                const fetchedMessages = await consumer.fetch({\n                    max_messages: batchSize\n                });\n                await (fetchedMessages as any).signal;\n                await fetchedMessages.close();\n\n                const useMessages: WithDeleted<RxDocType>[] = [];\n                for await (const m of fetchedMessages) {\n                    useMessages.push(m.json());\n                    newCheckpoint.sequence = m.seq;\n                    m.ack();\n                }\n                return {\n                    documents: useMessages,\n                    checkpoint: newCheckpoint\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const cn = await connectionStatePromise;\n                const conflicts: WithDeleted<RxDocType>[] = [];\n                await Promise.all(\n                    rows.map(async (writeRow) => {\n                        const docId = (writeRow.newDocumentState as any)[primaryPath];\n\n                        /**\n                         * first get the current state of the documents from the server\n                         * so that we have the sequence number for conflict detection.\n                         */\n                        let remoteDocState;\n                        try {\n                            remoteDocState = await getNatsServerDocumentState(\n                                cn.natsStream,\n                                options.subjectPrefix,\n                                docId\n                            );\n                        } catch (err: Error | any) {\n                            if (!err.message.includes('no message found')) {\n                                throw err;\n                            }\n                        }\n\n                        if (\n                            remoteDocState &&\n                            (\n                                !writeRow.assumedMasterState ||\n                                (await collection.conflictHandler({\n                                    newDocumentState: remoteDocState.json(),\n                                    realMasterState: writeRow.assumedMasterState\n                                }, 'replication-firestore-push')).isEqual === false\n                            )\n                        ) {\n                            // conflict\n                            conflicts.push(remoteDocState.json());\n                        } else {\n                            // no conflict (yet)\n                            let pushDone = false;\n                            while (!pushDone) {\n                                try {\n                                    await cn.jetstreamClient.publish(\n                                        options.subjectPrefix + '.' + docId,\n                                        jc.encode(writeRow.newDocumentState),\n                                        {\n                                            expect: remoteDocState ? {\n                                                streamName: options.streamName,\n                                                lastSubjectSequence: remoteDocState.seq\n                                            } : undefined\n                                        }\n                                    );\n                                    pushDone = true;\n                                } catch (err: Error | any) {\n                                    if (err.message.includes('wrong last sequence')) {\n                                        // A write happened while we are doing our write -> handle conflict\n                                        const newServerState = await getNatsServerDocumentState(\n                                            cn.natsStream,\n                                            options.subjectPrefix,\n                                            docId\n                                        );\n                                        conflicts.push(ensureNotFalsy(newServerState).json());\n                                        pushDone = true;\n                                    } else {\n                                        replicationState.subjects.error.next(\n                                            newRxError('RC_STREAM', {\n                                                document: writeRow.newDocumentState,\n                                                error: errorToPlainJson(err)\n                                            })\n                                        );\n\n                                        // -> retry after wait\n                                        await awaitRetry(\n                                            collection,\n                                            replicationState.retryTime\n                                        );\n                                    }\n                                }\n                            }\n                        }\n                    })\n                );\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n\n    const replicationState = new RxNatsReplicationState<RxDocType>(\n        NATS_REPLICATION_PLUGIN_IDENTITY_PREFIX + options.collection.database.hashFunction(options.replicationIdentifier),\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = async () => {\n            const cn = await connectionStatePromise;\n\n            /**\n             * First get the last sequence so that we can\n             * laster only fetch 'newer' messages.\n             */\n            let lastSeq = 0;\n            try {\n                const lastDocState = await cn.natsStream.getMessage({\n                    last_by_subj: options.subjectPrefix + '.*'\n                });\n                lastSeq = lastDocState.seq;\n            } catch (err: any | Error) {\n                if (!err.message.includes('no message found')) {\n                    throw err;\n                }\n            }\n\n            const consumer = await cn.natsStream.getConsumer({\n                opt_start_seq: lastSeq\n            });\n            const newMessages = await consumer.consume();\n            (async () => {\n                for await (const m of newMessages) {\n                    const docData: WithDeleted<RxDocType> = m.json();\n                    pullStream$.next({\n                        documents: [docData],\n                        checkpoint: {\n                            sequence: m.seq\n                        }\n                    });\n                    m.ack();\n                }\n            })();\n            replicationState.cancel = () => {\n                newMessages.close();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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"}