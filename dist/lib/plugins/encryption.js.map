{"version":3,"file":"encryption.js","names":["body","recover","result","e","then","MINIMUM_PASSWORD_LENGTH","encryptString","value","password","encrypted","AES","encrypt","toString","decryptString","cipherText","newRxError","args","decrypted","decrypt","ret","cryptoEnc","wrappedKeyEncryptionStorage","Object","assign","storage","createStorageInstance","params","database","databaseName","collection","collectionName","schema","schemaWithoutEncrypted","clone","attachments","modifyToStorage","docData","cloneWithoutAttachments","ensureNotFalsy","forEach","path","objectPath","get","stringValue","JSON","stringify","set","newAttachments","entries","_attachments","id","attachment","useAttachment","flatClone","data","dataString","b64EncodeUnicode","modifyFromStorage","decryptedParsed","parse","modifyAttachmentFromStorage","attachmentData","b64DecodeUnicode","instance","wrapRxStorageInstance","hasEncryption","retInstance","title","INTERNAL_STORE_SCHEMA_TITLE","validatePassword","err","close","newRxTypeError","length","minPassLength"],"sources":["../../../src/plugins/encryption.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\nimport objectPath from 'object-path';\nimport { wrapRxStorageInstance } from '../plugin-helpers';\nimport {\n    INTERNAL_STORE_SCHEMA_TITLE\n} from '../rx-database-internal-store';\nimport { newRxError, newRxTypeError } from '../rx-error';\nimport { hasEncryption } from '../rx-storage-helper';\nimport type {\n    InternalStoreDocType,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../types';\nimport {\n    b64DecodeUnicode,\n    b64EncodeUnicode,\n    clone,\n    ensureNotFalsy,\n    flatClone\n} from '../util';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc);\n    return ret;\n}\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\nexport function wrappedKeyEncryptionStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (!hasEncryption(params.schema)) {\n                    const retInstance = await args.storage.createStorageInstance(params);\n                    if (\n                        params.schema.title === INTERNAL_STORE_SCHEMA_TITLE &&\n                        params.password\n                    ) {\n                        try {\n                            validatePassword(params.password);\n                        } catch (err) {\n                            /**\n                             * Even if the checks fail,\n                             * we have to clean up.\n                             */\n                            await retInstance.close();\n                            throw err;\n                        }\n                    }\n                    return retInstance;\n                }\n\n                if (!params.password) {\n                    throw newRxError('EN3', {\n                        database: params.databaseName,\n                        collection: params.collectionName,\n                        schema: params.schema\n                    });\n                }\n                const password = params.password;\n\n                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);\n                delete schemaWithoutEncrypted.encrypted;\n                if (schemaWithoutEncrypted.attachments) {\n                    schemaWithoutEncrypted.attachments.encrypted = false;\n                }\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: schemaWithoutEncrypted\n                        }\n                    )\n                );\n\n                function modifyToStorage(docData: RxDocumentData<RxDocType>) {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = objectPath.get(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n\n                            const stringValue = JSON.stringify(value);\n                            const encrypted = encryptString(stringValue, password);\n                            objectPath.set(docData, path, encrypted);\n                        });\n\n                    // handle attachments\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const newAttachments: typeof docData._attachments = {};\n                        Object.entries(docData._attachments).forEach(([id, attachment]) => {\n                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;\n                            if (useAttachment.data) {\n                                const dataString = useAttachment.data;\n                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));\n                            }\n                            newAttachments[id] = useAttachment;\n                        });\n                        docData._attachments = newAttachments;\n                    }\n                    return docData;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = objectPath.get(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n                            const decrypted = decryptString(value, password);\n                            const decryptedParsed = JSON.parse(decrypted);\n                            objectPath.set(docData, path, decryptedParsed);\n                        });\n                    return docData;\n                }\n\n                function modifyAttachmentFromStorage(attachmentData: string): string {\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);\n                        return decrypted;\n                    } else {\n                        return attachmentData;\n                    }\n                }\n\n                return wrapRxStorageInstance(\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage,\n                    modifyAttachmentFromStorage\n                );\n            }\n        }\n    );\n}\n\n\n\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data;\n}\n\nfunction validatePassword(password: any) {\n    if (password && typeof password !== 'string') {\n        throw newRxTypeError('EN1', {\n            password\n        });\n    }\n    if (password && password.length < MINIMUM_PASSWORD_LENGTH) {\n        throw newRxError('EN2', {\n            minPassLength: MINIMUM_PASSWORD_LENGTH,\n            password\n        });\n    }\n}\n"],"mappings":"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"}