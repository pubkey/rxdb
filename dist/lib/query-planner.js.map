{"version":3,"file":"query-planner.js","names":["INDEX_MAX","String","fromCharCode","INDEX_MIN","Infinity","getQueryPlan","schema","query","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","selector","indexes","slice","index","push","optimalSortIndex","sort","map","sortField","Object","keys","optimalSortIndexCompareString","join","hasDescSorting","find","values","currentBestQuality","currentBestQueryPlan","forEach","inclusiveEnd","inclusiveStart","opts","indexField","matcher","operators","matcherOpts","length","startKey","endKey","operator","LOGICAL_OPERATORS","has","operatorValue","partialOpts","getMatcherQueryOpts","assign","queryPlan","startKeys","opt","endKeys","sortFieldsSameAsIndexFields","selectorSatisfiedByIndex","isSelectorSatisfiedByIndex","quality","rateQueryPlan","Set","LOWER_BOUND_LOGICAL_OPERATORS","UPPER_BOUND_LOGICAL_OPERATORS","selectorEntries","entries","hasNonMatchingOperator","fieldName","operation","includes","hasNonLogicOperator","op","_value","prevLowerBoundaryField","hasMoreThenOneLowerBoundaryField","hasLowerLogicOp","key","prevUpperBoundaryField","hasMoreThenOneUpperBoundaryField","hasUpperLogicOp","Error","pointsPerMatchingKey","idxOfFirstMinStartKey","findIndex","keyValue","idxOfFirstMaxEndKey","pointsIfNoReSortMustBeDone"],"sources":["../../src/query-planner.ts"],"sourcesContent":["import { getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type {\n    FilledMangoQuery,\n    MangoQuerySelector,\n    RxDocumentData,\n    RxJsonSchema,\n    RxQueryPlan,\n    RxQueryPlanerOpts\n} from './types';\n\n\nexport const INDEX_MAX = String.fromCharCode(65535);\nexport const INDEX_MIN = -Infinity;\n\n/**\n * Returns the query plan which contains\n * information about how to run the query\n * and which indexes to use.\n * \n * This is used in some storage like Memory, dexie.js and IndexedDB.\n */\nexport function getQueryPlan<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>\n): RxQueryPlan {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const selector = query.selector;\n\n    let indexes: string[][] = schema.indexes ? schema.indexes.slice(0) as any : [];\n    if (query.index) {\n        indexes = [query.index];\n    } else {\n        indexes.push([primaryPath]);\n    }\n\n    const optimalSortIndex = query.sort.map(sortField => Object.keys(sortField)[0]);\n    const optimalSortIndexCompareString = optimalSortIndex.join(',');\n    /**\n     * Most storages do not support descending indexes\n     * so having a 'desc' in the sorting, means we always have to re-sort the results.\n     */\n    const hasDescSorting = !!query.sort.find(sortField => Object.values(sortField)[0] === 'desc')\n\n    let currentBestQuality = -1;\n    let currentBestQueryPlan: RxQueryPlan | undefined;\n\n    indexes.forEach((index) => {\n        let inclusiveEnd = true;\n        let inclusiveStart = true;\n        const opts: RxQueryPlanerOpts[] = index.map(indexField => {\n            const matcher = selector[indexField];\n            const operators = matcher ? Object.keys(matcher) : [];\n\n            let matcherOpts: RxQueryPlanerOpts = {} as any;\n\n            if (\n                !matcher ||\n                !operators.length\n            ) {\n                matcherOpts = {\n                    startKey: inclusiveStart ? INDEX_MIN : INDEX_MAX,\n                    endKey: inclusiveEnd ? INDEX_MAX : INDEX_MIN,\n                    inclusiveStart: true,\n                    inclusiveEnd: true\n                };\n            } else {\n                operators.forEach(operator => {\n                    if (LOGICAL_OPERATORS.has(operator)) {\n                        const operatorValue = matcher[operator];\n                        const partialOpts = getMatcherQueryOpts(operator, operatorValue);\n                        matcherOpts = Object.assign(matcherOpts, partialOpts);\n                    }\n                });\n            }\n\n            // fill missing attributes\n            if (typeof matcherOpts.startKey === 'undefined') {\n                matcherOpts.startKey = INDEX_MIN;\n            }\n            if (typeof matcherOpts.endKey === 'undefined') {\n                matcherOpts.endKey = INDEX_MAX;\n            }\n            if (typeof matcherOpts.inclusiveStart === 'undefined') {\n                matcherOpts.inclusiveStart = true;\n            }\n            if (typeof matcherOpts.inclusiveEnd === 'undefined') {\n                matcherOpts.inclusiveEnd = true;\n            }\n\n\n            if (inclusiveStart && !matcherOpts.inclusiveStart) {\n                inclusiveStart = false;\n            }\n            if (inclusiveEnd && !matcherOpts.inclusiveEnd) {\n                inclusiveEnd = false;\n            }\n\n            return matcherOpts;\n        });\n\n        const queryPlan: RxQueryPlan = {\n            index,\n            startKeys: opts.map(opt => opt.startKey),\n            endKeys: opts.map(opt => opt.endKey),\n            inclusiveEnd,\n            inclusiveStart,\n            sortFieldsSameAsIndexFields: !hasDescSorting && optimalSortIndexCompareString === index.join(','),\n            selectorSatisfiedByIndex: isSelectorSatisfiedByIndex(index, query.selector)\n        };\n        const quality = rateQueryPlan(\n            schema,\n            query,\n            queryPlan\n        );\n        if (\n            (\n                quality > 0 &&\n                quality > currentBestQuality\n            ) ||\n            query.index\n        ) {\n            currentBestQuality = quality;\n            currentBestQueryPlan = queryPlan;\n        }\n    });\n\n    /**\n     * No index found, use the default index\n     */\n    if (!currentBestQueryPlan) {\n        currentBestQueryPlan = {\n            index: [primaryPath],\n            startKeys: [INDEX_MIN],\n            endKeys: [INDEX_MAX],\n            inclusiveEnd: true,\n            inclusiveStart: true,\n            sortFieldsSameAsIndexFields: !hasDescSorting && optimalSortIndexCompareString === primaryPath,\n            selectorSatisfiedByIndex: isSelectorSatisfiedByIndex([primaryPath], query.selector)\n        }\n    }\n\n    return currentBestQueryPlan;\n}\n\nexport const LOGICAL_OPERATORS = new Set(['$eq', '$gt', '$gte', '$lt', '$lte']);\nexport const LOWER_BOUND_LOGICAL_OPERATORS = new Set(['$eq', '$gt', '$gte']);\nexport const UPPER_BOUND_LOGICAL_OPERATORS = new Set(['$eq', '$lt', '$lte']);\n\nexport function isSelectorSatisfiedByIndex(\n    index: string[],\n    selector: MangoQuerySelector\n): boolean {\n    const selectorEntries = Object.entries(selector);\n    const hasNonMatchingOperator = selectorEntries\n        .find(([fieldName, operation]) => {\n            if (!index.includes(fieldName)) {\n                return true;\n            }\n            const hasNonLogicOperator = Object.entries(operation)\n                .find(([op, _value]) => !LOGICAL_OPERATORS.has(op));\n            return hasNonLogicOperator;\n        });\n    if (hasNonMatchingOperator) {\n        return false;\n    }\n\n\n    let prevLowerBoundaryField: any;\n    const hasMoreThenOneLowerBoundaryField = index.find(fieldName => {\n        const operation = selector[fieldName];\n        if (!operation) {\n            return false;\n        }\n        const hasLowerLogicOp = Object.keys(operation).find(key => LOWER_BOUND_LOGICAL_OPERATORS.has(key));\n        if (prevLowerBoundaryField && hasLowerLogicOp) {\n            return true;\n        } else if (hasLowerLogicOp !== '$eq') {\n            prevLowerBoundaryField = hasLowerLogicOp;\n        }\n        return false;\n    });\n    if (hasMoreThenOneLowerBoundaryField) {\n        return false;\n    }\n\n    let prevUpperBoundaryField: any;\n    const hasMoreThenOneUpperBoundaryField = index.find(fieldName => {\n        const operation = selector[fieldName];\n        if (!operation) {\n            return false;\n        }\n        const hasUpperLogicOp = Object.keys(operation).find(key => UPPER_BOUND_LOGICAL_OPERATORS.has(key));\n        if (prevUpperBoundaryField && hasUpperLogicOp) {\n            return true;\n        } else if (hasUpperLogicOp !== '$eq') {\n            prevUpperBoundaryField = hasUpperLogicOp;\n        }\n        return false;\n    });\n    if (hasMoreThenOneUpperBoundaryField) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getMatcherQueryOpts(\n    operator: string,\n    operatorValue: any\n): Partial<RxQueryPlanerOpts> {\n    switch (operator) {\n        case '$eq':\n            return {\n                startKey: operatorValue,\n                endKey: operatorValue\n            };\n        case '$lte':\n            return {\n                endKey: operatorValue\n            };\n        case '$gte':\n            return {\n                startKey: operatorValue\n            };\n        case '$lt':\n            return {\n                endKey: operatorValue,\n                inclusiveEnd: false\n            };\n        case '$gt':\n            return {\n                startKey: operatorValue,\n                inclusiveStart: false\n            };\n        default:\n            throw new Error('SNH');\n    }\n}\n\n\n/**\n * Returns a number that determines the quality of the query plan.\n * Higher number means better query plan.\n */\nexport function rateQueryPlan<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>,\n    queryPlan: RxQueryPlan\n): number {\n    let quality: number = 0;\n\n    const pointsPerMatchingKey = 10;\n    const idxOfFirstMinStartKey = queryPlan.startKeys.findIndex(keyValue => keyValue === INDEX_MIN);\n    if (idxOfFirstMinStartKey > 0) {\n        quality = quality + (idxOfFirstMinStartKey * pointsPerMatchingKey);\n    }\n\n    const idxOfFirstMaxEndKey = queryPlan.endKeys.findIndex(keyValue => keyValue === INDEX_MAX);\n    if (idxOfFirstMaxEndKey > 0) {\n        quality = quality + (idxOfFirstMaxEndKey * pointsPerMatchingKey);\n    }\n\n    const pointsIfNoReSortMustBeDone = 5;\n    if (queryPlan.sortFieldsSameAsIndexFields) {\n        quality = quality + pointsIfNoReSortMustBeDone;\n    }\n\n    return quality;\n}\n"],"mappings":"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"}