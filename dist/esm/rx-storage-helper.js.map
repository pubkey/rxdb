{"version":3,"file":"rx-storage-helper.js","names":["overwritable","newRxError","getPrimaryFieldOfPrimaryKey","PROMISE_RESOLVE_TRUE","RXDB_VERSION","RX_META_LWT_MINIMUM","appendToArray","createRevision","ensureNotFalsy","flatClone","getFromMapOrCreate","lastOfArray","now","promiseWait","randomToken","filter","map","startWith","switchMap","normalizeMangoQuery","prepareQuery","runPluginHooks","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","undefined","writeSingle","instance","writeRow","context","writeResult","bulkWrite","error","length","primaryPath","schema","primaryKey","success","getWrittenDocumentsFromBulkWriteResponse","ret","observeSingle","firstFindPromise","changeStream","pipe","evBulk","events","find","ev","Promise","resolve","documentData","v","stackCheckpoints","checkpoints","Object","assign","x","throwIfIsStorageWriteError","collection","writeData","status","name","id","writeError","data","categorizeBulkWriteRows","docsInDb","bulkWriteRows","onInsert","onUpdate","hasAttachments","attachments","bulkInsertDocs","bulkUpdateDocs","errors","eventBulkId","eventBulk","checkpoint","eventBulkEvents","attachmentsAdd","attachmentsRemove","attachmentsUpdate","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","document","previous","docId","documentDeleted","_deleted","previousDeleted","documentInDb","get","attachmentError","insertedIsDeleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","digest","stripAttachmentsDataFromRow","event","operation","stripAttachmentsDataFromDocument","previousDocumentData","revInDb","_rev","err","updatedRow","keys","previousAttachmentData","newDigest","eventDocumentData","previousEventDocumentData","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatCloneDocWithMeta","_meta","getWrappedStorageInstance","database","rxJsonSchema","deepFreezeWhenDevMode","originalStorageInstance","internals","collectionName","databaseName","options","rows","databaseToken","token","toStorageWriteRows","Array","time","index","lwt","lockedRun","useWriteResult","BULK_WRITE_ROWS_BY_RESPONSE","set","reInsertErrors","reInsertIds","Set","reInserts","add","subResult","successArray","subSuccess","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","compression","jsonSchema","encrypted","getChangedDocumentsSinceQuery","sinceLwt","sinceId","selector","$or","$gt","$eq","$gte","sort","skip","result","documents","lastDoc","WeakMap","BULK_WRITE_SUCCESS_MAP","writeRows","response","realWriteRows","errorIds","has","randomDelayStorage","input","randomDelayStorageWriteQueue","retStorage","storage","rxdbVersion","createStorageInstance","delayTimeBefore","delayTimeAfter","a","b","then","c"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable.ts';\nimport { newRxError } from './rx-error.ts';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment,\n    RxStorage,\n    RxStorageDefaultCheckpoint,\n    FilledMangoQuery,\n    RxStorageBulkWriteResponse\n} from './types/index.d.ts';\nimport {\n    PROMISE_RESOLVE_TRUE,\n    RXDB_VERSION,\n    RX_META_LWT_MINIMUM,\n    appendToArray,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getFromMapOrCreate,\n    lastOfArray,\n    now,\n    promiseWait,\n    randomToken\n} from './plugins/utils/index.ts';\nimport { Observable, filter, map, startWith, switchMap } from 'rxjs';\nimport { normalizeMangoQuery, prepareQuery } from './rx-query-helper.ts';\nimport { runPluginHooks } from './hooks.ts';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | undefined> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[0];\n    if (doc) {\n        return doc;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (writeResult.error.length > 0) {\n        const error = writeResult.error[0];\n        throw error;\n    } else {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n        const success = getWrittenDocumentsFromBulkWriteResponse(primaryPath, [writeRow], writeResult);\n        const ret = success[0];\n        return ret;\n    }\n}\n\n/**\n * Observe the plain document data of a single document.\n * Do not forget to unsubscribe.\n */\nexport function observeSingle<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Observable<RxDocumentData<RxDocType>> {\n    const firstFindPromise = getSingleDocument(storageInstance, documentId);\n    const ret = storageInstance\n        .changeStream()\n        .pipe(\n            map(evBulk => evBulk.events.find(ev => ev.documentId === documentId)),\n            filter(ev => !!ev),\n            map(ev => Promise.resolve(ensureNotFalsy(ev).documentData)),\n            startWith(firstFindPromise),\n            switchMap(v => v),\n            filter(v => !!v)\n        ) as any;\n    return ret;\n}\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: (CheckpointType | undefined)[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints.filter(x => !!x)\n    );\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType, any, any>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This must be a Map for better performance.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string,\n    /**\n     * Used by some storages for better performance.\n     * For example when get-by-id and insert/update can run in parallel.\n     */\n    onInsert?: (docData: RxDocumentData<RxDocType>) => void,\n    onUpdate?: (docData: RxDocumentData<RxDocType>) => void\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: RxStorageWriteError<RxDocType>[] = [];\n    const eventBulkId = randomToken(10);\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: eventBulkId,\n        events: [],\n        checkpoint: null,\n        context\n    };\n    const eventBulkEvents = eventBulk.events;\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n        digest: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n\n    const hasDocsInDb = docsInDb.size > 0;\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\n\n    /**\n     * @performance is really important in this loop!\n     */\n    const rowAmount = bulkWriteRows.length;\n    for (let rowId = 0; rowId < rowAmount; rowId++) {\n        const writeRow = bulkWriteRows[rowId];\n\n        // use these variables to have less property accesses\n        const document = writeRow.document;\n        const previous = writeRow.previous;\n        const docId = document[primaryPath] as string;\n        const documentDeleted = document._deleted;\n        const previousDeleted = previous && previous._deleted;\n\n        let documentInDb: RxDocumentData<RxDocType> | undefined = undefined as any;\n        if (hasDocsInDb) {\n            documentInDb = docsInDb.get(docId);\n        }\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = documentDeleted ? true : false;\n            if (hasAttachments) {\n                Object\n                    .entries(document._attachments)\n                    .forEach(([attachmentId, attachmentData]) => {\n                        if (\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: docId,\n                                isError: true,\n                                status: 510,\n                                writeRow,\n                                attachmentId\n                            };\n                            errors.push(attachmentError);\n                        } else {\n                            attachmentsAdd.push({\n                                documentId: docId,\n                                attachmentId,\n                                attachmentData: attachmentData as any,\n                                digest: attachmentData.digest\n                            });\n                        }\n                    });\n            }\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                    if (onInsert) {\n                        onInsert(document);\n                    }\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                    if (onInsert) {\n                        onInsert(document);\n                    }\n                }\n\n                newestRow = writeRow as any;\n            }\n\n            if (!insertedIsDeleted) {\n                const event = {\n                    documentId: docId,\n                    operation: 'INSERT' as const,\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any,\n                    previousDocumentData: hasAttachments && previous ? stripAttachmentsDataFromDocument(previous) : previous as any\n                };\n                eventBulkEvents.push(event);\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !previous\n                ) ||\n                (\n                    !!previous &&\n                    revInDb !== previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: docId,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                continue;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (hasAttachments) {\n                if (documentDeleted) {\n                    /**\n                     * Deleted documents must have cleared all their attachments.\n                     */\n                    if (previous) {\n                        Object\n                            .keys(previous._attachments)\n                            .forEach(attachmentId => {\n                                attachmentsRemove.push({\n                                    documentId: docId,\n                                    attachmentId,\n                                    digest: ensureNotFalsy(previous)._attachments[attachmentId].digest\n                                });\n                            });\n                    }\n                } else {\n                    // first check for errors\n                    Object\n                        .entries(document._attachments)\n                        .find(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                            if (\n                                !previousAttachmentData &&\n                                !(attachmentData as RxAttachmentWriteData).data\n                            ) {\n                                attachmentError = {\n                                    documentId: docId,\n                                    documentInDb: documentInDb as any,\n                                    isError: true,\n                                    status: 510,\n                                    writeRow,\n                                    attachmentId\n                                };\n                            }\n                            return true;\n                        });\n                    if (!attachmentError) {\n                        Object\n                            .entries(document._attachments)\n                            .forEach(([attachmentId, attachmentData]) => {\n                                const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                                if (!previousAttachmentData) {\n                                    attachmentsAdd.push({\n                                        documentId: docId,\n                                        attachmentId,\n                                        attachmentData: attachmentData as any,\n                                        digest: attachmentData.digest\n                                    });\n                                } else {\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                    if (\n                                        (attachmentData as RxAttachmentWriteData).data &&\n                                        /**\n                                         * Performance shortcut,\n                                         * do not update the attachment data if it did not change.\n                                         */\n                                        previousAttachmentData.digest !== newDigest\n                                    ) {\n                                        attachmentsUpdate.push({\n                                            documentId: docId,\n                                            attachmentId,\n                                            attachmentData: attachmentData as RxAttachmentWriteData,\n                                            digest: attachmentData.digest\n                                        });\n                                    }\n                                }\n                            });\n                    }\n                }\n            }\n\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(updatedRow));\n                    if (onUpdate) {\n                        onUpdate(document);\n                    }\n                } else {\n                    bulkUpdateDocs.push(updatedRow);\n                    if (onUpdate) {\n                        onUpdate(document);\n                    }\n                }\n                newestRow = updatedRow as any;\n            }\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (previousDeleted && !documentDeleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n            } else if (previous && !previousDeleted && !documentDeleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n                previousEventDocumentData = previous;\n            } else if (documentDeleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(document) as any;\n                previousEventDocumentData = previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            const event = {\n                documentId: docId,\n                documentData: eventDocumentData as RxDocumentData<RxDocType>,\n                previousDocumentData: previousEventDocumentData,\n                operation: operation\n            };\n            eventBulkEvents.push(event);\n        }\n    }\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        newestRow,\n        errors,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        length: getAttachmentSize(data),\n        digest: writeData.digest,\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    if (!doc._attachments || Object.keys(doc._attachments).length === 0) {\n        return doc;\n    }\n\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    return Object.assign(\n        {},\n        doc,\n        {\n            _meta: flatClone(doc._meta)\n        }\n    );\n}\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions, any>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        async bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const databaseToken = database.token;\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = new Array(rows.length);\n            /**\n             * Use the same timestamp for all docs of this rows-set.\n             * This improves performance because calling Date.now() inside of the now() function\n             * is too costly.\n             */\n            const time = now();\n            for (let index = 0; index < rows.length; index++) {\n                const writeRow = rows[index];\n                const document = flatCloneDocWithMeta(writeRow.document);\n                document._meta.lwt = time;\n\n                /**\n                 * Yes we really want to set the revision here.\n                 * If you make a plugin that relies on having its own revision\n                 * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n                 */\n                const previous = writeRow.previous;\n                document._rev = createRevision(\n                    databaseToken,\n                    previous\n                );\n                toStorageWriteRows[index] = {\n                    document,\n                    previous\n                };\n            }\n\n            runPluginHooks('preStorageWrite', {\n                storageInstance: this.originalStorageInstance,\n                rows: toStorageWriteRows\n            });\n\n            const writeResult = await database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            );\n\n            /**\n             * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n             * without sending the previous document version.\n             * But for better developer experience, RxDB does allow to re-insert deleted documents.\n             * We do this by automatically fixing the conflict errors for that case\n             * by running another bulkWrite() and merging the results.\n             * @link https://github.com/pubkey/rxdb/pull/3839\n            */\n            const useWriteResult: typeof writeResult = {\n                error: []\n            };\n            BULK_WRITE_ROWS_BY_RESPONSE.set(useWriteResult, toStorageWriteRows);\n\n            const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] = writeResult.error.length === 0\n                ? []\n                : writeResult.error\n                    .filter((error) => {\n                        if (\n                            error.status === 409 &&\n                            !error.writeRow.previous &&\n                            !error.writeRow.document._deleted &&\n                            ensureNotFalsy(error.documentInDb)._deleted\n                        ) {\n                            return true;\n                        }\n\n                        // add the \"normal\" errors to the parent error array.\n                        useWriteResult.error.push(error);\n                        return false;\n                    }) as any;\n            if (reInsertErrors.length > 0) {\n                const reInsertIds = new Set<string>();\n                const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                    .map((error) => {\n                        reInsertIds.add(error.documentId);\n                        return {\n                            previous: error.documentInDb,\n                            document: Object.assign(\n                                {},\n                                error.writeRow.document,\n                                {\n                                    _rev: createRevision(\n                                        database.token,\n                                        error.documentInDb\n                                    )\n                                }\n                            )\n                        };\n                    });\n\n                const subResult = await database.lockedRun(\n                    () => storageInstance.bulkWrite(\n                        reInserts,\n                        context\n                    )\n                );\n\n                appendToArray(useWriteResult.error, subResult.error);\n                const successArray = getWrittenDocumentsFromBulkWriteResponse(\n                    primaryPath,\n                    toStorageWriteRows,\n                    useWriteResult,\n                    reInsertIds\n                );\n                const subSuccess = getWrittenDocumentsFromBulkWriteResponse(\n                    primaryPath,\n                    reInserts,\n                    subResult\n                );\n                appendToArray(successArray, subSuccess);\n                return useWriteResult;\n            }\n            return useWriteResult;\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string,\n            digest: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId, digest)\n            );\n        },\n        getChangedDocumentsSince: !storageInstance.getChangedDocumentsSince ? undefined : (limit: number, checkpoint?: any) => {\n            return database.lockedRun(\n                () => ((storageInstance as any).getChangedDocumentsSince)(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        }\n    };\n\n    database.storageInstances.add(ret);\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n    if (\n        params.schema.attachments &&\n        params.schema.attachments.compression\n    ) {\n        throw newRxError('UT7', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function getChangedDocumentsSinceQuery<RxDocType, CheckpointType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any, CheckpointType>,\n    limit: number,\n    checkpoint?: CheckpointType\n): FilledMangoQuery<RxDocType> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n    const sinceLwt = checkpoint ? (checkpoint as unknown as RxStorageDefaultCheckpoint).lwt : RX_META_LWT_MINIMUM;\n    const sinceId = checkpoint ? (checkpoint as unknown as RxStorageDefaultCheckpoint).id : '';\n    return normalizeMangoQuery(storageInstance.schema, {\n        selector: {\n            $or: [\n                {\n                    '_meta.lwt': {\n                        $gt: sinceLwt\n                    }\n                },\n                {\n                    '_meta.lwt': {\n                        $eq: sinceLwt\n                    },\n                    [primaryPath]: {\n                        $gt: checkpoint ? sinceId : ''\n                    }\n                }\n            ],\n            // add this hint for better index usage\n            '_meta.lwt': {\n                $gte: sinceLwt\n            }\n        } as any,\n        sort: [\n            { '_meta.lwt': 'asc' },\n            { [primaryPath]: 'asc' }\n        ] as any,\n        skip: 0,\n        limit,\n        /**\n         * DO NOT SET A SPECIFIC INDEX HERE!\n         * The query might be modified by some plugin\n         * before sending it to the storage.\n         * We can be sure that in the end the query planner\n         * will find the best index.\n         */\n        // index: ['_meta.lwt', primaryPath]\n    });\n}\n\nexport async function getChangedDocumentsSince<RxDocType, CheckpointType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any, CheckpointType>,\n    limit: number,\n    checkpoint?: CheckpointType\n): Promise<{\n    documents: RxDocumentData<RxDocType>[];\n    /**\n     * The checkpoint contains data so that another\n     * call to getChangedDocumentsSince() will continue\n     * from exactly the last document that was returned before.\n     */\n    checkpoint: CheckpointType;\n}> {\n    if (storageInstance.getChangedDocumentsSince) {\n        return storageInstance.getChangedDocumentsSince(limit, checkpoint);\n    }\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n    const query = prepareQuery<RxDocumentData<any>>(\n        storageInstance.schema,\n        getChangedDocumentsSinceQuery(\n            storageInstance,\n            limit,\n            checkpoint\n        )\n    );\n\n    const result = await storageInstance.query(query);\n    const documents = result.documents;\n    const lastDoc = lastOfArray(documents);\n\n    return {\n        documents: documents,\n        checkpoint: lastDoc ? {\n            id: (lastDoc as any)[primaryPath],\n            lwt: lastDoc._meta.lwt\n        } as any : checkpoint ? checkpoint : {\n            id: '',\n            lwt: 0\n        }\n    };\n}\n\n\nconst BULK_WRITE_ROWS_BY_RESPONSE = new WeakMap<RxStorageBulkWriteResponse<any>, BulkWriteRow<any>[]>();\nconst BULK_WRITE_SUCCESS_MAP = new WeakMap<RxStorageBulkWriteResponse<any>, RxDocumentData<any>[]>();\n\n/**\n * For better performance, this is done only when accessed\n * because most of the time we do not need the results, only the errors.\n */\nexport function getWrittenDocumentsFromBulkWriteResponse<RxDocType>(\n    primaryPath: string,\n    writeRows: BulkWriteRow<RxDocType>[],\n    response: RxStorageBulkWriteResponse<RxDocType>,\n    reInsertIds?: Set<string>\n): RxDocumentData<RxDocType>[] {\n    return getFromMapOrCreate(\n        BULK_WRITE_SUCCESS_MAP,\n        response,\n        () => {\n            const ret: RxDocumentData<RxDocType>[] = [];\n            let realWriteRows = BULK_WRITE_ROWS_BY_RESPONSE.get(response);\n            if (!realWriteRows) {\n                realWriteRows = writeRows;\n            }\n            if (response.error.length > 0 || reInsertIds) {\n                const errorIds = reInsertIds ? reInsertIds : new Set<string>();\n                for (let index = 0; index < response.error.length; index++) {\n                    const error = response.error[index];\n                    errorIds.add(error.documentId);\n                }\n\n                for (let index = 0; index < realWriteRows.length; index++) {\n                    const doc = realWriteRows[index].document;\n                    if (!errorIds.has((doc as any)[primaryPath])) {\n                        ret.push(stripAttachmentsDataFromDocument(doc));\n                    }\n                }\n            } else {\n                // pre-set array size for better performance\n                ret.length = writeRows.length - response.error.length;\n                for (let index = 0; index < realWriteRows.length; index++) {\n                    const doc = realWriteRows[index].document;\n                    ret[index] = stripAttachmentsDataFromDocument(doc);\n                }\n            }\n            return ret;\n        }\n    );\n}\n\n\n/**\n * Wraps the storage and simluates\n * delays. Mostly used in tests.\n */\nexport function randomDelayStorage<Internals, InstanceCreationOptions>(\n    input: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n        delayTimeBefore: () => number;\n        delayTimeAfter: () => number;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    /**\n     * Ensure writes to a delay storage\n     * are still correctly run in order.\n     */\n    let randomDelayStorageWriteQueue: Promise<any> = PROMISE_RESOLVE_TRUE;\n\n    const retStorage: RxStorage<Internals, InstanceCreationOptions> = {\n        name: 'random-delay-' + input.storage.name,\n        rxdbVersion: RXDB_VERSION,\n        async createStorageInstance(params) {\n            await promiseWait(input.delayTimeBefore());\n            const storageInstance = await input.storage.createStorageInstance(params);\n            await promiseWait(input.delayTimeAfter());\n\n            return {\n                databaseName: storageInstance.databaseName,\n                internals: storageInstance.internals,\n                options: storageInstance.options,\n                schema: storageInstance.schema,\n                collectionName: storageInstance.collectionName,\n                bulkWrite(a, b) {\n                    randomDelayStorageWriteQueue = randomDelayStorageWriteQueue.then(async () => {\n                        await promiseWait(input.delayTimeBefore());\n                        const response = await storageInstance.bulkWrite(a, b);\n                        await promiseWait(input.delayTimeAfter());\n                        return response;\n                    });\n                    const ret = randomDelayStorageWriteQueue;\n                    return ret;\n                },\n                async findDocumentsById(a, b) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.findDocumentsById(a, b);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n                async query(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.query(a);\n                    return ret;\n                },\n                async count(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.count(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async getAttachmentData(a, b, c) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.getAttachmentData(a, b, c);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                getChangedDocumentsSince: !storageInstance.getChangedDocumentsSince ? undefined : async (a, b) => {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await ensureNotFalsy(storageInstance.getChangedDocumentsSince)(a, b);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                changeStream() {\n                    return storageInstance.changeStream();\n                },\n                async cleanup(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.cleanup(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async close() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.close();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async remove() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.remove();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n            };\n\n\n        }\n    };\n    return retStorage;\n}\n"],"mappings":"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","ignoreList":[]}