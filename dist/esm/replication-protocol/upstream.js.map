{"version":3,"file":"upstream.js","names":["firstValueFrom","filter","getChangedDocumentsSince","stackCheckpoints","appendToArray","batchArray","clone","ensureNotFalsy","parseRevision","PROMISE_RESOLVE_FALSE","getLastCheckpointDoc","setCheckpoint","resolveConflictError","stripAttachmentsDataFromMetaWriteRows","writeDocToDocState","getAssumedMasterState","getMetaWriteRow","fillWriteDataForAttachmentsChange","startReplicationUpstream","state","input","initialCheckpoint","upstream","checkpointDoc","replicationHandler","streamQueue","up","then","upstreamInitialSync","processTasks","timer","initialSyncStartTime","openTasks","persistenceQueue","nonPersistedFromMaster","docs","sub","forkInstance","changeStream","subscribe","eventBulk","context","downstreamBulkWriteFlag","stats","forkChangeStreamEmit","push","task","time","events","active","getValue","next","waitBeforePersist","canceled","pipe","unsubscribe","checkpointQueue","lastCheckpoint","promises","Set","_loop","size","Promise","race","Array","from","upResult","pushBatchSize","documents","length","checkpoint","promise","persistToMaster","add","catch","delete","resolvedPromises","all","hadConflicts","find","r","firstSyncDone","taskWithTime","shift","map","documentData","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","assumedMasterState","writeRowsToMaster","writeRowsToMasterIds","writeRowsToMeta","forkStateById","fullDocData","hasAttachments","keepMeta","assumedMasterDoc","metaDocument","isResolvedConflict","_rev","conflictHandler","realMasterState","newDocumentState","isEqual","height","_meta","identifier","undefined","writeRowsArray","values","conflictIds","conflictsById","writeBatches","writeBatch","row","masterWriteResult","masterWrite","conflictDoc","id","useWriteRowsToMeta","has","processed","metaInstance","bulkWrite","hadConflictWrites","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","writeToMasterRow","resolved","resolvedConflicts","output","previous","document","resolvedDoc","persistToMasterConflictWrites","forkWriteResult","useMetaWrites","success","unhandledError","error"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\nimport {\n    getChangedDocumentsSince,\n    stackCheckpoints\n} from '../rx-storage-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    ById,\n    EventBulk,\n    RxDocumentData,\n    RxReplicationWriteToMasterRow,\n    RxStorageChangeEvent,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types/index.d.ts';\nimport {\n    appendToArray,\n    batchArray,\n    clone,\n    ensureNotFalsy,\n    parseRevision,\n    PROMISE_RESOLVE_FALSE\n} from '../plugins/utils/index.ts';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint.ts';\nimport {\n    resolveConflictError\n} from './conflicts.ts';\nimport {\n    stripAttachmentsDataFromMetaWriteRows,\n    writeDocToDocState\n} from './helper.ts';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance.ts';\nimport { fillWriteDataForAttachmentsChange } from '../plugins/attachments/index.ts';\n\n/**\n * Writes all document changes from the fork to the master.\n * The upstream runs on two modes:\n * - For initial replication, a checkpoint-iteration is used\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\n *   In contrast to the master, the fork can be assumed to never loose connection,\n *   so we do not have to prepare for missed out events.\n */\nexport async function startReplicationUpstream<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    if (\n        state.input.initialCheckpoint &&\n        state.input.initialCheckpoint.upstream\n    ) {\n        const checkpointDoc = await getLastCheckpointDoc(state, 'up');\n        if (!checkpointDoc) {\n            await setCheckpoint(\n                state,\n                'up',\n                state.input.initialCheckpoint.upstream\n            );\n        }\n    }\n\n    const replicationHandler = state.input.replicationHandler;\n    state.streamQueue.up = state.streamQueue.up.then(() => {\n        return upstreamInitialSync().then(() => {\n            processTasks();\n        });\n    });\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n    let initialSyncStartTime = -1;\n\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n    type TaskWithTime = {\n        task: Task;\n        time: number;\n    };\n    const openTasks: TaskWithTime[] = [];\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<RxDocumentData<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    const sub = state.input.forkInstance.changeStream()\n        .subscribe(async (eventBulk) => {\n            // ignore writes that came from the downstream\n            if (eventBulk.context === await state.downstreamBulkWriteFlag) {\n                return;\n            }\n\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\n            openTasks.push({\n                task: eventBulk,\n                time: timer++\n            });\n            if (!state.events.active.up.getValue()) {\n                state.events.active.up.next(true);\n            }\n            if (state.input.waitBeforePersist) {\n                return state.input.waitBeforePersist()\n                    .then(() => processTasks());\n            } else {\n                return processTasks();\n            }\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    async function upstreamInitialSync() {\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Set<Promise<any>> = new Set();\n\n        while (!state.events.canceled.getValue()) {\n            initialSyncStartTime = timer++;\n\n            /**\n             * Throttle the calls to\n             * forkInstance.getChangedDocumentsSince() so that\n             * if the pushing to the remote is slower compared to the\n             * pulling out of forkInstance, we do not block the UI too much\n             * and have a big memory spike with all forkInstance documents.\n             */\n            if (promises.size > 3) {\n                await Promise.race(Array.from(promises));\n            }\n\n            const upResult = await getChangedDocumentsSince(\n                state.input.forkInstance,\n                state.input.pushBatchSize,\n                lastCheckpoint\n            );\n            if (upResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\n\n            const promise = persistToMaster(\n                upResult.documents,\n                ensureNotFalsy(lastCheckpoint)\n            );\n            promises.add(promise);\n            promise.catch().then(() => promises.delete(promise));\n        }\n\n        /**\n         * If we had conflicts during the initial sync,\n         * it means that we likely have new writes to the fork\n         * and so we have to run the initial sync again to upstream these new writes.\n         */\n        const resolvedPromises = await Promise.all(promises);\n        const hadConflicts = resolvedPromises.find(r => !!r);\n        if (hadConflicts) {\n            await upstreamInitialSync();\n        } else if (\n            !state.firstSyncDone.up.getValue() &&\n            !state.events.canceled.getValue()\n        ) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n\n\n    /**\n     * Takes all open tasks an processes them at once.\n     */\n    function processTasks() {\n        if (\n            state.events.canceled.getValue() ||\n            openTasks.length === 0\n        ) {\n            state.events.active.up.next(false);\n            return;\n        }\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\n        state.events.active.up.next(true);\n        state.streamQueue.up = state.streamQueue.up.then(() => {\n            /**\n             * Merge/filter all open tasks\n             */\n            const docs: RxDocumentData<RxDocType>[] = [];\n            let checkpoint: CheckpointType = {} as any;\n            while (openTasks.length > 0) {\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\n                /**\n                 * If the task came in before the last time the initial sync fetching\n                 * has run, we can ignore the task because the initial sync already processed\n                 * these documents.\n                 */\n                if (taskWithTime.time < initialSyncStartTime) {\n                    continue;\n                }\n                appendToArray(\n                    docs,\n                    taskWithTime.task.events.map(r => {\n                        return r.documentData as any;\n                    })\n                );\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\n            }\n\n            const promise = docs.length === 0 ? PROMISE_RESOLVE_FALSE : persistToMaster(\n                docs,\n                checkpoint\n            );\n            return promise.then(() => {\n                if (openTasks.length === 0) {\n                    state.events.active.up.next(false);\n                } else {\n                    processTasks();\n                }\n            });\n        });\n    }\n\n    /**\n     * Returns true if had conflicts,\n     * false if not.\n     */\n    function persistToMaster(\n        docs: RxDocumentData<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<boolean> {\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistent list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(upDocsById);\n            if (docIds.length === 0) {\n                return false;\n            }\n\n            const assumedMasterState = await getAssumedMasterState(\n                state,\n                docIds\n            );\n\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            const writeRowsToMasterIds: string[] = [];\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\n                    forkStateById[docId] = fullDocData;\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData, state.hasAttachments, !!state.input.keepMeta);\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n                        (\n                            assumedMasterDoc &&\n                            // if the isResolvedConflict is correct, we do not have to compare the documents.\n                            assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\n                            &&\n                            (await state.input.conflictHandler({\n                                realMasterState: assumedMasterDoc.docData,\n                                newDocumentState: docData\n                            }, 'upstream-check-if-equal')).isEqual\n                        )\n                        ||\n                        /**\n                         * If the master works with _rev fields,\n                         * we use that to check if our current doc state\n                         * is different from the assumedMasterDoc.\n                         */\n                        (\n                            assumedMasterDoc &&\n                            (assumedMasterDoc.docData as any)._rev &&\n                            parseRevision(fullDocData._rev).height === fullDocData._meta[state.input.identifier]\n                        )\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMasterIds.push(docId);\n\n                    writeRowsToMaster[docId] = {\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        newDocumentState: docData\n                    };\n                    writeRowsToMeta[docId] = await getMetaWriteRow(\n                        state,\n                        docData,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                })\n            );\n\n            if (writeRowsToMasterIds.length === 0) {\n                return false;\n            }\n\n\n            const writeRowsArray = Object.values(writeRowsToMaster);\n            const conflictIds: Set<string> = new Set();\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\n\n            /**\n             * To always respect the push.batchSize,\n             * we have to split the write rows into batches\n             * to ensure that replicationHandler.masterWrite() is never\n             * called with more documents than what the batchSize limits.\n             */\n            const writeBatches = batchArray(writeRowsArray, state.input.pushBatchSize);\n            await Promise.all(\n                writeBatches.map(async (writeBatch) => {\n\n                    // enhance docs with attachments\n                    if (state.hasAttachments) {\n                        await Promise.all(\n                            writeBatch.map(async (row) => {\n                                row.newDocumentState = await fillWriteDataForAttachmentsChange(\n                                    state.primaryPath,\n                                    state.input.forkInstance,\n                                    clone(row.newDocumentState),\n                                    row.assumedMasterState\n                                );\n                            })\n                        );\n                    }\n                    const masterWriteResult = await replicationHandler.masterWrite(writeBatch);\n                    masterWriteResult.forEach(conflictDoc => {\n                        const id = (conflictDoc as any)[state.primaryPath];\n                        conflictIds.add(id);\n                        conflictsById[id] = conflictDoc;\n                    });\n                })\n            );\n\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\n\n            writeRowsToMasterIds.forEach(docId => {\n                if (!conflictIds.has(docId)) {\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                }\n            });\n\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            if (useWriteRowsToMeta.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    stripAttachmentsDataFromMetaWriteRows(state, useWriteRowsToMeta),\n                    'replication-up-write-meta'\n                );\n                // TODO what happens when we have conflicts here?\n            }\n\n            /**\n             * Resolve conflicts by writing a new document\n             * state to the fork instance and the 'real' master state\n             * to the meta instance.\n             * Non-409 errors will be detected by resolveConflictError()\n             */\n            let hadConflictWrites = false;\n            if (conflictIds.size > 0) {\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\n                await Promise.all(\n                    Object\n                        .entries(conflictsById)\n                        .map(([docId, realMasterState]) => {\n                            const writeToMasterRow = writeRowsToMaster[docId];\n                            const input = {\n                                newDocumentState: writeToMasterRow.newDocumentState,\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\n                                realMasterState\n                            };\n                            return resolveConflictError(\n                                state,\n                                input,\n                                forkStateById[docId]\n                            ).then(async (resolved) => {\n                                if (resolved) {\n                                    state.events.resolvedConflicts.next({\n                                        input,\n                                        output: resolved.output\n                                    });\n                                    conflictWriteFork.push({\n                                        previous: forkStateById[docId],\n                                        document: resolved.resolvedDoc\n                                    });\n                                    const assumedMasterDoc = assumedMasterState[docId];\n                                    conflictWriteMeta[docId] = await getMetaWriteRow(\n                                        state,\n                                        ensureNotFalsy(realMasterState),\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\n                                        resolved.resolvedDoc._rev\n                                    );\n                                }\n                            });\n                        })\n                );\n\n                if (conflictWriteFork.length > 0) {\n                    hadConflictWrites = true;\n\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                        conflictWriteFork,\n                        'replication-up-write-conflict'\n                    );\n                    /**\n                     * Errors in the forkWriteResult must not be handled\n                     * because they have been caused by a write to the forkInstance\n                     * in between which will anyway trigger a new upstream cycle\n                     * that will then resolved the conflict again.\n                     */\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\n                    forkWriteResult.success\n                        .forEach(docData => {\n                            const docId = (docData as any)[state.primaryPath];\n                            useMetaWrites.push(\n                                conflictWriteMeta[docId]\n                            );\n                        });\n                    if (useMetaWrites.length > 0) {\n                        await state.input.metaInstance.bulkWrite(\n                            stripAttachmentsDataFromMetaWriteRows(state, useMetaWrites),\n                            'replication-up-write-conflict-meta'\n                        );\n                    }\n                    // TODO what to do with conflicts while writing to the metaInstance?\n                }\n            }\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parallel checkpoint writes,\n             * we have to use a queue.\n             */\n            setCheckpoint(\n                state,\n                'up',\n                useCheckpoint\n            );\n\n            return hadConflictWrites;\n        }).catch(unhandledError => {\n            state.events.error.next(unhandledError);\n            return false;\n        });\n\n        return persistenceQueue;\n    }\n}\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,MAAM,QAAQ,MAAM;AAC7C,SACIC,wBAAwB,EACxBC,gBAAgB,QACb,yBAAyB;AAahC,SACIC,aAAa,EACbC,UAAU,EACVC,KAAK,EACLC,cAAc,EACdC,aAAa,EACbC,qBAAqB,QAClB,2BAA2B;AAClC,SACIC,oBAAoB,EACpBC,aAAa,QACV,iBAAiB;AACxB,SACIC,oBAAoB,QACjB,gBAAgB;AACvB,SACIC,qCAAqC,EACrCC,kBAAkB,QACf,aAAa;AACpB,SACIC,qBAAqB,EACrBC,eAAe,QACZ,oBAAoB;AAC3B,SAASC,iCAAiC,QAAQ,iCAAiC;;AAEnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,wBAAwBA,CAC1CC,KAAmD,EACrD;EACE,IACIA,KAAK,CAACC,KAAK,CAACC,iBAAiB,IAC7BF,KAAK,CAACC,KAAK,CAACC,iBAAiB,CAACC,QAAQ,EACxC;IACE,IAAMC,aAAa,GAAG,MAAMb,oBAAoB,CAACS,KAAK,EAAE,IAAI,CAAC;IAC7D,IAAI,CAACI,aAAa,EAAE;MAChB,MAAMZ,aAAa,CACfQ,KAAK,EACL,IAAI,EACJA,KAAK,CAACC,KAAK,CAACC,iBAAiB,CAACC,QAClC,CAAC;IACL;EACJ;EAEA,IAAME,kBAAkB,GAAGL,KAAK,CAACC,KAAK,CAACI,kBAAkB;EACzDL,KAAK,CAACM,WAAW,CAACC,EAAE,GAAGP,KAAK,CAACM,WAAW,CAACC,EAAE,CAACC,IAAI,CAAC,MAAM;IACnD,OAAOC,mBAAmB,CAAC,CAAC,CAACD,IAAI,CAAC,MAAM;MACpCE,YAAY,CAAC,CAAC;IAClB,CAAC,CAAC;EACN,CAAC,CAAC;;EAEF;EACA,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,oBAAoB,GAAG,CAAC,CAAC;EAO7B,IAAMC,SAAyB,GAAG,EAAE;EACpC,IAAIC,gBAAkC,GAAGxB,qBAAqB;EAC9D,IAAMyB,sBAGL,GAAG;IACAC,IAAI,EAAE,CAAC;EACX,CAAC;EAED,IAAMC,GAAG,GAAGjB,KAAK,CAACC,KAAK,CAACiB,YAAY,CAACC,YAAY,CAAC,CAAC,CAC9CC,SAAS,CAAC,MAAOC,SAAS,IAAK;IAC5B;IACA,IAAIA,SAAS,CAACC,OAAO,MAAK,MAAMtB,KAAK,CAACuB,uBAAuB,GAAE;MAC3D;IACJ;IAEAvB,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAACkB,oBAAoB,GAAGzB,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAACkB,oBAAoB,GAAG,CAAC;IAC7EZ,SAAS,CAACa,IAAI,CAAC;MACXC,IAAI,EAAEN,SAAS;MACfO,IAAI,EAAEjB,KAAK;IACf,CAAC,CAAC;IACF,IAAI,CAACX,KAAK,CAAC6B,MAAM,CAACC,MAAM,CAACvB,EAAE,CAACwB,QAAQ,CAAC,CAAC,EAAE;MACpC/B,KAAK,CAAC6B,MAAM,CAACC,MAAM,CAACvB,EAAE,CAACyB,IAAI,CAAC,IAAI,CAAC;IACrC;IACA,IAAIhC,KAAK,CAACC,KAAK,CAACgC,iBAAiB,EAAE;MAC/B,OAAOjC,KAAK,CAACC,KAAK,CAACgC,iBAAiB,CAAC,CAAC,CACjCzB,IAAI,CAAC,MAAME,YAAY,CAAC,CAAC,CAAC;IACnC,CAAC,MAAM;MACH,OAAOA,YAAY,CAAC,CAAC;IACzB;EACJ,CAAC,CAAC;EACN7B,cAAc,CACVmB,KAAK,CAAC6B,MAAM,CAACK,QAAQ,CAACC,IAAI,CACtBrD,MAAM,CAACoD,QAAQ,IAAI,CAAC,CAACA,QAAQ,CACjC,CACJ,CAAC,CAAC1B,IAAI,CAAC,MAAMS,GAAG,CAACmB,WAAW,CAAC,CAAC,CAAC;EAG/B,eAAe3B,mBAAmBA,CAAA,EAAG;IACjCT,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAACE,mBAAmB,GAAGT,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAACE,mBAAmB,GAAG,CAAC;IAC3E,IAAIT,KAAK,CAAC6B,MAAM,CAACK,QAAQ,CAACH,QAAQ,CAAC,CAAC,EAAE;MAClC;IACJ;IAEA/B,KAAK,CAACqC,eAAe,GAAGrC,KAAK,CAACqC,eAAe,CAAC7B,IAAI,CAAC,MAAMjB,oBAAoB,CAACS,KAAK,EAAE,IAAI,CAAC,CAAC;IAC3F,IAAIsC,cAA8B,GAAG,MAAMtC,KAAK,CAACqC,eAAe;IAEhE,IAAME,QAA2B,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC,IAAAC,KAAA,kBAAAA,CAAA,EAEJ;MACtC7B,oBAAoB,GAAGD,KAAK,EAAE;;MAE9B;AACZ;AACA;AACA;AACA;AACA;AACA;MACY,IAAI4B,QAAQ,CAACG,IAAI,GAAG,CAAC,EAAE;QACnB,MAAMC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACP,QAAQ,CAAC,CAAC;MAC5C;MAEA,IAAMQ,QAAQ,GAAG,MAAMhE,wBAAwB,CAC3CiB,KAAK,CAACC,KAAK,CAACiB,YAAY,EACxBlB,KAAK,CAACC,KAAK,CAAC+C,aAAa,EACzBV,cACJ,CAAC;MACD,IAAIS,QAAQ,CAACE,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QAAA;MAErC;MAEAZ,cAAc,GAAGtD,gBAAgB,CAAC,CAACsD,cAAc,EAAES,QAAQ,CAACI,UAAU,CAAC,CAAC;MAExE,IAAMC,OAAO,GAAGC,eAAe,CAC3BN,QAAQ,CAACE,SAAS,EAClB7D,cAAc,CAACkD,cAAc,CACjC,CAAC;MACDC,QAAQ,CAACe,GAAG,CAACF,OAAO,CAAC;MACrBA,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC/C,IAAI,CAAC,MAAM+B,QAAQ,CAACiB,MAAM,CAACJ,OAAO,CAAC,CAAC;IACxD,CAAC;IA/BD,OAAO,CAACpD,KAAK,CAAC6B,MAAM,CAACK,QAAQ,CAACH,QAAQ,CAAC,CAAC;MAAA,UAAAU,KAAA,IAoBhC;IAAM;;IAad;AACR;AACA;AACA;AACA;IACQ,IAAMgB,gBAAgB,GAAG,MAAMd,OAAO,CAACe,GAAG,CAACnB,QAAQ,CAAC;IACpD,IAAMoB,YAAY,GAAGF,gBAAgB,CAACG,IAAI,CAACC,CAAC,IAAI,CAAC,CAACA,CAAC,CAAC;IACpD,IAAIF,YAAY,EAAE;MACd,MAAMlD,mBAAmB,CAAC,CAAC;IAC/B,CAAC,MAAM,IACH,CAACT,KAAK,CAAC8D,aAAa,CAACvD,EAAE,CAACwB,QAAQ,CAAC,CAAC,IAClC,CAAC/B,KAAK,CAAC6B,MAAM,CAACK,QAAQ,CAACH,QAAQ,CAAC,CAAC,EACnC;MACE/B,KAAK,CAAC8D,aAAa,CAACvD,EAAE,CAACyB,IAAI,CAAC,IAAI,CAAC;IACrC;EACJ;;EAGA;AACJ;AACA;EACI,SAAStB,YAAYA,CAAA,EAAG;IACpB,IACIV,KAAK,CAAC6B,MAAM,CAACK,QAAQ,CAACH,QAAQ,CAAC,CAAC,IAChClB,SAAS,CAACqC,MAAM,KAAK,CAAC,EACxB;MACElD,KAAK,CAAC6B,MAAM,CAACC,MAAM,CAACvB,EAAE,CAACyB,IAAI,CAAC,KAAK,CAAC;MAClC;IACJ;IACAhC,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAACG,YAAY,GAAGV,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAACG,YAAY,GAAG,CAAC;IAC7DV,KAAK,CAAC6B,MAAM,CAACC,MAAM,CAACvB,EAAE,CAACyB,IAAI,CAAC,IAAI,CAAC;IACjChC,KAAK,CAACM,WAAW,CAACC,EAAE,GAAGP,KAAK,CAACM,WAAW,CAACC,EAAE,CAACC,IAAI,CAAC,MAAM;MACnD;AACZ;AACA;MACY,IAAMQ,IAAiC,GAAG,EAAE;MAC5C,IAAImC,UAA0B,GAAG,CAAC,CAAQ;MAC1C,OAAOtC,SAAS,CAACqC,MAAM,GAAG,CAAC,EAAE;QACzB,IAAMa,YAAY,GAAG3E,cAAc,CAACyB,SAAS,CAACmD,KAAK,CAAC,CAAC,CAAC;QACtD;AAChB;AACA;AACA;AACA;QACgB,IAAID,YAAY,CAACnC,IAAI,GAAGhB,oBAAoB,EAAE;UAC1C;QACJ;QACA3B,aAAa,CACT+B,IAAI,EACJ+C,YAAY,CAACpC,IAAI,CAACE,MAAM,CAACoC,GAAG,CAACJ,CAAC,IAAI;UAC9B,OAAOA,CAAC,CAACK,YAAY;QACzB,CAAC,CACL,CAAC;QACDf,UAAU,GAAGnE,gBAAgB,CAAC,CAACmE,UAAU,EAAEY,YAAY,CAACpC,IAAI,CAACwB,UAAU,CAAC,CAAC;MAC7E;MAEA,IAAMC,OAAO,GAAGpC,IAAI,CAACkC,MAAM,KAAK,CAAC,GAAG5D,qBAAqB,GAAG+D,eAAe,CACvErC,IAAI,EACJmC,UACJ,CAAC;MACD,OAAOC,OAAO,CAAC5C,IAAI,CAAC,MAAM;QACtB,IAAIK,SAAS,CAACqC,MAAM,KAAK,CAAC,EAAE;UACxBlD,KAAK,CAAC6B,MAAM,CAACC,MAAM,CAACvB,EAAE,CAACyB,IAAI,CAAC,KAAK,CAAC;QACtC,CAAC,MAAM;UACHtB,YAAY,CAAC,CAAC;QAClB;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;EACI,SAAS2C,eAAeA,CACpBrC,IAAiC,EACjCmC,UAA0B,EACV;IAChBnD,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAAC8C,eAAe,GAAGrD,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAAC8C,eAAe,GAAG,CAAC;;IAEnE;AACR;AACA;IACQrC,IAAI,CAACmD,OAAO,CAACC,OAAO,IAAI;MACpB,IAAMC,KAAa,GAAID,OAAO,CAASpE,KAAK,CAACsE,WAAW,CAAC;MACzDvD,sBAAsB,CAACC,IAAI,CAACqD,KAAK,CAAC,GAAGD,OAAO;IAChD,CAAC,CAAC;IACFrD,sBAAsB,CAACoC,UAAU,GAAGA,UAAU;IAE9CrC,gBAAgB,GAAGA,gBAAgB,CAACN,IAAI,CAAC,YAAY;MACjD,IAAIR,KAAK,CAAC6B,MAAM,CAACK,QAAQ,CAACH,QAAQ,CAAC,CAAC,EAAE;QAClC,OAAO,KAAK;MAChB;MAEA,IAAMwC,UAA2C,GAAGxD,sBAAsB,CAACC,IAAI;MAC/ED,sBAAsB,CAACC,IAAI,GAAG,CAAC,CAAC;MAChC,IAAMwD,aAAa,GAAGzD,sBAAsB,CAACoC,UAAU;MACvD,IAAMsB,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACJ,UAAU,CAAC;MACtC,IAAIE,MAAM,CAACvB,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,KAAK;MAChB;MAEA,IAAM0B,kBAAkB,GAAG,MAAMhF,qBAAqB,CAClDI,KAAK,EACLyE,MACJ,CAAC;MAED,IAAMI,iBAAiE,GAAG,CAAC,CAAC;MAC5E,IAAMC,oBAA8B,GAAG,EAAE;MACzC,IAAMC,eAA2E,GAAG,CAAC,CAAC;MACtF,IAAMC,aAA8C,GAAG,CAAC,CAAC;MAEzD,MAAMrC,OAAO,CAACe,GAAG,CACbe,MAAM,CAACR,GAAG,CAAC,MAAOI,KAAK,IAAK;QACxB,IAAMY,WAAsC,GAAGV,UAAU,CAACF,KAAK,CAAC;QAChEW,aAAa,CAACX,KAAK,CAAC,GAAGY,WAAW;QAClC,IAAMb,OAA+B,GAAGzE,kBAAkB,CAACsF,WAAW,EAAEjF,KAAK,CAACkF,cAAc,EAAE,CAAC,CAAClF,KAAK,CAACC,KAAK,CAACkF,QAAQ,CAAC;QACrH,IAAMC,gBAAgB,GAAGR,kBAAkB,CAACP,KAAK,CAAC;;QAElD;AACpB;AACA;AACA;AACA;QACoB,IAEQe,gBAAgB;QAChB;QACAA,gBAAgB,CAACC,YAAY,CAACC,kBAAkB,KAAKL,WAAW,CAACM,IAAI,IAErE,CAAC,MAAMvF,KAAK,CAACC,KAAK,CAACuF,eAAe,CAAC;UAC/BC,eAAe,EAAEL,gBAAgB,CAAChB,OAAO;UACzCsB,gBAAgB,EAAEtB;QACtB,CAAC,EAAE,yBAAyB,CAAC,EAAEuB,OAAO;QAG1C;AACxB;AACA;AACA;AACA;;QAE4BP,gBAAgB,IACfA,gBAAgB,CAAChB,OAAO,CAASmB,IAAI,IACtClG,aAAa,CAAC4F,WAAW,CAACM,IAAI,CAAC,CAACK,MAAM,KAAKX,WAAW,CAACY,KAAK,CAAC7F,KAAK,CAACC,KAAK,CAAC6F,UAAU,CAAC,CACvF,EACH;UACE;QACJ;QAEAhB,oBAAoB,CAACpD,IAAI,CAAC2C,KAAK,CAAC;QAEhCQ,iBAAiB,CAACR,KAAK,CAAC,GAAG;UACvBO,kBAAkB,EAAEQ,gBAAgB,GAAGA,gBAAgB,CAAChB,OAAO,GAAG2B,SAAS;UAC3EL,gBAAgB,EAAEtB;QACtB,CAAC;QACDW,eAAe,CAACV,KAAK,CAAC,GAAG,MAAMxE,eAAe,CAC1CG,KAAK,EACLoE,OAAO,EACPgB,gBAAgB,GAAGA,gBAAgB,CAACC,YAAY,GAAGU,SACvD,CAAC;MACL,CAAC,CACL,CAAC;MAED,IAAIjB,oBAAoB,CAAC5B,MAAM,KAAK,CAAC,EAAE;QACnC,OAAO,KAAK;MAChB;MAGA,IAAM8C,cAAc,GAAGtB,MAAM,CAACuB,MAAM,CAACpB,iBAAiB,CAAC;MACvD,IAAMqB,WAAwB,GAAG,IAAI1D,GAAG,CAAC,CAAC;MAC1C,IAAM2D,aAA2C,GAAG,CAAC,CAAC;;MAEtD;AACZ;AACA;AACA;AACA;AACA;MACY,IAAMC,YAAY,GAAGlH,UAAU,CAAC8G,cAAc,EAAEhG,KAAK,CAACC,KAAK,CAAC+C,aAAa,CAAC;MAC1E,MAAML,OAAO,CAACe,GAAG,CACb0C,YAAY,CAACnC,GAAG,CAAC,MAAOoC,UAAU,IAAK;QAEnC;QACA,IAAIrG,KAAK,CAACkF,cAAc,EAAE;UACtB,MAAMvC,OAAO,CAACe,GAAG,CACb2C,UAAU,CAACpC,GAAG,CAAC,MAAOqC,GAAG,IAAK;YAC1BA,GAAG,CAACZ,gBAAgB,GAAG,MAAM5F,iCAAiC,CAC1DE,KAAK,CAACsE,WAAW,EACjBtE,KAAK,CAACC,KAAK,CAACiB,YAAY,EACxB/B,KAAK,CAACmH,GAAG,CAACZ,gBAAgB,CAAC,EAC3BY,GAAG,CAAC1B,kBACR,CAAC;UACL,CAAC,CACL,CAAC;QACL;QACA,IAAM2B,iBAAiB,GAAG,MAAMlG,kBAAkB,CAACmG,WAAW,CAACH,UAAU,CAAC;QAC1EE,iBAAiB,CAACpC,OAAO,CAACsC,WAAW,IAAI;UACrC,IAAMC,EAAE,GAAID,WAAW,CAASzG,KAAK,CAACsE,WAAW,CAAC;UAClD4B,WAAW,CAAC5C,GAAG,CAACoD,EAAE,CAAC;UACnBP,aAAa,CAACO,EAAE,CAAC,GAAGD,WAAW;QACnC,CAAC,CAAC;MACN,CAAC,CACL,CAAC;MAED,IAAME,kBAA4E,GAAG,EAAE;MAEvF7B,oBAAoB,CAACX,OAAO,CAACE,KAAK,IAAI;QAClC,IAAI,CAAC6B,WAAW,CAACU,GAAG,CAACvC,KAAK,CAAC,EAAE;UACzBrE,KAAK,CAAC6B,MAAM,CAACgF,SAAS,CAACtG,EAAE,CAACyB,IAAI,CAAC6C,iBAAiB,CAACR,KAAK,CAAC,CAAC;UACxDsC,kBAAkB,CAACjF,IAAI,CAACqD,eAAe,CAACV,KAAK,CAAC,CAAC;QACnD;MACJ,CAAC,CAAC;MAEF,IAAIrE,KAAK,CAAC6B,MAAM,CAACK,QAAQ,CAACH,QAAQ,CAAC,CAAC,EAAE;QAClC,OAAO,KAAK;MAChB;MAEA,IAAI4E,kBAAkB,CAACzD,MAAM,GAAG,CAAC,EAAE;QAC/B,MAAMlD,KAAK,CAACC,KAAK,CAAC6G,YAAY,CAACC,SAAS,CACpCrH,qCAAqC,CAACM,KAAK,EAAE2G,kBAAkB,CAAC,EAChE,2BACJ,CAAC;QACD;MACJ;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACY,IAAIK,iBAAiB,GAAG,KAAK;MAC7B,IAAId,WAAW,CAACxD,IAAI,GAAG,CAAC,EAAE;QACtB1C,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAAC0G,2BAA2B,GAAGjH,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAAC0G,2BAA2B,GAAG,CAAC;QAC3F,IAAMC,iBAA4C,GAAG,EAAE;QACvD,IAAMC,iBAA6E,GAAG,CAAC,CAAC;QACxF,MAAMxE,OAAO,CAACe,GAAG,CACbgB,MAAM,CACD0C,OAAO,CAACjB,aAAa,CAAC,CACtBlC,GAAG,CAAC,CAAC,CAACI,KAAK,EAAEoB,eAAe,CAAC,KAAK;UAC/B,IAAM4B,gBAAgB,GAAGxC,iBAAiB,CAACR,KAAK,CAAC;UACjD,IAAMpE,KAAK,GAAG;YACVyF,gBAAgB,EAAE2B,gBAAgB,CAAC3B,gBAAgB;YACnDd,kBAAkB,EAAEyC,gBAAgB,CAACzC,kBAAkB;YACvDa;UACJ,CAAC;UACD,OAAOhG,oBAAoB,CACvBO,KAAK,EACLC,KAAK,EACL+E,aAAa,CAACX,KAAK,CACvB,CAAC,CAAC7D,IAAI,CAAC,MAAO8G,QAAQ,IAAK;YACvB,IAAIA,QAAQ,EAAE;cACVtH,KAAK,CAAC6B,MAAM,CAAC0F,iBAAiB,CAACvF,IAAI,CAAC;gBAChC/B,KAAK;gBACLuH,MAAM,EAAEF,QAAQ,CAACE;cACrB,CAAC,CAAC;cACFN,iBAAiB,CAACxF,IAAI,CAAC;gBACnB+F,QAAQ,EAAEzC,aAAa,CAACX,KAAK,CAAC;gBAC9BqD,QAAQ,EAAEJ,QAAQ,CAACK;cACvB,CAAC,CAAC;cACF,IAAMvC,gBAAgB,GAAGR,kBAAkB,CAACP,KAAK,CAAC;cAClD8C,iBAAiB,CAAC9C,KAAK,CAAC,GAAG,MAAMxE,eAAe,CAC5CG,KAAK,EACLZ,cAAc,CAACqG,eAAe,CAAC,EAC/BL,gBAAgB,GAAGA,gBAAgB,CAACC,YAAY,GAAGU,SAAS,EAC5DuB,QAAQ,CAACK,WAAW,CAACpC,IACzB,CAAC;YACL;UACJ,CAAC,CAAC;QACN,CAAC,CACT,CAAC;QAED,IAAI2B,iBAAiB,CAAChE,MAAM,GAAG,CAAC,EAAE;UAC9B8D,iBAAiB,GAAG,IAAI;UAExBhH,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAACqH,6BAA6B,GAAG5H,KAAK,CAACwB,KAAK,CAACjB,EAAE,CAACqH,6BAA6B,GAAG,CAAC;UAC/F,IAAMC,eAAe,GAAG,MAAM7H,KAAK,CAACC,KAAK,CAACiB,YAAY,CAAC6F,SAAS,CAC5DG,iBAAiB,EACjB,+BACJ,CAAC;UACD;AACpB;AACA;AACA;AACA;AACA;UACoB,IAAMY,aAAuE,GAAG,EAAE;UAClFD,eAAe,CAACE,OAAO,CAClB5D,OAAO,CAACC,OAAO,IAAI;YAChB,IAAMC,KAAK,GAAID,OAAO,CAASpE,KAAK,CAACsE,WAAW,CAAC;YACjDwD,aAAa,CAACpG,IAAI,CACdyF,iBAAiB,CAAC9C,KAAK,CAC3B,CAAC;UACL,CAAC,CAAC;UACN,IAAIyD,aAAa,CAAC5E,MAAM,GAAG,CAAC,EAAE;YAC1B,MAAMlD,KAAK,CAACC,KAAK,CAAC6G,YAAY,CAACC,SAAS,CACpCrH,qCAAqC,CAACM,KAAK,EAAE8H,aAAa,CAAC,EAC3D,oCACJ,CAAC;UACL;UACA;QACJ;MACJ;;MAEA;AACZ;AACA;AACA;AACA;MACYtI,aAAa,CACTQ,KAAK,EACL,IAAI,EACJwE,aACJ,CAAC;MAED,OAAOwC,iBAAiB;IAC5B,CAAC,CAAC,CAACzD,KAAK,CAACyE,cAAc,IAAI;MACvBhI,KAAK,CAAC6B,MAAM,CAACoG,KAAK,CAACjG,IAAI,CAACgG,cAAc,CAAC;MACvC,OAAO,KAAK;IAChB,CAAC,CAAC;IAEF,OAAOlH,gBAAgB;EAC3B;AACJ"}