{"version":3,"file":"index.js","names":["RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","RxDBLeaderElectionPlugin","Subject","DEFAULT_DELETED_FIELD","DEFAULT_MODIFIED_FIELD","POSTGRES_INSERT_CONFLICT_CODE","addDocEqualityToQuery","ensureNotFalsy","flatClone","lastOfArray","RxSupabaseReplicationState","_RxReplicationState","replicationIdentifier","collection","pull","push","live","retryTime","autoStart","_this","call","_inheritsLoose","replicateSupabase","options","primaryPath","schema","waitForLeadership","modifiedField","deletedField","pullStream$","replicationPrimitivesPull","rowToDoc","row","deleted","modified","doc","_deleted","jsonSchema","properties","fetchById","id","data","error","client","from","tableName","select","eq","limit","length","Error","handler","lastPulledCheckpoint","batchSize","query","or","order","ascending","lastDoc","newCheckpoint","undefined","docs","map","documents","checkpoint","modifier","stream$","asObservable","initialCheckpoint","replicationPrimitivesPush","rows","insertOrReturnConflict","insert","code","conflict","updateOrReturnConflict","assumedMasterState","toRow","update","conflicts","Promise","all","newDoc","newDocumentState","c","replicationState","startBefore","start","bind","cancelBefore","cancel","sub","channel","on","event","table","payload","eventType","new","next","subscribe","status","unsubscribe"],"sources":["../../../../src/plugins/replication-supabase/index.ts"],"sourcesContent":["import { RxReplicationState, startReplicationOnLeaderShip } from '../replication/index.ts';\nimport { SupabaseCheckpoint, SyncOptionsSupabase } from './types.ts';\nimport { addRxPlugin } from '../../plugin.ts';\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport {\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxDocumentData,\n    RxJsonSchema,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    WithDeleted\n} from '../../types/index';\nimport { Subject } from 'rxjs';\nimport {\n    DEFAULT_DELETED_FIELD,\n    DEFAULT_MODIFIED_FIELD,\n    POSTGRES_INSERT_CONFLICT_CODE,\n    addDocEqualityToQuery\n} from './helper.ts';\nimport { ensureNotFalsy, flatClone, lastOfArray } from '../utils/index.ts';\n\n\n\nexport class RxSupabaseReplicationState<RxDocType> extends RxReplicationState<RxDocType, SupabaseCheckpoint> {\n    constructor(\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType, any, any, any>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, SupabaseCheckpoint>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifier,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\n\nexport function replicateSupabase<RxDocType>(\n    options: SyncOptionsSupabase<RxDocType>\n) {\n    options = flatClone(options);\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const collection = options.collection;\n    const primaryPath = collection.schema.primaryPath;\n\n    // set defaults\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    const modifiedField = options.modifiedField ? options.modifiedField : DEFAULT_MODIFIED_FIELD;\n    const deletedField = options.deletedField ? options.deletedField : DEFAULT_DELETED_FIELD;\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, SupabaseCheckpoint>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, SupabaseCheckpoint> | undefined;\n\n\n    function rowToDoc(row: any): WithDeleted<RxDocType> {\n        const deleted = !!row[deletedField];\n        const modified = row[modifiedField];\n\n        const doc: WithDeleted<RxDocType> = flatClone(row);\n        delete (doc as any)[deletedField];\n        delete (doc as any)[modifiedField];\n\n        doc._deleted = deleted;\n\n        /**\n         * Only keep the modified value if that field is defined\n         * in the schema.\n         */\n        if ((collection.schema.jsonSchema.properties as any)[modifiedField]) {\n            (doc as any)[modifiedField] = modified;\n        }\n\n        return doc;\n    }\n    async function fetchById(id: string): Promise<WithDeleted<RxDocType>> {\n        const { data, error } = await options.client\n            .from(options.tableName)\n            .select()\n            .eq(primaryPath, id)\n            .limit(1)\n        if (error) throw error\n        if (data.length != 1) throw new Error('doc not found ' + id)\n        return rowToDoc(data[0])\n    }\n\n\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: SupabaseCheckpoint | undefined,\n                batchSize: number\n            ) {\n                let query = options.client\n                    .from(options.tableName)\n                    .select('*');\n                if (lastPulledCheckpoint) {\n                    const { modified, id } = lastPulledCheckpoint;\n\n                    // WHERE modified > :m OR (modified = :m AND id > :id)\n                    // PostgREST or() takes comma-separated disjuncts; use nested and() for the tie-breaker.\n                    // Wrap identifiers with double quotes to be safe if they're mixed-case.\n                    query = query.or(\n                        `\"${modifiedField}\".gt.${modified},and(\"${modifiedField}\".eq.${modified},\"${primaryPath}\".gt.${id})`\n                    );\n                }\n\n                // deterministic order & batch size\n                query = query\n                    .order(modifiedField as any, { ascending: true })\n                    .order(primaryPath as any, { ascending: true })\n                    .limit(batchSize);\n\n                const { data, error } = await query;\n                if (error) {\n                    throw error;\n                }\n\n                const lastDoc = lastOfArray(data);\n                const newCheckpoint: SupabaseCheckpoint | undefined = lastDoc ? {\n                    id: lastDoc[primaryPath],\n                    modified: lastDoc[modifiedField]\n                } : undefined;\n\n                const docs = data.map(row => rowToDoc(row))\n                return {\n                    documents: docs,\n                    checkpoint: newCheckpoint\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable(),\n            initialCheckpoint: options.pull.initialCheckpoint\n        };\n    }\n\n    const replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined = options.push ? {\n        async handler(\n            rows: RxReplicationWriteToMasterRow<RxDocType>[]\n        ) {\n            async function insertOrReturnConflict(doc: WithDeleted<RxDocType>): Promise<WithDeleted<RxDocType> | undefined> {\n                const id = (doc as any)[primaryPath];\n                const { error } = await options.client.from(options.tableName).insert(doc)\n                if (!error) {\n                    return;\n                } else if (error.code == POSTGRES_INSERT_CONFLICT_CODE) {\n                    // conflict!\n                    const conflict = await fetchById(id);\n                    return conflict;\n                } else {\n                    throw error\n                }\n            }\n            async function updateOrReturnConflict(\n                doc: WithDeleted<RxDocType>,\n                assumedMasterState: WithDeleted<RxDocType>\n            ): Promise<WithDeleted<RxDocType> | undefined> {\n                ensureNotFalsy(assumedMasterState);\n                const id = (doc as any)[primaryPath];\n                const toRow: Record<string, any> = flatClone(doc);\n                if (doc._deleted) {\n                    toRow[deletedField] = !!doc._deleted;\n                    if (deletedField !== '_deleted') {\n                        delete toRow._deleted;\n                    }\n                }\n\n                // modified field will be set server-side\n                delete toRow[modifiedField];\n\n                let query = options.client\n                    .from(options.tableName)\n                    .update(toRow);\n\n                query = addDocEqualityToQuery(\n                    collection.schema.jsonSchema,\n                    deletedField,\n                    modifiedField,\n                    assumedMasterState,\n                    query\n                );\n\n                const { data, error } = await query.select();\n                if (error) {\n                    throw error;\n                }\n\n                if (data && data.length > 0) {\n                    return;\n                } else {\n                    // no match -> conflict\n                    return await fetchById(id);\n                }\n            }\n\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            await Promise.all(\n                rows.map(async (row) => {\n                    const newDoc = row.newDocumentState as WithDeleted<RxDocType>;\n                    if (!row.assumedMasterState) {\n                        const c = await insertOrReturnConflict(newDoc);\n                        if (c) conflicts.push(c);\n                    } else {\n                        const c = await updateOrReturnConflict(newDoc, row.assumedMasterState as any);\n                        if (c) conflicts.push(c);\n                    }\n                })\n            );\n\n            return conflicts;\n        }\n    } : undefined;\n\n\n    const replicationState = new RxSupabaseReplicationState<RxDocType>(\n        options.replicationIdentifier,\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Subscribe to changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const sub = options.client\n                .channel('realtime:' + options.tableName)\n                .on(\n                    'postgres_changes',\n                    { event: '*', schema: 'public', table: options.tableName },\n                    (payload) => {\n                        /**\n                         * We assume soft-deletes in supabase\n                         * and therefore cleanup-hard-deletes\n                         * are not relevant for the sync.\n                         */\n                        if (payload.eventType === 'DELETE') {\n                            return;\n                        }\n\n                        const row = payload.new;\n                        const doc = rowToDoc(row);\n                        pullStream$.next({\n                            checkpoint: {\n                                id: (doc as any)[primaryPath],\n                                modified: (row as any)[modifiedField]\n                            },\n                            documents: [doc as any],\n                        });\n                    }\n                )\n                .subscribe((status: string) => {\n                    /**\n                     * Trigger resync flag on reconnects\n                     */\n                    if (status === 'SUBSCRIBED') {\n                        pullStream$.next('RESYNC');\n                    }\n                });\n            replicationState.cancel = () => {\n                sub.unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n    return replicationState;\n}\n\n\n"],"mappings":"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","ignoreList":[]}