{"version":3,"file":"replication.js","names":["rxStorageInstanceToReplicationHandler","deepEqual","getPullHandler","remoteCollection","helper","storageInstance","database","conflictHandler","token","handler","latestPullCheckpoint","batchSize","result","masterChangesSince","getPullStream","masterChangeStream$","getPushHandler","rows","masterWrite","ensureEqualState","collectionA","collectionB","context","docsA","docsB","Promise","all","find","exec","then","docs","map","d","toJSON","forEach","docA","idx","docB","cleanDocToCompare","doc","Object","assign","_meta","undefined","_rev","console","log","JSON","stringify","Error"],"sources":["../../../../src/plugins/test-utils/replication.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol/index.ts';\nimport type {\n    DeepReadonly,\n    ReplicationPullHandler,\n    ReplicationPushHandler,\n    RxCollection,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow\n} from '../../types';\nimport { deepEqual } from '../utils/index.ts';\n\n/**\n * Creates a pull handler that always returns\n * all documents.\n*/\nexport function getPullHandler<RxDocType, CheckpointType>(\n    remoteCollection: RxCollection<RxDocType, {}, {}, {}>\n): ReplicationPullHandler<RxDocType, CheckpointType> {\n    const helper = rxStorageInstanceToReplicationHandler<RxDocType, CheckpointType>(\n        remoteCollection.storageInstance,\n        remoteCollection.database.conflictHandler as any,\n        remoteCollection.database.token\n    );\n    const handler: ReplicationPullHandler<RxDocType, CheckpointType> = async (\n        latestPullCheckpoint: CheckpointType | undefined,\n        batchSize: number\n    ) => {\n        const result = await helper.masterChangesSince(latestPullCheckpoint, batchSize);\n        return result;\n    };\n    return handler;\n}\nexport function getPullStream<RxDocType>(\n    remoteCollection: RxCollection<RxDocType, {}, {}, {}>\n): Observable<RxReplicationPullStreamItem<RxDocType, any>> {\n    const helper = rxStorageInstanceToReplicationHandler(\n        remoteCollection.storageInstance,\n        remoteCollection.conflictHandler,\n        remoteCollection.database.token\n    );\n    return helper.masterChangeStream$;\n}\nexport function getPushHandler<RxDocType>(\n    remoteCollection: RxCollection<RxDocType, {}, {}, {}>\n): ReplicationPushHandler<RxDocType> {\n    const helper = rxStorageInstanceToReplicationHandler(\n        remoteCollection.storageInstance,\n        remoteCollection.conflictHandler,\n        remoteCollection.database.token\n    );\n    const handler: ReplicationPushHandler<RxDocType> = async (\n        rows: RxReplicationWriteToMasterRow<RxDocType>[]\n    ) => {\n        const result = await helper.masterWrite(rows);\n        return result;\n    };\n    return handler;\n}\n\n\nexport async function ensureEqualState<RxDocType>(\n    collectionA: RxCollection<RxDocType>,\n    collectionB: RxCollection<RxDocType>,\n    context?: string\n) {\n    const [\n        docsA,\n        docsB\n    ] = await Promise.all([\n        collectionA.find().exec().then(docs => docs.map(d => d.toJSON(true))),\n        collectionB.find().exec().then(docs => docs.map(d => d.toJSON(true)))\n    ]);\n\n    docsA.forEach((docA, idx) => {\n        const docB = docsB[idx];\n        const cleanDocToCompare = (doc: DeepReadonly<RxDocType>) => {\n            return Object.assign({}, doc, {\n                _meta: undefined,\n                _rev: undefined\n            });\n        };\n\n\n        if (!deepEqual(\n            cleanDocToCompare(docA),\n            cleanDocToCompare(docB)\n        )) {\n            console.log('## ERROR: State not equal (context: \"' + context + '\")');\n            console.log(JSON.stringify(docA, null, 4));\n            console.log(JSON.stringify(docB, null, 4));\n            throw new Error('STATE not equal (context: \"' + context + '\")');\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]}