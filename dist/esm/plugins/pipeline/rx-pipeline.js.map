{"version":3,"file":"rx-pipeline.js","names":["BehaviorSubject","Subject","filter","firstValueFrom","PROMISE_RESOLVE_VOID","clone","createRevision","ensureNotFalsy","lastOfArray","now","randomToken","getChangedDocumentsSince","mapDocumentsDataToCacheDocs","INTERNAL_CONTEXT_PIPELINE_CHECKPOINT","getPrimaryKeyOfInternalDocument","FLAGGED_FUNCTIONS","blockFlaggedFunctionKey","releaseFlaggedFunctionKey","RxPipeline","identifier","source","destination","handler","batchSize","processQueue","subs","stopped","toRun","lastSourceDocTime","lastProcessedDocTime","somethingChanged","secretFunctionName","waitBeforeWriteFn","stack","Error","includes","awaitIdle","checkpointId","onClose","push","close","awaitBeforeReads","add","eventBulks$","pipe","bulk","isLocal","subscribe","next","events","documentData","_meta","lwt","database","internalStore","changeStream","eventBulk","index","length","event","context","key","data","lastDocTime","_proto","prototype","trigger","_this2","then","done","_loop","checkpointDoc","getCheckpointDoc","checkpoint","undefined","docsSinceResult","storageInstance","lastTime","documents","rxDocuments","_docCache","_this","fnKey","err","error","v","closed","setCheckpointDoc","_ret","getValue","delete","forEach","s","unsubscribe","remove","insternalStore","newDoc","_deleted","writeResult","bulkWrite","previous","document","pipeline","results","findDocumentsById","result","newCheckpoint","_attachments","_rev","token","id","addPipeline","options","waitForLeadership","startPromise"],"sources":["../../../../src/plugins/pipeline/rx-pipeline.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    Subject,\n    Subscription,\n    filter,\n    firstValueFrom,\n    race\n} from 'rxjs';\nimport type {\n    InternalStoreDocType,\n    RxCollection,\n    RxDocument,\n    RxDocumentData\n} from '../../types';\nimport type {\n    CheckpointDocData,\n    RxPipelineHandler,\n    RxPipelineOptions\n} from './types';\nimport {\n    PROMISE_RESOLVE_VOID,\n    clone,\n    createRevision,\n    ensureNotFalsy,\n    lastOfArray,\n    nameFunction,\n    now,\n    promiseWait,\n    randomToken\n} from '../utils/index.ts';\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\nimport { mapDocumentsDataToCacheDocs } from '../../doc-cache.ts';\nimport { INTERNAL_CONTEXT_PIPELINE_CHECKPOINT, getPrimaryKeyOfInternalDocument } from '../../rx-database-internal-store.ts';\nimport { FLAGGED_FUNCTIONS, blockFlaggedFunctionKey, releaseFlaggedFunctionKey } from './flagged-functions.ts';\n\nexport class RxPipeline<RxDocType> {\n    processQueue = PROMISE_RESOLVE_VOID;\n    subs: Subscription[] = [];\n    stopped: boolean = false;\n\n    toRun = 1;\n    checkpointId: string;\n\n    lastSourceDocTime = new BehaviorSubject(-1);\n    lastProcessedDocTime = new BehaviorSubject(0);\n    somethingChanged = new Subject();\n\n\n    secretFunctionName = 'tx_fn_' + randomToken(10)\n\n    waitBeforeWriteFn = async () => {\n        const stack = new Error().stack;\n        if (stack && (\n            stack.includes(this.secretFunctionName)\n        )) {\n        } else {\n            await this.awaitIdle();\n        }\n    }\n\n    /**\n     * The handler of the pipeline must never throw.\n     * If it did anyway, the pipeline will be stuck and always\n     * throw the previous error on all operations.\n     */\n    error: any;\n\n    constructor(\n        public readonly identifier: string,\n        public readonly source: RxCollection<RxDocType>,\n        public readonly destination: RxCollection<any>,\n        public readonly handler: RxPipelineHandler<RxDocType>,\n        public readonly batchSize = 100\n    ) {\n        this.checkpointId = 'rx-pipeline-' + identifier;\n        this.source.onClose.push(() => this.close());\n        this.destination.awaitBeforeReads.add(this.waitBeforeWriteFn);\n        this.subs.push(\n            this.source.eventBulks$.pipe(\n                filter(bulk => !this.stopped && !bulk.isLocal)\n            ).subscribe((bulk) => {\n                this.lastSourceDocTime.next(bulk.events[0].documentData._meta.lwt);\n                this.somethingChanged.next({});\n            })\n        );\n        this.subs.push(\n            this.destination.database.internalStore\n                .changeStream()\n                .subscribe(eventBulk => {\n                    const events = eventBulk.events;\n                    for (let index = 0; index < events.length; index++) {\n                        const event = events[index];\n                        if (\n                            event.documentData.context === INTERNAL_CONTEXT_PIPELINE_CHECKPOINT &&\n                            event.documentData.key === this.checkpointId\n                        ) {\n                            this.lastProcessedDocTime.next(event.documentData.data.lastDocTime);\n                            this.somethingChanged.next({});\n                        }\n                    }\n                })\n        );\n    }\n\n    trigger() {\n        /**\n         * Do not stack up too many\n         * so that fast writes to the source collection\n         * do not block anything too long.\n         */\n        if (this.toRun > 2) {\n            return;\n        }\n        this.toRun = this.toRun + 1;\n\n        this.processQueue = this.processQueue.then(async () => {\n            this.toRun = this.toRun - 1;\n\n            let done = false;\n            while (\n                !done &&\n                !this.stopped &&\n                !this.destination.closed &&\n                !this.source.closed &&\n                !this.error\n            ) {\n                const checkpointDoc = await getCheckpointDoc(this);\n                const checkpoint = checkpointDoc ? checkpointDoc.data.checkpoint : undefined;\n                const docsSinceResult = await getChangedDocumentsSince(\n                    this.source.storageInstance,\n                    this.batchSize,\n                    checkpoint\n                );\n\n                let lastTime = checkpointDoc ? checkpointDoc.data.lastDocTime : 0;\n                if (docsSinceResult.documents.length > 0) {\n                    const rxDocuments = mapDocumentsDataToCacheDocs(this.source._docCache, docsSinceResult.documents);\n                    const _this = this;\n\n\n\n                    // const o: any = {};\n                    // eval(`\n                    //     async function ${this.secretFunctionName}(docs){ const x = await _this.handler(docs); return x; }\n                    //     o.${this.secretFunctionName} = ${this.secretFunctionName};\n                    // `);\n                    // await o[this.secretFunctionName](rxDocuments);\n\n                    const fnKey = blockFlaggedFunctionKey();\n                    this.secretFunctionName = fnKey;\n                    try {\n                        await FLAGGED_FUNCTIONS[fnKey](() => _this.handler(rxDocuments));\n                    } catch (err: any) {\n                        this.error = err;\n                    } finally {\n                        releaseFlaggedFunctionKey(fnKey);\n                    }\n\n                    if (this.error) {\n                        return;\n                    }\n\n                    lastTime = ensureNotFalsy(lastOfArray(docsSinceResult.documents))._meta.lwt;\n                }\n                if (!this.destination.closed) {\n                    await setCheckpointDoc(this, { checkpoint: docsSinceResult.checkpoint, lastDocTime: lastTime }, checkpointDoc);\n                }\n                if (docsSinceResult.documents.length < this.batchSize) {\n                    done = true;\n                }\n            }\n        });\n    }\n\n    async awaitIdle() {\n        if (this.error) {\n            throw this.error;\n        }\n        let done = false;\n        while (!done) {\n            await this.processQueue;\n            if (this.error) {\n                throw this.error;\n            }\n            if (this.lastProcessedDocTime.getValue() >= this.lastSourceDocTime.getValue()) {\n                done = true;\n            } else {\n                await firstValueFrom(this.somethingChanged);\n            }\n        }\n    }\n\n    async close() {\n        await this.processQueue;\n        this.stopped = true;\n        this.destination.awaitBeforeReads.delete(this.waitBeforeWriteFn);\n        this.subs.forEach(s => s.unsubscribe());\n        await this.processQueue;\n    }\n\n    /**\n     * Remove the pipeline and all metadata which it has stored\n     */\n    async remove() {\n        const insternalStore = this.destination.database.internalStore;\n        const checkpointDoc = await getCheckpointDoc(this);\n        if (checkpointDoc) {\n            const newDoc: RxDocumentData<InternalStoreDocType> = clone(checkpointDoc);\n            newDoc._deleted = true;\n            const writeResult = await insternalStore.bulkWrite([{\n                previous: checkpointDoc,\n                document: newDoc,\n            }], 'rx-pipeline');\n            if (writeResult.error.length > 0) {\n                throw writeResult.error;\n            }\n        }\n        return this.close();\n    }\n}\n\n\nexport async function getCheckpointDoc<RxDocType>(\n    pipeline: RxPipeline<RxDocType>\n): Promise<RxDocumentData<InternalStoreDocType<CheckpointDocData>> | undefined> {\n    const insternalStore = pipeline.destination.database.internalStore;\n    const checkpointId = getPrimaryKeyOfInternalDocument(\n        pipeline.checkpointId,\n        INTERNAL_CONTEXT_PIPELINE_CHECKPOINT\n    );\n    const results = await insternalStore.findDocumentsById([checkpointId], false);\n    const result: RxDocumentData<InternalStoreDocType> = results[0];\n    if (result) {\n        return result;\n    } else {\n        return undefined;\n    }\n}\n\nexport async function setCheckpointDoc<RxDocType>(\n    pipeline: RxPipeline<RxDocType>,\n    newCheckpoint: CheckpointDocData,\n    previous?: RxDocumentData<InternalStoreDocType>\n): Promise<void> {\n    const insternalStore = pipeline.destination.database.internalStore;\n    const newDoc: RxDocumentData<InternalStoreDocType<CheckpointDocData>> = {\n        _attachments: {},\n        _deleted: false,\n        _meta: {\n            lwt: now()\n        },\n        _rev: createRevision(pipeline.destination.database.token, previous),\n        context: INTERNAL_CONTEXT_PIPELINE_CHECKPOINT,\n        data: newCheckpoint,\n        id: getPrimaryKeyOfInternalDocument(\n            pipeline.checkpointId,\n            INTERNAL_CONTEXT_PIPELINE_CHECKPOINT\n        ),\n        key: pipeline.checkpointId\n    };\n\n    const writeResult = await insternalStore.bulkWrite([{\n        previous,\n        document: newDoc,\n    }], 'rx-pipeline');\n    if (writeResult.error.length > 0) {\n        throw writeResult.error;\n    }\n}\n\n\nexport async function addPipeline<RxDocType>(\n    this: RxCollection<RxDocType>,\n    options: RxPipelineOptions<RxDocType>\n): Promise<RxPipeline<RxDocType>> {\n    const pipeline = new RxPipeline<RxDocType>(\n        options.identifier,\n        this,\n        options.destination,\n        options.handler,\n        options.batchSize\n    );\n    const waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const startPromise = waitForLeadership ? this.database.waitForLeadership() : PROMISE_RESOLVE_VOID;\n    startPromise.then(() => {\n        pipeline.trigger();\n        pipeline.subs.push(\n            this.eventBulks$.pipe(\n                filter(bulk => {\n                    if (pipeline.stopped) {\n                        return false;\n                    }\n                    return !bulk.isLocal;\n                })\n            ).subscribe(() => pipeline.trigger())\n        );\n    });\n\n    return pipeline;\n}\n"],"mappings":"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","ignoreList":[]}