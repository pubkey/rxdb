{"version":3,"file":"index.js","names":["RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","RxDBLeaderElectionPlugin","Databases","Query","lastOfArray","appwriteDocToRxDB","rxdbDocToAppwrite","flatClone","Subject","getFromMapOrThrow","RxAppwriteReplicationState","_RxReplicationState","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","_this","call","_inheritsLoose","replicateAppwrite","options","primaryKey","schema","primaryPath","pullStream$","deletedField","waitForLeadership","databases","client","replicationPrimitivesPull","batchSize","modifier","stream$","asObservable","initialCheckpoint","handler","lastPulledCheckpoint","queries","or","greaterThan","updatedAt","and","equal","id","orderAsc","limit","result","listDocuments","databaseId","collectionId","lastDoc","documents","newCheckpoint","$id","$updatedAt","undefined","resultDocs","map","doc","checkpoint","replicationPrimitivesPush","rows","query","nonInsertRows","filter","row","assumedMasterState","updateDocsInDbById","Map","length","newDocumentState","updateDocsOnServer","forEach","docDataInDb","docId","set","conflicts","Promise","all","writeRow","insertDoc","createDocument","err","code","name","docOnServer","getDocument","docOnServerData","docInDb","conflictHandler","isEqual","writeDoc","_deleted","updateDocument","replicationState","replicationIdentifier","startBefore","start","bind","cancelBefore","cancel","channel","unsubscribe","subscribe","response","docData","payload","next"],"sources":["../../../../src/plugins/replication-appwrite/index.ts"],"sourcesContent":["import type {\n    SyncOptionsAppwrite,\n    AppwriteCheckpointType\n} from './appwrite-types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication/index.ts';\nimport type {\n    ById,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    WithDeleted\n} from '../../types';\nimport { addRxPlugin } from '../../plugin.ts';\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport {\n    Databases,\n    Query,\n    Models\n} from 'appwrite';\nimport { lastOfArray } from '../utils/utils-array.ts';\nimport { appwriteDocToRxDB, rxdbDocToAppwrite } from './appwrite-helpers.ts';\nimport { flatClone } from '../utils/utils-object.ts';\nimport { Subject } from 'rxjs';\nimport { getFromMapOrThrow } from '../utils/index.ts';\n\nexport class RxAppwriteReplicationState<RxDocType> extends RxReplicationState<RxDocType, AppwriteCheckpointType> {\n    constructor(\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, AppwriteCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateAppwrite<RxDocType>(\n    options: SyncOptionsAppwrite<RxDocType>\n): RxAppwriteReplicationState<RxDocType> {\n    const collection: RxCollection<RxDocType, any, any> = options.collection;\n    const primaryKey = collection.schema.primaryPath;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, AppwriteCheckpointType>> = new Subject();\n\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.deletedField = options.deletedField ? options.deletedField : '_deleted';\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n\n    const databases = new Databases(options.client);\n\n    const replicationPrimitivesPull: ReplicationPullOptions<RxDocType, AppwriteCheckpointType> | undefined = options.pull ? {\n        batchSize: options.pull.batchSize,\n        modifier: options.pull.modifier,\n        stream$: pullStream$.asObservable(),\n        initialCheckpoint: options.pull.initialCheckpoint,\n        handler: async (\n            lastPulledCheckpoint: AppwriteCheckpointType | undefined,\n            batchSize: number\n        ) => {\n            const queries: string[] = [];\n            if (lastPulledCheckpoint) {\n                queries.push(\n                    Query.or([\n                        Query.greaterThan('$updatedAt', lastPulledCheckpoint.updatedAt),\n                        Query.and([\n                            Query.equal('$updatedAt', lastPulledCheckpoint.updatedAt),\n                            Query.greaterThan('$id', lastPulledCheckpoint.id)\n                        ])\n                    ])\n                );\n            }\n            queries.push(Query.orderAsc('$updatedAt'));\n            queries.push(Query.orderAsc('$id'));\n            queries.push(Query.limit(batchSize));\n\n            const result = await databases.listDocuments(\n                options.databaseId,\n                options.collectionId,\n                queries\n            );\n            const lastDoc = lastOfArray(result.documents);\n            const newCheckpoint: AppwriteCheckpointType | undefined = lastDoc ? {\n                id: lastDoc.$id,\n                updatedAt: lastDoc.$updatedAt\n            } : undefined;\n            const resultDocs: WithDeleted<RxDocType>[] = result.documents.map(doc => {\n                return appwriteDocToRxDB<RxDocType>(\n                    doc,\n                    primaryKey,\n                    options.deletedField\n                );\n            });\n\n            return {\n                checkpoint: newCheckpoint,\n                documents: resultDocs\n            };\n        }\n    } : undefined;\n\n    const replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined = options.push ? {\n        async handler(\n            rows: RxReplicationWriteToMasterRow<RxDocType>[]\n        ) {\n            let query: string;\n\n            // inserts will conflict on write\n            const nonInsertRows = rows.filter(row => row.assumedMasterState);\n            const updateDocsInDbById = new Map<string, RxDocType>();\n            if (nonInsertRows.length > 0) {\n                if (nonInsertRows.length > 1) {\n                    query = Query.or(\n                        nonInsertRows.map(row => {\n                            const id: string = (row.newDocumentState as any)[primaryKey];\n                            return Query.equal('$id', id);\n                        })\n                    );\n                } else {\n                    const id: string = (nonInsertRows[0].newDocumentState as any)[primaryKey];\n                    query = Query.equal('$id', id);\n                }\n                const updateDocsOnServer = await databases.listDocuments(\n                    options.databaseId,\n                    options.collectionId,\n                    [query]\n                );\n                updateDocsOnServer.documents.forEach(doc => {\n                    const docDataInDb = appwriteDocToRxDB<RxDocType>(doc, primaryKey, options.deletedField);\n                    const docId: string = doc.$id;\n                    (docDataInDb as any)[primaryKey] = docId;\n                    updateDocsInDbById.set(docId, docDataInDb);\n                });\n            }\n\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            await Promise.all(\n                rows.map(async (writeRow) => {\n                    const docId = (writeRow.newDocumentState as any)[primaryKey];\n\n                    if (!writeRow.assumedMasterState) {\n                        // INSERT\n                        const insertDoc = rxdbDocToAppwrite<RxDocType>(\n                            writeRow.newDocumentState,\n                            primaryKey,\n                            options.deletedField\n                        );\n                        try {\n                            await databases.createDocument(\n                                options.databaseId,\n                                options.collectionId,\n                                docId,\n                                insertDoc,\n                                // [\"read(\"any\")\"] // permissions (optional)\n                            );\n                        } catch (err: any) {\n                            if (err.code == 409 && err.name === 'AppwriteException') {\n                                // document already exists -> conflict\n                                const docOnServer = await databases.getDocument(\n                                    options.databaseId,\n                                    options.collectionId,\n                                    docId\n                                );\n                                const docOnServerData = appwriteDocToRxDB<RxDocType>(docOnServer, primaryKey, options.deletedField);\n                                conflicts.push(docOnServerData);\n                            } else {\n                                throw err;\n                            }\n                        }\n                    } else {\n                        // UPDATE\n                        /**\n                         * TODO appwrite does not have a update-if-equals-X method,\n                         * so we pre-fetch the documents and compare them locally.\n                         * This might cause problems when multiple users update the\n                         * same documents very fast.\n                         */\n                        const docInDb: RxDocType = getFromMapOrThrow(updateDocsInDbById, docId);\n                        if (\n                            !writeRow.assumedMasterState ||\n                            collection.conflictHandler.isEqual(docInDb as any, writeRow.assumedMasterState, 'replication-appwrite-push') === false\n                        ) {\n                            // conflict\n                            conflicts.push(docInDb as any);\n                        } else {\n                            // no conflict\n                            const writeDoc: any = flatClone(writeRow.newDocumentState);\n                            delete writeDoc[primaryKey];\n                            writeDoc[options.deletedField] = writeDoc._deleted;\n                            if (options.deletedField !== '_deleted') {\n                                delete writeDoc._deleted;\n                            }\n\n                            await databases.updateDocument(\n                                options.databaseId,\n                                options.collectionId,\n                                docId,\n                                writeDoc,\n                                // [\"read(\"any\")\"] // permissions (optional)\n                            );\n                        }\n\n                    }\n                })\n            );\n\n            return conflicts;\n        }\n    } : undefined;\n\n    const replicationState = new RxAppwriteReplicationState<RxDocType>(\n        options.replicationIdentifier,\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Subscribe to changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const channel = 'databases.' + options.databaseId + '.collections.' + options.collectionId + '.documents';\n            const unsubscribe = options.client.subscribe(\n                channel,\n                (response) => {\n                    const docData = appwriteDocToRxDB<RxDocType>(response.payload, primaryKey, options.deletedField);\n                    pullStream$.next({\n                        checkpoint: {\n                            id: (docData as any)[primaryKey],\n                            updatedAt: (response.payload as any).$updatedAt\n                        },\n                        documents: [docData]\n                    });\n\n                }\n            );\n            replicationState.cancel = () => {\n                unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n    return replicationState;\n}\n"],"mappings":";AAIA,SACIA,kBAAkB,EAClBC,4BAA4B,QACzB,yBAAyB;AAUhC,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,wBAAwB,QAAQ,6BAA6B;AACtE,SACIC,SAAS,EACTC,KAAK,QAEF,UAAU;AACjB,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,iBAAiB,EAAEC,iBAAiB,QAAQ,uBAAuB;AAC5E,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,OAAO,QAAQ,MAAM;AAC9B,SAASC,iBAAiB,QAAQ,mBAAmB;AAErD,WAAaC,0BAA0B,0BAAAC,mBAAA;EACnC,SAAAD,2BACoBE,yBAAiC,EACjCC,UAAmC,EACnCC,IAAgE,EAChEC,IAAwC,EACxCC,IAAa,GAAG,IAAI,EAC7BC,SAAiB,GAAG,IAAI,GAAG,CAAC,EAC5BC,SAAkB,GAAG,IAAI,EAClC;IAAA,IAAAC,KAAA;IACEA,KAAA,GAAAR,mBAAA,CAAAS,IAAA,OACIR,yBAAyB,EACzBC,UAAU,EACV,UAAU,EACVC,IAAI,EACJC,IAAI,EACJC,IAAI,EACJC,SAAS,EACTC,SACJ,CAAC;IAACC,KAAA,CAjBcP,yBAAiC,GAAjCA,yBAAiC;IAAAO,KAAA,CACjCN,UAAmC,GAAnCA,UAAmC;IAAAM,KAAA,CACnCL,IAAgE,GAAhEA,IAAgE;IAAAK,KAAA,CAChEJ,IAAwC,GAAxCA,IAAwC;IAAAI,KAAA,CACxCH,IAAa,GAAbA,IAAa;IAAAG,KAAA,CACtBF,SAAiB,GAAjBA,SAAiB;IAAAE,KAAA,CACjBD,SAAkB,GAAlBA,SAAkB;IAAA,OAAAC,KAAA;EAY7B;EAACE,cAAA,CAAAX,0BAAA,EAAAC,mBAAA;EAAA,OAAAD,0BAAA;AAAA,EApBsDZ,kBAAkB;AAuB7E,OAAO,SAASwB,iBAAiBA,CAC7BC,OAAuC,EACF;EACrC,IAAMV,UAA6C,GAAGU,OAAO,CAACV,UAAU;EACxE,IAAMW,UAAU,GAAGX,UAAU,CAACY,MAAM,CAACC,WAAW;EAChD,IAAMC,WAAoF,GAAG,IAAInB,OAAO,CAAC,CAAC;EAE1GR,WAAW,CAACC,wBAAwB,CAAC;EACrCsB,OAAO,CAACP,IAAI,GAAG,OAAOO,OAAO,CAACP,IAAI,KAAK,WAAW,GAAG,IAAI,GAAGO,OAAO,CAACP,IAAI;EACxEO,OAAO,CAACK,YAAY,GAAGL,OAAO,CAACK,YAAY,GAAGL,OAAO,CAACK,YAAY,GAAG,UAAU;EAC/EL,OAAO,CAACM,iBAAiB,GAAG,OAAON,OAAO,CAACM,iBAAiB,KAAK,WAAW,GAAG,IAAI,GAAGN,OAAO,CAACM,iBAAiB;EAE/G,IAAMC,SAAS,GAAG,IAAI5B,SAAS,CAACqB,OAAO,CAACQ,MAAM,CAAC;EAE/C,IAAMC,yBAAgG,GAAGT,OAAO,CAACT,IAAI,GAAG;IACpHmB,SAAS,EAAEV,OAAO,CAACT,IAAI,CAACmB,SAAS;IACjCC,QAAQ,EAAEX,OAAO,CAACT,IAAI,CAACoB,QAAQ;IAC/BC,OAAO,EAAER,WAAW,CAACS,YAAY,CAAC,CAAC;IACnCC,iBAAiB,EAAEd,OAAO,CAACT,IAAI,CAACuB,iBAAiB;IACjDC,OAAO,EAAE,MAAAA,CACLC,oBAAwD,EACxDN,SAAiB,KAChB;MACD,IAAMO,OAAiB,GAAG,EAAE;MAC5B,IAAID,oBAAoB,EAAE;QACtBC,OAAO,CAACzB,IAAI,CACRZ,KAAK,CAACsC,EAAE,CAAC,CACLtC,KAAK,CAACuC,WAAW,CAAC,YAAY,EAAEH,oBAAoB,CAACI,SAAS,CAAC,EAC/DxC,KAAK,CAACyC,GAAG,CAAC,CACNzC,KAAK,CAAC0C,KAAK,CAAC,YAAY,EAAEN,oBAAoB,CAACI,SAAS,CAAC,EACzDxC,KAAK,CAACuC,WAAW,CAAC,KAAK,EAAEH,oBAAoB,CAACO,EAAE,CAAC,CACpD,CAAC,CACL,CACL,CAAC;MACL;MACAN,OAAO,CAACzB,IAAI,CAACZ,KAAK,CAAC4C,QAAQ,CAAC,YAAY,CAAC,CAAC;MAC1CP,OAAO,CAACzB,IAAI,CAACZ,KAAK,CAAC4C,QAAQ,CAAC,KAAK,CAAC,CAAC;MACnCP,OAAO,CAACzB,IAAI,CAACZ,KAAK,CAAC6C,KAAK,CAACf,SAAS,CAAC,CAAC;MAEpC,IAAMgB,MAAM,GAAG,MAAMnB,SAAS,CAACoB,aAAa,CACxC3B,OAAO,CAAC4B,UAAU,EAClB5B,OAAO,CAAC6B,YAAY,EACpBZ,OACJ,CAAC;MACD,IAAMa,OAAO,GAAGjD,WAAW,CAAC6C,MAAM,CAACK,SAAS,CAAC;MAC7C,IAAMC,aAAiD,GAAGF,OAAO,GAAG;QAChEP,EAAE,EAAEO,OAAO,CAACG,GAAG;QACfb,SAAS,EAAEU,OAAO,CAACI;MACvB,CAAC,GAAGC,SAAS;MACb,IAAMC,UAAoC,GAAGV,MAAM,CAACK,SAAS,CAACM,GAAG,CAACC,GAAG,IAAI;QACrE,OAAOxD,iBAAiB,CACpBwD,GAAG,EACHrC,UAAU,EACVD,OAAO,CAACK,YACZ,CAAC;MACL,CAAC,CAAC;MAEF,OAAO;QACHkC,UAAU,EAAEP,aAAa;QACzBD,SAAS,EAAEK;MACf,CAAC;IACL;EACJ,CAAC,GAAGD,SAAS;EAEb,IAAMK,yBAAwE,GAAGxC,OAAO,CAACR,IAAI,GAAG;IAC5F,MAAMuB,OAAOA,CACT0B,IAAgD,EAClD;MACE,IAAIC,KAAa;;MAEjB;MACA,IAAMC,aAAa,GAAGF,IAAI,CAACG,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,kBAAkB,CAAC;MAChE,IAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAoB,CAAC;MACvD,IAAIL,aAAa,CAACM,MAAM,GAAG,CAAC,EAAE;QAC1B,IAAIN,aAAa,CAACM,MAAM,GAAG,CAAC,EAAE;UAC1BP,KAAK,GAAG9D,KAAK,CAACsC,EAAE,CACZyB,aAAa,CAACN,GAAG,CAACQ,GAAG,IAAI;YACrB,IAAMtB,EAAU,GAAIsB,GAAG,CAACK,gBAAgB,CAASjD,UAAU,CAAC;YAC5D,OAAOrB,KAAK,CAAC0C,KAAK,CAAC,KAAK,EAAEC,EAAE,CAAC;UACjC,CAAC,CACL,CAAC;QACL,CAAC,MAAM;UACH,IAAMA,EAAU,GAAIoB,aAAa,CAAC,CAAC,CAAC,CAACO,gBAAgB,CAASjD,UAAU,CAAC;UACzEyC,KAAK,GAAG9D,KAAK,CAAC0C,KAAK,CAAC,KAAK,EAAEC,EAAE,CAAC;QAClC;QACA,IAAM4B,kBAAkB,GAAG,MAAM5C,SAAS,CAACoB,aAAa,CACpD3B,OAAO,CAAC4B,UAAU,EAClB5B,OAAO,CAAC6B,YAAY,EACpB,CAACa,KAAK,CACV,CAAC;QACDS,kBAAkB,CAACpB,SAAS,CAACqB,OAAO,CAACd,GAAG,IAAI;UACxC,IAAMe,WAAW,GAAGvE,iBAAiB,CAAYwD,GAAG,EAAErC,UAAU,EAAED,OAAO,CAACK,YAAY,CAAC;UACvF,IAAMiD,KAAa,GAAGhB,GAAG,CAACL,GAAG;UAC5BoB,WAAW,CAASpD,UAAU,CAAC,GAAGqD,KAAK;UACxCP,kBAAkB,CAACQ,GAAG,CAACD,KAAK,EAAED,WAAW,CAAC;QAC9C,CAAC,CAAC;MACN;MAEA,IAAMG,SAAmC,GAAG,EAAE;MAC9C,MAAMC,OAAO,CAACC,GAAG,CACbjB,IAAI,CAACJ,GAAG,CAAC,MAAOsB,QAAQ,IAAK;QACzB,IAAML,KAAK,GAAIK,QAAQ,CAACT,gBAAgB,CAASjD,UAAU,CAAC;QAE5D,IAAI,CAAC0D,QAAQ,CAACb,kBAAkB,EAAE;UAC9B;UACA,IAAMc,SAAS,GAAG7E,iBAAiB,CAC/B4E,QAAQ,CAACT,gBAAgB,EACzBjD,UAAU,EACVD,OAAO,CAACK,YACZ,CAAC;UACD,IAAI;YACA,MAAME,SAAS,CAACsD,cAAc,CAC1B7D,OAAO,CAAC4B,UAAU,EAClB5B,OAAO,CAAC6B,YAAY,EACpByB,KAAK,EACLM;YACA;YACJ,CAAC;UACL,CAAC,CAAC,OAAOE,GAAQ,EAAE;YACf,IAAIA,GAAG,CAACC,IAAI,IAAI,GAAG,IAAID,GAAG,CAACE,IAAI,KAAK,mBAAmB,EAAE;cACrD;cACA,IAAMC,WAAW,GAAG,MAAM1D,SAAS,CAAC2D,WAAW,CAC3ClE,OAAO,CAAC4B,UAAU,EAClB5B,OAAO,CAAC6B,YAAY,EACpByB,KACJ,CAAC;cACD,IAAMa,eAAe,GAAGrF,iBAAiB,CAAYmF,WAAW,EAAEhE,UAAU,EAAED,OAAO,CAACK,YAAY,CAAC;cACnGmD,SAAS,CAAChE,IAAI,CAAC2E,eAAe,CAAC;YACnC,CAAC,MAAM;cACH,MAAML,GAAG;YACb;UACJ;QACJ,CAAC,MAAM;UACH;UACA;AACxB;AACA;AACA;AACA;AACA;UACwB,IAAMM,OAAkB,GAAGlF,iBAAiB,CAAC6D,kBAAkB,EAAEO,KAAK,CAAC;UACvE,IACI,CAACK,QAAQ,CAACb,kBAAkB,IAC5BxD,UAAU,CAAC+E,eAAe,CAACC,OAAO,CAACF,OAAO,EAAST,QAAQ,CAACb,kBAAkB,EAAE,2BAA2B,CAAC,KAAK,KAAK,EACxH;YACE;YACAU,SAAS,CAAChE,IAAI,CAAC4E,OAAc,CAAC;UAClC,CAAC,MAAM;YACH;YACA,IAAMG,QAAa,GAAGvF,SAAS,CAAC2E,QAAQ,CAACT,gBAAgB,CAAC;YAC1D,OAAOqB,QAAQ,CAACtE,UAAU,CAAC;YAC3BsE,QAAQ,CAACvE,OAAO,CAACK,YAAY,CAAC,GAAGkE,QAAQ,CAACC,QAAQ;YAClD,IAAIxE,OAAO,CAACK,YAAY,KAAK,UAAU,EAAE;cACrC,OAAOkE,QAAQ,CAACC,QAAQ;YAC5B;YAEA,MAAMjE,SAAS,CAACkE,cAAc,CAC1BzE,OAAO,CAAC4B,UAAU,EAClB5B,OAAO,CAAC6B,YAAY,EACpByB,KAAK,EACLiB;YACA;YACJ,CAAC;UACL;QAEJ;MACJ,CAAC,CACL,CAAC;MAED,OAAOf,SAAS;IACpB;EACJ,CAAC,GAAGrB,SAAS;EAEb,IAAMuC,gBAAgB,GAAG,IAAIvF,0BAA0B,CACnDa,OAAO,CAAC2E,qBAAqB,EAC7BrF,UAAU,EACVmB,yBAAyB,EACzB+B,yBAAyB,EACzBxC,OAAO,CAACP,IAAI,EACZO,OAAO,CAACN,SAAS,EACjBM,OAAO,CAACL,SACZ,CAAC;;EAED;AACJ;AACA;EACI,IAAIK,OAAO,CAACP,IAAI,IAAIO,OAAO,CAACT,IAAI,EAAE;IAC9B,IAAMqF,WAAW,GAAGF,gBAAgB,CAACG,KAAK,CAACC,IAAI,CAACJ,gBAAgB,CAAC;IACjE,IAAMK,YAAY,GAAGL,gBAAgB,CAACM,MAAM,CAACF,IAAI,CAACJ,gBAAgB,CAAC;IACnEA,gBAAgB,CAACG,KAAK,GAAG,MAAM;MAC3B,IAAMI,OAAO,GAAG,YAAY,GAAGjF,OAAO,CAAC4B,UAAU,GAAG,eAAe,GAAG5B,OAAO,CAAC6B,YAAY,GAAG,YAAY;MACzG,IAAMqD,WAAW,GAAGlF,OAAO,CAACQ,MAAM,CAAC2E,SAAS,CACxCF,OAAO,EACNG,QAAQ,IAAK;QACV,IAAMC,OAAO,GAAGvG,iBAAiB,CAAYsG,QAAQ,CAACE,OAAO,EAAErF,UAAU,EAAED,OAAO,CAACK,YAAY,CAAC;QAChGD,WAAW,CAACmF,IAAI,CAAC;UACbhD,UAAU,EAAE;YACRhB,EAAE,EAAG8D,OAAO,CAASpF,UAAU,CAAC;YAChCmB,SAAS,EAAGgE,QAAQ,CAACE,OAAO,CAASpD;UACzC,CAAC;UACDH,SAAS,EAAE,CAACsD,OAAO;QACvB,CAAC,CAAC;MAEN,CACJ,CAAC;MACDX,gBAAgB,CAACM,MAAM,GAAG,MAAM;QAC5BE,WAAW,CAAC,CAAC;QACb,OAAOH,YAAY,CAAC,CAAC;MACzB,CAAC;MACD,OAAOH,WAAW,CAAC,CAAC;IACxB,CAAC;EACL;EAEApG,4BAA4B,CAACwB,OAAO,CAACM,iBAAiB,EAAEoE,gBAAgB,CAAC;EACzE,OAAOA,gBAAgB;AAC3B","ignoreList":[]}