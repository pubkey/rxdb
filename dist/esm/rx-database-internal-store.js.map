{"version":3,"file":"rx-database-internal-store.js","names":["isBulkWriteConflictError","newRxError","fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","getSingleDocument","writeSingle","clone","ensureNotFalsy","getDefaultRevision","getDefaultRxDocumentMeta","randomCouchString","prepareQuery","INTERNAL_CONTEXT_COLLECTION","INTERNAL_CONTEXT_STORAGE_TOKEN","INTERNAL_CONTEXT_MIGRATION_STATUS","INTERNAL_STORE_SCHEMA_TITLE","INTERNAL_STORE_SCHEMA","version","title","primaryKey","key","fields","separator","type","properties","id","maxLength","context","enum","data","additionalProperties","indexes","required","sharding","shards","mode","getPrimaryKeyOfInternalDocument","getAllCollectionDocuments","storageInstance","getAllQueryPrepared","schema","selector","_deleted","$eq","sort","skip","queryResult","query","allDocs","documents","STORAGE_TOKEN_DOCUMENT_KEY","STORAGE_TOKEN_DOCUMENT_ID","ensureStorageTokenDocumentExists","rxDatabase","storageToken","passwordHash","password","hashFunction","JSON","stringify","undefined","docData","rxdbVersion","token","instanceToken","_meta","_rev","_attachments","writeResult","internalStore","bulkWrite","document","success","error","isError","conflictError","isDatabaseStateVersionCompatibleWithDatabaseCode","documentInDb","args","database","name","databaseStateVersion","codeVersion","existingPasswordHash","storageTokenDocInDb","includes","stateMajor","split","codeMajor","addConnectedStorageToCollection","collection","storageCollectionName","collectionNameWithVersion","_collectionNamePrimary","jsonSchema","collectionDocId","collectionDoc","saveData","alreadyThere","connectedStorages","find","row","collectionName","push","previous","err","removeConnectedStorageFromCollection","isThere","filter","item"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import {\n    isBulkWriteConflictError,\n    newRxError\n} from './rx-error.ts';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from './rx-schema-helper.ts';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper.ts';\nimport type {\n    CollectionsOfDatabase,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageInstance,\n    RxStorageWriteErrorConflict\n} from './types/index.d.ts';\nimport {\n    clone,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    randomCouchString\n} from './plugins/utils/index.ts';\nimport { prepareQuery } from './rx-query.ts';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\nexport const INTERNAL_CONTEXT_MIGRATION_STATUS = 'rx-migration-status';\n\n/**\n * Do not change the title,\n * we have to flag the internal schema so that\n * some RxStorage implementations are able\n * to detect if the created RxStorageInstance\n * is from the internals or not,\n * to do some optimizations in some cases.\n */\nexport const INTERNAL_STORE_SCHEMA_TITLE = 'RxInternalDocument';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    title: INTERNAL_STORE_SCHEMA_TITLE,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                INTERNAL_CONTEXT_MIGRATION_STATUS,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    );\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = prepareQuery<InternalStoreDocType<any>>(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION,\n                _deleted: {\n                    $eq: false\n                }\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\n\nexport const STORAGE_TOKEN_DOCUMENT_ID = getPrimaryKeyOfInternalDocument(\n    STORAGE_TOKEN_DOCUMENT_KEY,\n    INTERNAL_CONTEXT_STORAGE_TOKEN\n);\n\nexport async function ensureStorageTokenDocumentExists<Collections extends CollectionsOfDatabase = any>(\n    rxDatabase: RxDatabase<Collections>\n): Promise<RxDocumentData<InternalStoreStorageTokenDocType>> {\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n\n    const passwordHash = rxDatabase.password ?\n        await rxDatabase.hashFunction(JSON.stringify(rxDatabase.password)) :\n        undefined;\n\n    const docData: RxDocumentData<InternalStoreStorageTokenDocType> = {\n        id: STORAGE_TOKEN_DOCUMENT_ID,\n        context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n        key: STORAGE_TOKEN_DOCUMENT_KEY,\n        data: {\n            rxdbVersion: rxDatabase.rxdbVersion,\n            token: storageToken,\n            /**\n             * We add the instance token here\n             * to be able to detect if a given RxDatabase instance\n             * is the first instance that was ever created\n             * or if databases have existed earlier on that storage\n             * with the same database name.\n             */\n            instanceToken: rxDatabase.token,\n            passwordHash\n        },\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    const writeResult = await rxDatabase.internalStore.bulkWrite(\n        [{ document: docData }],\n        'internal-add-storage-token'\n    );\n    if (writeResult.success[0]) {\n        return writeResult.success[0];\n    }\n\n    /**\n     * If we get a 409 error,\n     * it means another instance already inserted the storage token.\n     * So we get that token from the database and return that one.\n     */\n    const error = ensureNotFalsy(writeResult.error[0]);\n    if (\n        error.isError &&\n        isBulkWriteConflictError(error)\n    ) {\n        const conflictError = (error as RxStorageWriteErrorConflict<InternalStoreStorageTokenDocType>);\n\n        if (\n            !isDatabaseStateVersionCompatibleWithDatabaseCode(\n                conflictError.documentInDb.data.rxdbVersion,\n                rxDatabase.rxdbVersion\n            )\n        ) {\n            throw newRxError('DM5', {\n                args: {\n                    database: rxDatabase.name,\n                    databaseStateVersion: conflictError.documentInDb.data.rxdbVersion,\n                    codeVersion: rxDatabase.rxdbVersion\n                }\n            });\n        }\n\n        if (\n            passwordHash &&\n            passwordHash !== conflictError.documentInDb.data.passwordHash\n        ) {\n            throw newRxError('DB1', {\n                passwordHash,\n                existingPasswordHash: conflictError.documentInDb.data.passwordHash\n            });\n        }\n\n        const storageTokenDocInDb = conflictError.documentInDb;\n        return ensureNotFalsy(storageTokenDocInDb);\n    }\n    throw error;\n}\n\n\nexport function isDatabaseStateVersionCompatibleWithDatabaseCode(\n    databaseStateVersion: string,\n    codeVersion: string\n): boolean {\n    if (!databaseStateVersion) {\n        return false;\n    }\n\n    if (\n        codeVersion.includes('beta') &&\n        codeVersion !== databaseStateVersion\n    ) {\n        return false;\n    }\n\n    const stateMajor = databaseStateVersion.split('.')[0];\n    const codeMajor = codeVersion.split('.')[0];\n    if (stateMajor !== codeMajor) {\n        return false;\n    }\n    return true;\n}\n\n\n\n\n\nexport async function addConnectedStorageToCollection(\n    collection: RxCollection<any>,\n    storageCollectionName: string,\n    schema: RxJsonSchema<any>\n) {\n\n    if (collection.schema.version !== schema.version) {\n        throw newRxError('SNH', {\n            schema,\n            version: collection.schema.version,\n            name: collection.name,\n            collection,\n            args: {\n                storageCollectionName\n            }\n        });\n    }\n\n    const collectionNameWithVersion = _collectionNamePrimary(collection.name, collection.schema.jsonSchema);\n    const collectionDocId = getPrimaryKeyOfInternalDocument(\n        collectionNameWithVersion,\n        INTERNAL_CONTEXT_COLLECTION\n    );\n\n    while (true) {\n        const collectionDoc = await getSingleDocument(\n            collection.database.internalStore,\n            collectionDocId\n        );\n        const saveData: RxDocumentData<InternalStoreCollectionDocType> = clone(ensureNotFalsy(collectionDoc));\n\n        // do nothing if already in array\n        const alreadyThere = saveData.data.connectedStorages\n            .find(row => row.collectionName === storageCollectionName && row.schema.version === schema.version);\n        if (alreadyThere) {\n            return;\n        }\n\n        // otherwise add to array and save\n        saveData.data.connectedStorages.push({\n            collectionName: storageCollectionName,\n            schema\n        });\n        try {\n            await writeSingle(\n                collection.database.internalStore,\n                {\n                    previous: ensureNotFalsy(collectionDoc),\n                    document: saveData\n                },\n                'add-connected-storage-to-collection'\n            );\n        } catch (err) {\n            if (!isBulkWriteConflictError(err)) {\n                throw err;\n            }\n            // retry on conflict\n        }\n    }\n}\n\nexport async function removeConnectedStorageFromCollection(\n    collection: RxCollection<any>,\n    storageCollectionName: string,\n    schema: RxJsonSchema<any>\n) {\n    if (collection.schema.version !== schema.version) {\n        throw newRxError('SNH', {\n            schema,\n            version: collection.schema.version,\n            name: collection.name,\n            collection,\n            args: {\n                storageCollectionName\n            }\n        });\n    }\n\n    const collectionNameWithVersion = _collectionNamePrimary(collection.name, collection.schema.jsonSchema);\n    const collectionDocId = getPrimaryKeyOfInternalDocument(\n        collectionNameWithVersion,\n        INTERNAL_CONTEXT_COLLECTION\n    );\n\n    while (true) {\n        const collectionDoc = await getSingleDocument(\n            collection.database.internalStore,\n            collectionDocId\n        );\n        const saveData: RxDocumentData<InternalStoreCollectionDocType> = clone(ensureNotFalsy(collectionDoc));\n\n        // do nothing if not there\n        const isThere = saveData.data.connectedStorages\n            .find(row => row.collectionName === storageCollectionName && row.schema.version === schema.version);\n        if (!isThere) {\n            return;\n        }\n\n        // otherwise remove from array and save\n        saveData.data.connectedStorages = saveData.data.connectedStorages.filter(item => item.collectionName !== storageCollectionName);\n        try {\n            await writeSingle(\n                collection.database.internalStore,\n                {\n                    previous: ensureNotFalsy(collectionDoc),\n                    document: saveData\n                },\n                'remove-connected-storage-from-collection'\n            );\n        } catch (err) {\n            if (!isBulkWriteConflictError(err)) {\n                throw err;\n            }\n            // retry on conflict\n        }\n    }\n}\n\n\n\n/**\n * returns the primary for a given collection-data\n * used in the internal store of a RxDatabase\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n"],"mappings":"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","ignoreList":[]}