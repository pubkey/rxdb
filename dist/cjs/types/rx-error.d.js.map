{"version":3,"file":"rx-error.d.js","names":[],"sources":["../../../src/types/rx-error.d.ts"],"sourcesContent":["import type { RxJsonSchema } from './rx-schema.d.ts';\nimport {\n    RxSchema\n} from '../rx-schema.ts';\nimport type { RxPlugin } from './rx-plugin.d.ts';\nimport { ERROR_MESSAGES } from '../plugins/dev-mode/error-messages.ts';\nimport type { RxReplicationWriteToMasterRow } from './replication-protocol.d.ts';\nimport type { BulkWriteRow, RxDocumentData } from './rx-storage.d.ts';\n\ntype KeyOf<T extends object> = Extract<keyof T, string>;\nexport type RxErrorKey = KeyOf<typeof ERROR_MESSAGES>;\n\nexport type {\n    RxError,\n    RxTypeError\n} from '../rx-error.ts';\n\n/**\n * this lists all possible parameters\n */\nexport interface RxErrorParameters {\n    readonly error?: PlainJsonError;\n    readonly errors?: PlainJsonError[];\n    readonly writeError?: RxStorageWriteError<any>;\n    readonly schemaPath?: string;\n    readonly objPath?: string;\n    readonly rootPath?: string;\n    readonly childpath?: string;\n    readonly obj?: any;\n    readonly document?: any;\n    readonly schema?: Readonly<RxJsonSchema<any> | RxSchema>;\n    readonly schemaObj?: any;\n    readonly pluginKey?: string;\n    readonly originalDoc?: Readonly<any>;\n    readonly finalDoc?: Readonly<any>;\n    readonly regex?: string;\n    readonly fieldName?: string;\n    readonly id?: string;\n    readonly data?: any;\n    readonly missingCollections?: string[];\n    readonly primaryPath?: string;\n    readonly primary?: string;\n    readonly primaryKey?: string;\n    readonly have?: any;\n    readonly should?: any;\n    readonly name?: string;\n    readonly adapter?: any;\n    readonly link?: string;\n    readonly path?: string;\n    readonly value?: any;\n    readonly givenName?: string;\n    readonly fromVersion?: number;\n    readonly toVersion?: number;\n    readonly version?: number;\n    readonly args?: any;\n    readonly opts?: any;\n    readonly dataBefore?: any;\n    readonly dataAfter?: any;\n    readonly pull?: boolean;\n    readonly push?: boolean;\n    readonly url?: string;\n    readonly key?: string;\n    readonly queryObj?: any;\n    readonly query?: any;\n    readonly op?: string;\n    readonly skip?: any;\n    readonly limit?: any;\n    readonly passwordHash?: string;\n    readonly existingPasswordHash?: string;\n    readonly password?: string | any;\n    readonly minPassLength?: number;\n    readonly own?: any;\n    readonly source?: any;\n    readonly method?: any;\n    readonly field?: string;\n    readonly ref?: string;\n    readonly funName?: string;\n    readonly functionName?: string;\n    readonly schemaHash?: string;\n    readonly previousSchema?: Readonly<RxJsonSchema<any>>;\n    readonly previousSchemaHash?: string;\n    readonly type?: string;\n    readonly when?: string;\n    readonly parallel?: boolean;\n    readonly collection?: any;\n    readonly database?: any;\n    readonly storage?: string;\n    readonly indexes?: Array<string | string[]> | Readonly<Array<string | string[]>>;\n    readonly index?: string | string[] | readonly string[];\n    readonly plugin?: RxPlugin | any;\n    readonly plugins?: Set<RxPlugin | any>;\n\n    // used in the replication plugin\n\n    /**\n     * The checkpoint of the response from the last successful\n     * pull by the client.\n     * Null if there was no pull operation before\n     * so that there is no last pulled checkpoint.\n     */\n    readonly checkpoint?: any;\n    /**\n     * The documents that failed to be pushed.\n     * Typed as 'any' because they might be modified by the push modifier.\n     */\n    readonly pushRows?: RxReplicationWriteToMasterRow<any>[];\n    readonly direction?: 'pull' | 'push';\n\n}\n\n/**\n * Error-Items which are created by the jsonschema-validator\n */\nexport type RxValidationError = {\n    readonly field: string;\n    readonly message: string;\n};\n\n/**\n * Use to have a transferable error object\n * in plain json instead of a JavaScript Error instance.\n */\nexport type PlainJsonError = {\n    name: string;\n    message: string;\n    rxdb?: true;\n    code?: RxErrorKey;\n    parameters?: RxErrorParameters;\n    stack?: string;\n};\n\n\n\n\n\n/**\n * Error that can happen per document when\n * RxStorage.bulkWrite() is called\n */\nexport type RxStorageWriteErrorBase<RxDocType> = {\n\n    status: number\n    | 409 // conflict\n    | 422 // schema validation error\n    | 510 // attachment data missing\n    ;\n\n    /**\n     * set this property to make it easy\n     * to detect if the object is a RxStorageBulkWriteError\n     */\n    isError: true;\n\n    // primary key of the document\n    documentId: string;\n\n    // the original document data that should have been written.\n    writeRow: BulkWriteRow<RxDocType>;\n};\n\nexport type RxStorageWriteErrorConflict<RxDocType> = RxStorageWriteErrorBase<RxDocType> & {\n    status: 409;\n    /**\n     * A conflict error state must contain the\n     * document state in the database.\n     * This ensures that we can continue resolving a conflict\n     * without having to pull the document out of the db first.\n     * Is not set if the error happens on an insert.\n     */\n    documentInDb: RxDocumentData<RxDocType>;\n};\n\nexport type RxStorageWriteErrorValidation<RxDocType> = RxStorageWriteErrorBase<RxDocType> & {\n    status: 422;\n    /**\n     * Other properties that give\n     * information about the error,\n     * for example a schema validation error\n     * might contain the exact error from the validator here.\n     * Must be plain JSON!\n     */\n    validationErrors: RxValidationError[];\n};\n\nexport type RxStorageWriteErrorAttachment<RxDocType> = RxStorageWriteErrorBase<RxDocType> & {\n    status: 510;\n    attachmentId: string;\n    documentInDb?: RxDocumentData<RxDocType>;\n};\n\n\nexport type RxStorageWriteError<RxDocType> =\n    RxStorageWriteErrorConflict<RxDocType> |\n    RxStorageWriteErrorValidation<RxDocType> |\n    RxStorageWriteErrorAttachment<RxDocType>;\n"],"mappings":""}