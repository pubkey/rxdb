{"version":3,"file":"index.js","names":["_index","require","_plugin","_index2","_rxjs","_helper","_index3","RxSupabaseReplicationState","exports","_RxReplicationState","replicationIdentifier","collection","pull","push","live","retryTime","autoStart","_this","call","_inheritsLoose2","default","RxReplicationState","replicateSupabase","options","flatClone","addRxPlugin","RxDBLeaderElectionPlugin","primaryPath","schema","waitForLeadership","modifiedField","DEFAULT_MODIFIED_FIELD","deletedField","DEFAULT_DELETED_FIELD","pullStream$","Subject","replicationPrimitivesPull","rowToDoc","row","deleted","modified","doc","_deleted","jsonSchema","properties","fetchById","id","data","error","client","from","tableName","select","eq","limit","length","Error","handler","lastPulledCheckpoint","batchSize","query","or","order","ascending","lastDoc","lastOfArray","newCheckpoint","undefined","docs","map","documents","checkpoint","ensureNotFalsy","modifier","stream$","asObservable","initialCheckpoint","replicationPrimitivesPush","rows","insertOrReturnConflict","insert","code","POSTGRES_INSERT_CONFLICT_CODE","conflict","updateOrReturnConflict","assumedMasterState","toRow","update","addDocEqualityToQuery","conflicts","Promise","all","newDoc","newDocumentState","c","replicationState","startBefore","start","bind","cancelBefore","cancel","sub","channel","on","event","table","payload","eventType","new","next","subscribe","status","unsubscribe","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-supabase/index.ts"],"sourcesContent":["import { RxReplicationState, startReplicationOnLeaderShip } from '../replication/index.ts';\nimport { SupabaseCheckpoint, SyncOptionsSupabase } from './types.ts';\nimport { addRxPlugin } from '../../plugin.ts';\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport {\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxDocumentData,\n    RxJsonSchema,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    WithDeleted\n} from '../../types/index';\nimport { Subject } from 'rxjs';\nimport {\n    DEFAULT_DELETED_FIELD,\n    DEFAULT_MODIFIED_FIELD,\n    POSTGRES_INSERT_CONFLICT_CODE,\n    addDocEqualityToQuery\n} from './helper.ts';\nimport { ensureNotFalsy, flatClone, lastOfArray } from '../utils/index.ts';\n\n\n\nexport class RxSupabaseReplicationState<RxDocType> extends RxReplicationState<RxDocType, SupabaseCheckpoint> {\n    constructor(\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType, any, any, any>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, SupabaseCheckpoint>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifier,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\n\nexport function replicateSupabase<RxDocType>(\n    options: SyncOptionsSupabase<RxDocType>\n) {\n    options = flatClone(options);\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const collection = options.collection;\n    const primaryPath = collection.schema.primaryPath;\n\n    // set defaults\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    const modifiedField = options.modifiedField ? options.modifiedField : DEFAULT_MODIFIED_FIELD;\n    const deletedField = options.deletedField ? options.deletedField : DEFAULT_DELETED_FIELD;\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, SupabaseCheckpoint>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, SupabaseCheckpoint> | undefined;\n\n\n    function rowToDoc(row: any): WithDeleted<RxDocType> {\n        const deleted = !!row[deletedField];\n        const modified = row[modifiedField];\n\n        const doc: WithDeleted<RxDocType> = flatClone(row);\n        delete (doc as any)[deletedField];\n        delete (doc as any)[modifiedField];\n\n        doc._deleted = deleted;\n\n        /**\n         * Only keep the modified value if that field is defined\n         * in the schema.\n         */\n        if ((collection.schema.jsonSchema.properties as any)[modifiedField]) {\n            (doc as any)[modifiedField] = modified;\n        }\n\n        return doc;\n    }\n    async function fetchById(id: string): Promise<WithDeleted<RxDocType>> {\n        const { data, error } = await options.client\n            .from(options.tableName)\n            .select()\n            .eq(primaryPath, id)\n            .limit(1)\n        if (error) throw error\n        if (data.length != 1) throw new Error('doc not found ' + id)\n        return rowToDoc(data[0])\n    }\n\n\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: SupabaseCheckpoint | undefined,\n                batchSize: number\n            ) {\n                let query = options.client\n                    .from(options.tableName)\n                    .select('*');\n                if (lastPulledCheckpoint) {\n                    const { modified, id } = lastPulledCheckpoint;\n\n                    // WHERE modified > :m OR (modified = :m AND id > :id)\n                    // PostgREST or() takes comma-separated disjuncts; use nested and() for the tie-breaker.\n                    // Wrap identifiers with double quotes to be safe if they're mixed-case.\n                    query = query.or(\n                        `\"${modifiedField}\".gt.${modified},and(\"${modifiedField}\".eq.${modified},\"${primaryPath}\".gt.${id})`\n                    );\n                }\n\n                // deterministic order & batch size\n                query = query\n                    .order(modifiedField as any, { ascending: true })\n                    .order(primaryPath as any, { ascending: true })\n                    .limit(batchSize);\n\n                const { data, error } = await query;\n                if (error) {\n                    throw error;\n                }\n\n                const lastDoc = lastOfArray(data);\n                const newCheckpoint: SupabaseCheckpoint | undefined = lastDoc ? {\n                    id: lastDoc[primaryPath],\n                    modified: lastDoc[modifiedField]\n                } : undefined;\n\n                const docs = data.map(row => rowToDoc(row))\n                return {\n                    documents: docs,\n                    checkpoint: newCheckpoint\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable(),\n            initialCheckpoint: options.pull.initialCheckpoint\n        };\n    }\n\n    const replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined = options.push ? {\n        async handler(\n            rows: RxReplicationWriteToMasterRow<RxDocType>[]\n        ) {\n            async function insertOrReturnConflict(doc: WithDeleted<RxDocType>): Promise<WithDeleted<RxDocType> | undefined> {\n                const id = (doc as any)[primaryPath];\n                const { error } = await options.client.from(options.tableName).insert(doc)\n                if (!error) {\n                    return;\n                } else if (error.code == POSTGRES_INSERT_CONFLICT_CODE) {\n                    // conflict!\n                    const conflict = await fetchById(id);\n                    return conflict;\n                } else {\n                    throw error\n                }\n            }\n            async function updateOrReturnConflict(\n                doc: WithDeleted<RxDocType>,\n                assumedMasterState: WithDeleted<RxDocType>\n            ): Promise<WithDeleted<RxDocType> | undefined> {\n                ensureNotFalsy(assumedMasterState);\n                const id = (doc as any)[primaryPath];\n                const toRow: Record<string, any> = flatClone(doc);\n                if (doc._deleted) {\n                    toRow[deletedField] = !!doc._deleted;\n                    if (deletedField !== '_deleted') {\n                        delete toRow._deleted;\n                    }\n                }\n\n                // modified field will be set server-side\n                delete toRow[modifiedField];\n\n                let query = options.client\n                    .from(options.tableName)\n                    .update(toRow);\n\n                query = addDocEqualityToQuery(\n                    collection.schema.jsonSchema,\n                    deletedField,\n                    modifiedField,\n                    assumedMasterState,\n                    query\n                );\n\n                const { data, error } = await query.select();\n                if (error) {\n                    throw error;\n                }\n\n                if (data && data.length > 0) {\n                    return;\n                } else {\n                    // no match -> conflict\n                    return await fetchById(id);\n                }\n            }\n\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            await Promise.all(\n                rows.map(async (row) => {\n                    const newDoc = row.newDocumentState as WithDeleted<RxDocType>;\n                    if (!row.assumedMasterState) {\n                        const c = await insertOrReturnConflict(newDoc);\n                        if (c) conflicts.push(c);\n                    } else {\n                        const c = await updateOrReturnConflict(newDoc, row.assumedMasterState as any);\n                        if (c) conflicts.push(c);\n                    }\n                })\n            );\n\n            return conflicts;\n        }\n    } : undefined;\n\n\n    const replicationState = new RxSupabaseReplicationState<RxDocType>(\n        options.replicationIdentifier,\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Subscribe to changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const sub = options.client\n                .channel('realtime:' + options.tableName)\n                .on(\n                    'postgres_changes',\n                    { event: '*', schema: 'public', table: options.tableName },\n                    (payload) => {\n                        /**\n                         * We assume soft-deletes in supabase\n                         * and therefore cleanup-hard-deletes\n                         * are not relevant for the sync.\n                         */\n                        if (payload.eventType === 'DELETE') {\n                            return;\n                        }\n\n                        const row = payload.new;\n                        const doc = rowToDoc(row);\n                        pullStream$.next({\n                            checkpoint: {\n                                id: (doc as any)[primaryPath],\n                                modified: (row as any)[modifiedField]\n                            },\n                            documents: [doc as any],\n                        });\n                    }\n                )\n                .subscribe((status: string) => {\n                    /**\n                     * Trigger resync flag on reconnects\n                     */\n                    if (status === 'SUBSCRIBED') {\n                        pullStream$.next('RESYNC');\n                    }\n                });\n            replicationState.cancel = () => {\n                sub.unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n    return replicationState;\n}\n\n\n"],"mappings":"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","ignoreList":[]}