{"version":3,"file":"rx-pipeline.js","names":["_rxjs","require","_index","_rxStorageHelper","_docCache","_rxDatabaseInternalStore","_flaggedFunctions","RxPipeline","exports","identifier","source","destination","handler","batchSize","processQueue","PROMISE_RESOLVE_VOID","subs","stopped","toRun","lastSourceDocTime","BehaviorSubject","lastProcessedDocTime","somethingChanged","Subject","secretFunctionName","randomToken","waitBeforeWriteFn","stack","Error","includes","awaitIdle","checkpointId","onClose","push","close","awaitBeforeReads","add","eventBulks$","pipe","filter","bulk","isLocal","subscribe","next","events","documentData","_meta","lwt","database","internalStore","changeStream","eventBulk","index","length","event","context","INTERNAL_CONTEXT_PIPELINE_CHECKPOINT","key","data","lastDocTime","_proto","prototype","trigger","_this2","then","done","_loop","checkpointDoc","getCheckpointDoc","checkpoint","undefined","docsSinceResult","getChangedDocumentsSince","storageInstance","lastTime","documents","rxDocuments","mapDocumentsDataToCacheDocs","_this","fnKey","blockFlaggedFunctionKey","FLAGGED_FUNCTIONS","err","error","releaseFlaggedFunctionKey","v","ensureNotFalsy","lastOfArray","closed","setCheckpointDoc","_ret","getValue","firstValueFrom","delete","forEach","s","unsubscribe","remove","insternalStore","newDoc","clone","_deleted","writeResult","bulkWrite","previous","document","pipeline","getPrimaryKeyOfInternalDocument","results","findDocumentsById","result","newCheckpoint","_attachments","now","_rev","createRevision","token","id","addPipeline","options","waitForLeadership","startPromise"],"sources":["../../../../src/plugins/pipeline/rx-pipeline.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    Subject,\n    Subscription,\n    filter,\n    firstValueFrom,\n    race\n} from 'rxjs';\nimport type {\n    InternalStoreDocType,\n    RxCollection,\n    RxDocument,\n    RxDocumentData\n} from '../../types';\nimport type {\n    CheckpointDocData,\n    RxPipelineHandler,\n    RxPipelineOptions\n} from './types';\nimport {\n    PROMISE_RESOLVE_VOID,\n    clone,\n    createRevision,\n    ensureNotFalsy,\n    lastOfArray,\n    nameFunction,\n    now,\n    promiseWait,\n    randomToken\n} from '../utils/index.ts';\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\nimport { mapDocumentsDataToCacheDocs } from '../../doc-cache.ts';\nimport { INTERNAL_CONTEXT_PIPELINE_CHECKPOINT, getPrimaryKeyOfInternalDocument } from '../../rx-database-internal-store.ts';\nimport { FLAGGED_FUNCTIONS, blockFlaggedFunctionKey, releaseFlaggedFunctionKey } from './flagged-functions.ts';\n\nexport class RxPipeline<RxDocType> {\n    processQueue = PROMISE_RESOLVE_VOID;\n    subs: Subscription[] = [];\n    stopped: boolean = false;\n\n    toRun = 1;\n    checkpointId: string;\n\n    lastSourceDocTime = new BehaviorSubject(-1);\n    lastProcessedDocTime = new BehaviorSubject(0);\n    somethingChanged = new Subject();\n\n\n    secretFunctionName = 'tx_fn_' + randomToken(10)\n\n    waitBeforeWriteFn = async () => {\n        const stack = new Error().stack;\n        if (stack && (\n            stack.includes(this.secretFunctionName)\n        )) {\n        } else {\n            await this.awaitIdle();\n        }\n    }\n\n    /**\n     * The handler of the pipeline must never throw.\n     * If it did anyway, the pipeline will be stuck and always\n     * throw the previous error on all operations.\n     */\n    error: any;\n\n    constructor(\n        public readonly identifier: string,\n        public readonly source: RxCollection<RxDocType>,\n        public readonly destination: RxCollection<any>,\n        public readonly handler: RxPipelineHandler<RxDocType>,\n        public readonly batchSize = 100\n    ) {\n        this.checkpointId = 'rx-pipeline-' + identifier;\n        this.source.onClose.push(() => this.close());\n        this.destination.awaitBeforeReads.add(this.waitBeforeWriteFn);\n        this.subs.push(\n            this.source.eventBulks$.pipe(\n                filter(bulk => !this.stopped && !bulk.isLocal)\n            ).subscribe((bulk) => {\n                this.lastSourceDocTime.next(bulk.events[0].documentData._meta.lwt);\n                this.somethingChanged.next({});\n            })\n        );\n        this.subs.push(\n            this.destination.database.internalStore\n                .changeStream()\n                .subscribe(eventBulk => {\n                    const events = eventBulk.events;\n                    for (let index = 0; index < events.length; index++) {\n                        const event = events[index];\n                        if (\n                            event.documentData.context === INTERNAL_CONTEXT_PIPELINE_CHECKPOINT &&\n                            event.documentData.key === this.checkpointId\n                        ) {\n                            this.lastProcessedDocTime.next(event.documentData.data.lastDocTime);\n                            this.somethingChanged.next({});\n                        }\n                    }\n                })\n        );\n    }\n\n    trigger() {\n        /**\n         * Do not stack up too many\n         * so that fast writes to the source collection\n         * do not block anything too long.\n         */\n        if (this.toRun > 2) {\n            return;\n        }\n        this.toRun = this.toRun + 1;\n\n        this.processQueue = this.processQueue.then(async () => {\n            this.toRun = this.toRun - 1;\n\n            let done = false;\n            while (\n                !done &&\n                !this.stopped &&\n                !this.destination.closed &&\n                !this.source.closed &&\n                !this.error\n            ) {\n                const checkpointDoc = await getCheckpointDoc(this);\n                const checkpoint = checkpointDoc ? checkpointDoc.data.checkpoint : undefined;\n                const docsSinceResult = await getChangedDocumentsSince(\n                    this.source.storageInstance,\n                    this.batchSize,\n                    checkpoint\n                );\n\n                let lastTime = checkpointDoc ? checkpointDoc.data.lastDocTime : 0;\n                if (docsSinceResult.documents.length > 0) {\n                    const rxDocuments = mapDocumentsDataToCacheDocs(this.source._docCache, docsSinceResult.documents);\n                    const _this = this;\n\n\n\n                    // const o: any = {};\n                    // eval(`\n                    //     async function ${this.secretFunctionName}(docs){ const x = await _this.handler(docs); return x; }\n                    //     o.${this.secretFunctionName} = ${this.secretFunctionName};\n                    // `);\n                    // await o[this.secretFunctionName](rxDocuments);\n\n                    const fnKey = blockFlaggedFunctionKey();\n                    this.secretFunctionName = fnKey;\n                    try {\n                        await FLAGGED_FUNCTIONS[fnKey](() => _this.handler(rxDocuments));\n                    } catch (err: any) {\n                        this.error = err;\n                    } finally {\n                        releaseFlaggedFunctionKey(fnKey);\n                    }\n\n                    if (this.error) {\n                        return;\n                    }\n\n                    lastTime = ensureNotFalsy(lastOfArray(docsSinceResult.documents))._meta.lwt;\n                }\n                if (!this.destination.closed) {\n                    await setCheckpointDoc(this, { checkpoint: docsSinceResult.checkpoint, lastDocTime: lastTime }, checkpointDoc);\n                }\n                if (docsSinceResult.documents.length < this.batchSize) {\n                    done = true;\n                }\n            }\n        });\n    }\n\n    async awaitIdle() {\n        if (this.error) {\n            throw this.error;\n        }\n        let done = false;\n        while (!done) {\n            await this.processQueue;\n            if (this.error) {\n                throw this.error;\n            }\n            if (this.lastProcessedDocTime.getValue() >= this.lastSourceDocTime.getValue()) {\n                done = true;\n            } else {\n                await firstValueFrom(this.somethingChanged);\n            }\n        }\n    }\n\n    async close() {\n        await this.processQueue;\n        this.stopped = true;\n        this.destination.awaitBeforeReads.delete(this.waitBeforeWriteFn);\n        this.subs.forEach(s => s.unsubscribe());\n        await this.processQueue;\n    }\n\n    /**\n     * Remove the pipeline and all metadata which it has stored\n     */\n    async remove() {\n        const insternalStore = this.destination.database.internalStore;\n        const checkpointDoc = await getCheckpointDoc(this);\n        if (checkpointDoc) {\n            const newDoc: RxDocumentData<InternalStoreDocType> = clone(checkpointDoc);\n            newDoc._deleted = true;\n            const writeResult = await insternalStore.bulkWrite([{\n                previous: checkpointDoc,\n                document: newDoc,\n            }], 'rx-pipeline');\n            if (writeResult.error.length > 0) {\n                throw writeResult.error;\n            }\n        }\n        return this.close();\n    }\n}\n\n\nexport async function getCheckpointDoc<RxDocType>(\n    pipeline: RxPipeline<RxDocType>\n): Promise<RxDocumentData<InternalStoreDocType<CheckpointDocData>> | undefined> {\n    const insternalStore = pipeline.destination.database.internalStore;\n    const checkpointId = getPrimaryKeyOfInternalDocument(\n        pipeline.checkpointId,\n        INTERNAL_CONTEXT_PIPELINE_CHECKPOINT\n    );\n    const results = await insternalStore.findDocumentsById([checkpointId], false);\n    const result: RxDocumentData<InternalStoreDocType> = results[0];\n    if (result) {\n        return result;\n    } else {\n        return undefined;\n    }\n}\n\nexport async function setCheckpointDoc<RxDocType>(\n    pipeline: RxPipeline<RxDocType>,\n    newCheckpoint: CheckpointDocData,\n    previous?: RxDocumentData<InternalStoreDocType>\n): Promise<void> {\n    const insternalStore = pipeline.destination.database.internalStore;\n    const newDoc: RxDocumentData<InternalStoreDocType<CheckpointDocData>> = {\n        _attachments: {},\n        _deleted: false,\n        _meta: {\n            lwt: now()\n        },\n        _rev: createRevision(pipeline.destination.database.token, previous),\n        context: INTERNAL_CONTEXT_PIPELINE_CHECKPOINT,\n        data: newCheckpoint,\n        id: getPrimaryKeyOfInternalDocument(\n            pipeline.checkpointId,\n            INTERNAL_CONTEXT_PIPELINE_CHECKPOINT\n        ),\n        key: pipeline.checkpointId\n    };\n\n    const writeResult = await insternalStore.bulkWrite([{\n        previous,\n        document: newDoc,\n    }], 'rx-pipeline');\n    if (writeResult.error.length > 0) {\n        throw writeResult.error;\n    }\n}\n\n\nexport async function addPipeline<RxDocType>(\n    this: RxCollection<RxDocType>,\n    options: RxPipelineOptions<RxDocType>\n): Promise<RxPipeline<RxDocType>> {\n    const pipeline = new RxPipeline<RxDocType>(\n        options.identifier,\n        this,\n        options.destination,\n        options.handler,\n        options.batchSize\n    );\n    const waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const startPromise = waitForLeadership ? this.database.waitForLeadership() : PROMISE_RESOLVE_VOID;\n    startPromise.then(() => {\n        pipeline.trigger();\n        pipeline.subs.push(\n            this.eventBulks$.pipe(\n                filter(bulk => {\n                    if (pipeline.stopped) {\n                        return false;\n                    }\n                    return !bulk.isLocal;\n                })\n            ).subscribe(() => pipeline.trigger())\n        );\n    });\n\n    return pipeline;\n}\n"],"mappings":"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","ignoreList":[]}