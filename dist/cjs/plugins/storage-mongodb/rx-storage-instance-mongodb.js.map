{"version":3,"file":"rx-storage-instance-mongodb.js","names":["_rxjs","require","_rxSchemaHelper","_index","_mongodb","_rxStorageHelper","_mongodbHelper","_utilsRxdbVersion","RxStorageInstanceMongoDB","exports","storage","databaseName","collectionName","schema","internals","options","settings","changes$","Subject","runningOperations","BehaviorSubject","writeQueue","PROMISE_RESOLVE_VOID","mongoObjectIdCache","WeakMap","attachments","Error","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","inMongoPrimaryPath","MONGO_ID_SUBSTITUTE_FIELDNAME","mongoOptions","driverInfo","name","version","RXDB_VERSION","mongoClient","MongoClient","databaseSettings","connection","mongoDatabase","db","indexes","slice","map","index","arIndex","isMaybeReadonlyArray","push","mongoCollectionPromise","createCollection","then","mongoCollection","createIndexes","mongoIndex","forEach","field","getMongoDBIndexName","key","_proto","prototype","bulkWrite","documentWrites","context","next","getValue","closed","Promise","reject","ret","error","docIds","d","document","documentStates","findDocumentsById","documentStatesMap","Map","doc","docId","set","categorized","categorizeBulkWriteRows","changeByDocId","eventBulk","events","change","documentId","errors","all","bulkInsertDocs","writeRow","writeResult","findOneAndUpdate","$setOnInsert","swapRxDocToMongo","upsert","includeResultMetadata","value","conflictError","status","documentInDb","swapMongoToRxDoc","ensureNotFalsy","isError","event","get","bulkUpdateDocs","findOneAndReplace","_rev","previous","returnDocument","ok","currentDocState","currentDoc","getFromMapOrThrow","length","lastState","newestRow","checkpoint","id","lwt","_meta","withDeleted","session","plainQuery","$in","_deleted","result","queryResult","find","toArray","row","query","originalPreparedQuery","preparedQuery","prepareMongoDBQuery","mongoSelector","skip","limit","sort","mongoSort","resultDocs","documents","count","countDocuments","mode","cleanup","minimumDeletedTime","maxDeletionTime","now","deleteMany","$lt","getAttachmentData","_documentId","_attachmentId","_digest","changeStream","remove","drop","close","requestIdlePromise","firstValueFrom","pipe","filter","c","createMongoDBStorageInstance","params","instance","resolve"],"sources":["../../../../src/plugins/storage-mongodb/rx-storage-instance-mongodb.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    Observable,\n    Subject,\n    filter,\n    firstValueFrom\n} from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PreparedQuery,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageWriteErrorConflict,\n    StringKeys\n} from '../../types/index.d.ts';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    isMaybeReadonlyArray,\n    now,\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise\n} from '../../plugins/utils/index.ts';\nimport {\n    MongoDBStorageInternals,\n    MongoQuerySelector,\n    RxStorageMongoDBInstanceCreationOptions,\n    RxStorageMongoDBSettings\n} from './mongodb-types.ts';\nimport { RxStorageMongoDB } from './rx-storage-mongodb.ts';\nimport {\n    Db as MongoDatabase,\n    Collection as MongoCollection,\n    MongoClient,\n    ObjectId,\n    ClientSession\n} from 'mongodb';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper.ts';\nimport {\n    MONGO_ID_SUBSTITUTE_FIELDNAME,\n    getMongoDBIndexName,\n    prepareMongoDBQuery,\n    swapMongoToRxDoc,\n    swapRxDocToMongo\n} from './mongodb-helper.ts';\nimport { RXDB_VERSION } from '../utils/utils-rxdb-version.ts';\n\nexport class RxStorageInstanceMongoDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MongoDBStorageInternals,\n    RxStorageMongoDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public readonly inMongoPrimaryPath: string;\n    public closed?: Promise<void>;\n    private readonly changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly mongoClient: MongoClient;\n    public readonly mongoDatabase: MongoDatabase;\n    public readonly mongoCollectionPromise: Promise<MongoCollection<RxDocumentData<RxDocType> | any>>;\n    // public mongoChangeStream?: MongoChangeStream<any, ChangeStreamDocument<any>>;\n\n\n    /**\n     * Closing the connection must not happen when\n     * an operation is running, otherwise we get an error.\n     * So we store all running operations here so that\n     * they can be awaited.\n     */\n    public readonly runningOperations = new BehaviorSubject(0);\n    public writeQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    /**\n     * We use this to be able to still fetch\n     * the objectId after transforming the document from mongo-style (with _id)\n     * to RxDB\n     */\n    public readonly mongoObjectIdCache = new WeakMap<RxDocumentData<RxDocType>, ObjectId>();\n\n    constructor(\n        public readonly storage: RxStorageMongoDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MongoDBStorageInternals,\n        public readonly options: Readonly<RxStorageMongoDBInstanceCreationOptions>,\n        public readonly settings: RxStorageMongoDBSettings\n    ) {\n        if (this.schema.attachments) {\n            throw new Error('attachments not supported in mongodb storage, make a PR if you need that');\n        }\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        this.inMongoPrimaryPath = this.primaryPath === '_id' ? MONGO_ID_SUBSTITUTE_FIELDNAME : this.primaryPath;\n        \n        const mongoOptions: any = {};\n        mongoOptions.driverInfo = {\n            name: 'RxDB',\n            version: RXDB_VERSION\n        };\n        this.mongoClient = new MongoClient(storage.databaseSettings.connection, mongoOptions);\n        this.mongoDatabase = this.mongoClient.db(databaseName + '-v' + this.schema.version);\n\n        const indexes = (this.schema.indexes ? this.schema.indexes.slice() : []).map(index => {\n            const arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n            return arIndex;\n        });\n        indexes.push([this.inMongoPrimaryPath]);\n\n        this.mongoCollectionPromise = this.mongoDatabase.createCollection(collectionName)\n            .then(async (mongoCollection) => {\n                await mongoCollection.createIndexes(\n                    indexes.map(index => {\n                        const mongoIndex: any = {};\n                        index.forEach(field => mongoIndex[field] = 1);\n                        return { name: getMongoDBIndexName(index), key: mongoIndex };\n                    })\n                );\n\n                /**\n                 * TODO in a setup where multiple servers run node.js\n                 * processes that use the mongodb storage, we should propagate\n                 * events by listening to the mongodb changestream.\n                 * This maybe should be a premium feature.\n                 */\n                // this.mongoChangeStream = mongoCollection.watch(\n                //     undefined, {\n                //     batchSize: 100\n                // }\n                // ).on('change', change => {\n\n\n                //     const eventBulkId = randomToken(10);\n                //     const newDocData: RxDocumentData<RxDocType> = (change as any).fullDocument;\n                //     const documentId = newDocData[this.primaryPath] as any;\n\n                //     const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint> = {\n                //         checkpoint: {\n                //             id: newDocData[this.primaryPath] as any,\n                //             lwt: newDocData._meta.lwt\n                //         },\n                //         context: 'mongodb-write',\n                //         id: eventBulkId,\n                //         events: [{\n                //             documentData: newDocData,\n                //             documentId,\n                //             operation: 'INSERT',\n                //             previousDocumentData: undefined,\n                //         }],\n                //     };\n\n                //     this.changes$.next(eventBulk);\n                // });\n\n\n                return mongoCollection;\n            });\n\n\n    }\n\n    /**\n     * Bulk writes on the mongodb storage.\n     * Notice that MongoDB does not support cross-document transactions\n     * so we have to do a update-if-previous-is-correct like operations.\n     * (Similar to what RxDB does with the revision system)\n     */\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n\n        this.writeQueue = this.writeQueue.then(async () => {\n            this.runningOperations.next(this.runningOperations.getValue() + 1);\n\n            const mongoCollection = await this.mongoCollectionPromise;\n            if (this.closed) {\n                return Promise.reject(new Error('already closed'));\n            }\n            const primaryPath = this.primaryPath;\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                error: []\n            };\n\n\n            const docIds = documentWrites.map(d => (d.document as any)[primaryPath]);\n            const documentStates = await this.findDocumentsById(\n                docIds,\n                true\n            );\n            const documentStatesMap = new Map();\n            documentStates.forEach(doc => {\n                const docId = doc[primaryPath];\n                documentStatesMap.set(docId, doc);\n            });\n            const categorized = categorizeBulkWriteRows<RxDocType>(\n                this,\n                primaryPath as any,\n                documentStatesMap,\n                documentWrites,\n                context\n            );\n\n            const changeByDocId = new Map<string, RxStorageChangeEvent<RxDocumentData<RxDocType>>>();\n            categorized.eventBulk.events.forEach(change => {\n                changeByDocId.set(change.documentId, change);\n            });\n\n\n            ret.error = categorized.errors;\n\n            /**\n             * Reset the event bulk because\n             * conflicts can still appear after the categorization\n             */\n            const eventBulk = categorized.eventBulk;\n            eventBulk.events = [];\n\n            await Promise.all([\n                /**\n                 * Inserts\n                 * @link https://sparkbyexamples.com/mongodb/mongodb-insert-if-not-exists/\n                 */\n                Promise.all(\n                    categorized.bulkInsertDocs.map(async (writeRow) => {\n                        const docId: string = writeRow.document[primaryPath] as any;\n                        const writeResult = await mongoCollection.findOneAndUpdate(\n                            {\n                                [this.inMongoPrimaryPath]: docId\n                            },\n                            {\n                                $setOnInsert: swapRxDocToMongo(writeRow.document)\n                            },\n                            {\n                                upsert: true,\n                                includeResultMetadata: true\n                            }\n                        );\n                        if (writeResult.value) {\n                            // had insert conflict\n                            const conflictError: RxStorageWriteErrorConflict<RxDocType> = {\n                                status: 409,\n                                documentId: docId,\n                                writeRow,\n                                documentInDb: swapMongoToRxDoc(ensureNotFalsy(writeResult.value)),\n                                isError: true\n                            };\n                            ret.error.push(conflictError);\n                        } else {\n                            const event = changeByDocId.get(docId);\n                            if (event) {\n                                eventBulk.events.push(event);\n                            }\n                        }\n                    })\n                ),\n                /**\n                 * Updates\n                 */\n                Promise.all(\n                    categorized.bulkUpdateDocs.map(async (writeRow) => {\n                        const docId = writeRow.document[primaryPath] as string;\n                        const writeResult = await mongoCollection.findOneAndReplace(\n                            {\n                                [this.inMongoPrimaryPath]: docId,\n                                _rev: ensureNotFalsy(writeRow.previous)._rev\n                            },\n                            swapRxDocToMongo(writeRow.document),\n                            {\n                                includeResultMetadata: true,\n                                upsert: false,\n                                returnDocument: 'before'\n                            }\n                        );\n                        if (!writeResult.ok) {\n                            const currentDocState = await this.findDocumentsById([docId], true);\n                            const currentDoc = currentDocState[0];\n                            // had insert conflict\n                            const conflictError: RxStorageWriteErrorConflict<RxDocType> = {\n                                status: 409,\n                                documentId: docId,\n                                writeRow,\n                                documentInDb: ensureNotFalsy(currentDoc),\n                                isError: true\n                            };\n                            ret.error.push(conflictError);\n                        } else {\n                            const event = getFromMapOrThrow(changeByDocId, docId);\n                            eventBulk.events.push(event);\n                        }\n\n                    })\n                )\n            ]);\n\n            if (categorized.eventBulk.events.length > 0) {\n                const lastState = ensureNotFalsy(categorized.newestRow).document;\n                categorized.eventBulk.checkpoint = {\n                    id: lastState[primaryPath],\n                    lwt: lastState._meta.lwt\n                };\n                this.changes$.next(categorized.eventBulk);\n            }\n\n            this.runningOperations.next(this.runningOperations.getValue() - 1);\n            return ret;\n        });\n        return this.writeQueue;\n\n    }\n\n    async findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean,\n        session?: ClientSession\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const primaryPath = this.primaryPath;\n\n        const plainQuery: MongoQuerySelector<any> = {\n            [primaryPath]: {\n                $in: docIds\n            }\n        };\n        if (!withDeleted) {\n            plainQuery._deleted = false;\n        }\n        const result: RxDocumentData<RxDocType>[] = [];\n        const queryResult = await mongoCollection.find(\n            plainQuery,\n            {\n                session\n            }\n        ).toArray();\n        queryResult.forEach(row => {\n            result.push(\n                swapMongoToRxDoc(\n                    row as any\n                )\n            );\n        });\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return result;\n    }\n\n    async query(\n        originalPreparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const preparedQuery = prepareMongoDBQuery(this.schema, originalPreparedQuery.query);\n\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        await this.writeQueue;\n        const mongoCollection = await this.mongoCollectionPromise;\n\n        let query = mongoCollection.find(preparedQuery.mongoSelector);\n        if (preparedQuery.query.skip) {\n            query = query.skip(preparedQuery.query.skip);\n        }\n        if (preparedQuery.query.limit) {\n            query = query.limit(preparedQuery.query.limit);\n        }\n        if (preparedQuery.query.sort) {\n            query = query.sort(preparedQuery.mongoSort);\n        }\n        const resultDocs = await query.toArray();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            documents: resultDocs.map(d => swapMongoToRxDoc(d))\n        };\n    }\n\n    async count(\n        originalPreparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const preparedQuery = prepareMongoDBQuery(this.schema, originalPreparedQuery.query);\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        await this.writeQueue;\n        const mongoCollection = await this.mongoCollectionPromise;\n        const count = await mongoCollection.countDocuments(preparedQuery.mongoSelector);\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            count,\n            mode: 'fast'\n        };\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        await mongoCollection.deleteMany({\n            _deleted: true,\n            '_meta.lwt': {\n                $lt: maxDeletionTime\n            }\n        });\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return true;\n    }\n\n    async getAttachmentData(\n        _documentId: string,\n        _attachmentId: string,\n        _digest: string\n    ): Promise<string> {\n        await this.mongoCollectionPromise;\n        throw new Error('attachments not implemented, make a PR');\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$;\n    }\n\n    async remove(): Promise<void> {\n        if (this.closed) {\n            throw new Error('already closed');\n        }\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        await mongoCollection.drop();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        await this.close();\n    }\n\n    async close(): Promise<void> {\n        // TODO without this next-tick we have random fails in the tests\n        await requestIdlePromise(200);\n\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            await this.mongoCollectionPromise;\n            await firstValueFrom(this.runningOperations.pipe(filter(c => c === 0)));\n            // await ensureNotFalsy(this.mongoChangeStream).close();\n            await this.mongoClient.close();\n        })();\n        return this.closed;\n    }\n}\n\nexport function createMongoDBStorageInstance<RxDocType>(\n    storage: RxStorageMongoDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMongoDBInstanceCreationOptions>,\n    settings: RxStorageMongoDBSettings\n): Promise<RxStorageInstanceMongoDB<RxDocType>> {\n    const instance = new RxStorageInstanceMongoDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        {},\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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","ignoreList":[]}