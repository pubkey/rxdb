{"version":3,"file":"utils-array.js","names":["lastOfArray","ar","length","shuffleArray","arr","slice","sort","Math","random","randomOfArray","randomElement","floor","toArray","input","Array","isArray","batchArray","array","batchSize","ret","batch","splice","push","removeOneFromArrayIfMatches","condition","i","done","isMaybeReadonlyArray","x","isOneItemOfArrayInOtherArray","ar1","ar2","el","has","includes","arrayFilterNotEmpty","value","undefined","countUntilNotMatching","matchingFn","count","idx","item","matching","asyncFilter","predicate","filters","Promise","all","map","filter","index","sumNumberArray","maxOfNumbers","max","appendToArray","add","addSize","baseSize","uniqueArray","arrArg","elem","pos","indexOf","sortByObjectNumberProperty","property","a","b"],"sources":["../../../../src/plugins/utils/utils-array.ts"],"sourcesContent":["import type {\n    MaybePromise,\n    MaybeReadonly\n} from '../../types/index.d.ts';\n\nexport function lastOfArray<T>(ar: T[]): T | undefined {\n    return ar[ar.length - 1];\n}\n\n/**\n * shuffle the given array\n */\nexport function shuffleArray<T>(arr: T[]): T[] {\n    return arr.slice(0).sort(() => (Math.random() - 0.5));\n}\n\nexport function randomOfArray<T>(arr: T[]): T {\n    const randomElement = arr[Math.floor(Math.random() * arr.length)];\n    return randomElement;\n}\n\n\nexport function toArray<T>(input: T | T[] | Readonly<T> | Readonly<T[]>): T[] {\n    return Array.isArray(input) ? (input as any[]).slice(0) : [input];\n}\n\n/**\n * Split array with items into smaller arrays with items\n * @link https://stackoverflow.com/a/7273794/3443137\n */\nexport function batchArray<T>(array: T[], batchSize: number): T[][] {\n    array = array.slice(0);\n    const ret: T[][] = [];\n    while (array.length) {\n        const batch = array.splice(0, batchSize);\n        ret.push(batch);\n    }\n    return ret;\n}\n\n/**\n * @link https://stackoverflow.com/a/15996017\n */\nexport function removeOneFromArrayIfMatches<T>(ar: T[], condition: (x: T) => boolean): T[] {\n    ar = ar.slice();\n    let i = ar.length;\n    let done = false;\n    while (i-- && !done) {\n        if (condition(ar[i])) {\n            done = true;\n            ar.splice(i, 1);\n        }\n    }\n    return ar;\n}\n\n/**\n * returns true if the supplied argument is either an Array<T> or a Readonly<Array<T>>\n */\nexport function isMaybeReadonlyArray(x: any): x is MaybeReadonly<any[]> {\n    // While this looks strange, it's a workaround for an issue in TypeScript:\n    // https://github.com/microsoft/TypeScript/issues/17002\n    //\n    // The problem is that `Array.isArray` as a type guard returns `false` for a readonly array,\n    // but at runtime the object is an array and the runtime call to `Array.isArray` would return `true`.\n    // The type predicate here allows for both `Array<T>` and `Readonly<Array<T>>` to pass a type check while\n    // still performing runtime type inspection.\n    return Array.isArray(x);\n}\n\n\n\nexport function isOneItemOfArrayInOtherArray<T>(ar1: T[], ar2: T[]): boolean {\n    for (let i = 0; i < ar1.length; i++) {\n        const el = ar1[i];\n        const has = ar2.includes(el);\n        if (has) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n/**\n * Use this in array.filter() to remove all empty slots\n * and have the correct typings afterwards.\n * @link https://stackoverflow.com/a/46700791/3443137\n */\nexport function arrayFilterNotEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n    if (value === null || value === undefined) {\n        return false;\n    }\n    return true;\n}\n\nexport function countUntilNotMatching<T>(\n    ar: T[],\n    matchingFn: (v: T, idx: number) => boolean\n): number {\n    let count = 0;\n    let idx = -1;\n    for (const item of ar) {\n        idx = idx + 1;\n        const matching = matchingFn(item, idx);\n        if (matching) {\n            count = count + 1;\n        } else {\n            break;\n        }\n    }\n    return count;\n}\n\nexport async function asyncFilter<T>(array: T[], predicate: (item: T, index: number, a: T[]) => MaybePromise<boolean>): Promise<T[]> {\n    const filters = await Promise.all(\n        array.map(predicate)\n    );\n\n    return array.filter((...[, index]) => filters[index]);\n}\n\n/**\n * @link https://stackoverflow.com/a/3762735\n */\nexport function sumNumberArray(array: number[]): number {\n    let count = 0;\n    for (let i = array.length; i--;) {\n        count += array[i];\n    }\n    return count;\n}\n\nexport function maxOfNumbers(arr: number[]): number {\n    return Math.max(...arr);\n}\n\n\n/**\n * Appends the given documents to the given array.\n * This will mutate the first given array.\n * Mostly used as faster alternative to Array.concat()\n * because .concat() is so slow.\n * @link https://www.measurethat.net/Benchmarks/Show/4223/0/array-concat-vs-spread-operator-vs-push#latest_results_block\n * \n * TODO it turns out that in mid 2024 v8 has optimized Array.concat()\n * so it might be faster to just use concat() again:\n * @link https://jsperf.app/qiqawa/10\n */\nexport function appendToArray<T>(ar: T[], add: T[] | readonly T[]): void {\n    /**\n     * Pre-increasing the array size has turned out\n     * to be way faster when big arrays must be handled.\n     * @link https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki\n     */\n    const addSize = add.length;\n    if (addSize === 0) {\n        return;\n    }\n    const baseSize = ar.length;\n    ar.length = baseSize + add.length;\n    for (let i = 0; i < addSize; ++i) {\n        ar[baseSize + i] = add[i];\n    }\n}\n\n/**\n * @link https://gist.github.com/telekosmos/3b62a31a5c43f40849bb\n */\nexport function uniqueArray(arrArg: string[]): string[] {\n    return arrArg.filter(function (elem, pos, arr) {\n        return arr.indexOf(elem) === pos;\n    });\n}\n\n\nexport function sortByObjectNumberProperty<T>(property: keyof T) {\n    return (a: T, b: T) => {\n        return (b as any)[property] - (a as any)[property];\n    }\n}\n"],"mappings":"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","ignoreList":[]}